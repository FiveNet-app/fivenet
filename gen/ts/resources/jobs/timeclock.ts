// @generated by protobuf-ts 2.9.3 with parameter optimize_speed,long_type_bigint
// @generated from protobuf file "resources/jobs/timeclock.proto" (package "resources.jobs", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.jobs.TimeclockEntry
 */
export interface TimeclockEntry {
    /**
     * @generated from protobuf field: string job = 1;
     */
    job: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp date = 2;
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: int32 user_id = 3;
     */
    userId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort user = 4;
     */
    user?: UserShort;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp start_time = 5;
     */
    startTime?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp end_time = 6;
     */
    endTime?: Timestamp;
    /**
     * @generated from protobuf field: float spent_time = 7;
     */
    spentTime: number;
}
/**
 * @generated from protobuf message resources.jobs.TimeclockStats
 */
export interface TimeclockStats {
    /**
     * @generated from protobuf field: string job = 1;
     */
    job: string;
    /**
     * @generated from protobuf field: float spent_time_sum = 2;
     */
    spentTimeSum: number;
    /**
     * @generated from protobuf field: float spent_time_avg = 3;
     */
    spentTimeAvg: number;
    /**
     * @generated from protobuf field: float spent_time_max = 4;
     */
    spentTimeMax: number;
}
/**
 * @generated from protobuf message resources.jobs.TimeclockWeeklyStats
 */
export interface TimeclockWeeklyStats {
    /**
     * @generated from protobuf field: string date = 1;
     */
    date: string;
    /**
     * @generated from protobuf field: float sum = 2;
     */
    sum: number;
    /**
     * @generated from protobuf field: float avg = 3;
     */
    avg: number;
    /**
     * @generated from protobuf field: float max = 4;
     */
    max: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class TimeclockEntry$Type extends MessageType<TimeclockEntry> {
    constructor() {
        super("resources.jobs.TimeclockEntry", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 2, name: "date", kind: "message", T: () => Timestamp },
            { no: 3, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "user", kind: "message", T: () => UserShort },
            { no: 5, name: "start_time", kind: "message", T: () => Timestamp },
            { no: 6, name: "end_time", kind: "message", T: () => Timestamp },
            { no: 7, name: "spent_time", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<TimeclockEntry>): TimeclockEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        message.userId = 0;
        message.spentTime = 0;
        if (value !== undefined)
            reflectionMergePartial<TimeclockEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeclockEntry): TimeclockEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                case /* resources.timestamp.Timestamp date */ 2:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* int32 user_id */ 3:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.users.UserShort user */ 4:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional resources.timestamp.Timestamp start_time */ 5:
                    message.startTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTime);
                    break;
                case /* optional resources.timestamp.Timestamp end_time */ 6:
                    message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* float spent_time */ 7:
                    message.spentTime = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeclockEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        /* resources.timestamp.Timestamp date = 2; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 user_id = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).int32(message.userId);
        /* optional resources.users.UserShort user = 4; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp start_time = 5; */
        if (message.startTime)
            Timestamp.internalBinaryWrite(message.startTime, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp end_time = 6; */
        if (message.endTime)
            Timestamp.internalBinaryWrite(message.endTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* float spent_time = 7; */
        if (message.spentTime !== 0)
            writer.tag(7, WireType.Bit32).float(message.spentTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.TimeclockEntry
 */
export const TimeclockEntry = new TimeclockEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeclockStats$Type extends MessageType<TimeclockStats> {
    constructor() {
        super("resources.jobs.TimeclockStats", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 2, name: "spent_time_sum", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "spent_time_avg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "spent_time_max", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<TimeclockStats>): TimeclockStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        message.spentTimeSum = 0;
        message.spentTimeAvg = 0;
        message.spentTimeMax = 0;
        if (value !== undefined)
            reflectionMergePartial<TimeclockStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeclockStats): TimeclockStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                case /* float spent_time_sum */ 2:
                    message.spentTimeSum = reader.float();
                    break;
                case /* float spent_time_avg */ 3:
                    message.spentTimeAvg = reader.float();
                    break;
                case /* float spent_time_max */ 4:
                    message.spentTimeMax = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeclockStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        /* float spent_time_sum = 2; */
        if (message.spentTimeSum !== 0)
            writer.tag(2, WireType.Bit32).float(message.spentTimeSum);
        /* float spent_time_avg = 3; */
        if (message.spentTimeAvg !== 0)
            writer.tag(3, WireType.Bit32).float(message.spentTimeAvg);
        /* float spent_time_max = 4; */
        if (message.spentTimeMax !== 0)
            writer.tag(4, WireType.Bit32).float(message.spentTimeMax);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.TimeclockStats
 */
export const TimeclockStats = new TimeclockStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeclockWeeklyStats$Type extends MessageType<TimeclockWeeklyStats> {
    constructor() {
        super("resources.jobs.TimeclockWeeklyStats", [
            { no: 1, name: "date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sum", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "avg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "max", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<TimeclockWeeklyStats>): TimeclockWeeklyStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.date = "";
        message.sum = 0;
        message.avg = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<TimeclockWeeklyStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeclockWeeklyStats): TimeclockWeeklyStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string date */ 1:
                    message.date = reader.string();
                    break;
                case /* float sum */ 2:
                    message.sum = reader.float();
                    break;
                case /* float avg */ 3:
                    message.avg = reader.float();
                    break;
                case /* float max */ 4:
                    message.max = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeclockWeeklyStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string date = 1; */
        if (message.date !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.date);
        /* float sum = 2; */
        if (message.sum !== 0)
            writer.tag(2, WireType.Bit32).float(message.sum);
        /* float avg = 3; */
        if (message.avg !== 0)
            writer.tag(3, WireType.Bit32).float(message.avg);
        /* float max = 4; */
        if (message.max !== 0)
            writer.tag(4, WireType.Bit32).float(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.TimeclockWeeklyStats
 */
export const TimeclockWeeklyStats = new TimeclockWeeklyStats$Type();
