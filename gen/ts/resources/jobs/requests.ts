// @generated by protobuf-ts 2.9.3 with parameter optimize_speed,long_type_bigint
// @generated from protobuf file "resources/jobs/requests.proto" (package "resources.jobs", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.jobs.RequestType
 */
export interface RequestType {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string job = 5;
     */
    job: string;
    /**
     * @generated from protobuf field: string name = 6;
     */
    name: string;
    /**
     * @generated from protobuf field: optional string description = 7;
     */
    description?: string;
    /**
     * @generated from protobuf field: uint32 weight = 8;
     */
    weight: number;
}
/**
 * @generated from protobuf message resources.jobs.Request
 */
export interface Request {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string job = 5;
     */
    job: string;
    /**
     * @generated from protobuf field: optional uint64 type_id = 6 [jstype = JS_STRING];
     */
    typeId?: string;
    /**
     * @generated from protobuf field: optional resources.jobs.RequestType type = 7;
     */
    type?: RequestType;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string message = 9;
     */
    message: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string status = 10;
     */
    status?: string;
    /**
     * @generated from protobuf field: int32 creator_id = 11;
     */
    creatorId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 12;
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: optional bool approved = 13;
     */
    approved?: boolean;
    /**
     * @generated from protobuf field: optional int32 approver_id = 14;
     */
    approverId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort approver_user = 15;
     */
    approverUser?: UserShort; // @gotags: alias:"approver"
    /**
     * @generated from protobuf field: bool closed = 16;
     */
    closed: boolean;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp begins_at = 17;
     */
    beginsAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp ends_at = 18;
     */
    endsAt?: Timestamp;
}
/**
 * @generated from protobuf message resources.jobs.RequestComment
 */
export interface RequestComment {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 request_id = 5 [jstype = JS_STRING];
     */
    requestId: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string comment = 6;
     */
    comment: string;
    /**
     * @generated from protobuf field: optional int32 creator_id = 7;
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 8;
     */
    creator?: UserShort; // @gotags: alias:"creator"
}
// @generated message type with reflection information, may provide speed optimized methods
class RequestType$Type extends MessageType<RequestType> {
    constructor() {
        super("resources.jobs.RequestType", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "32" } } } },
            { no: 7, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "255" } } } },
            { no: 8, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 4294967295 } } } }
        ]);
    }
    create(value?: PartialMessage<RequestType>): RequestType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.job = "";
        message.name = "";
        message.weight = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestType): RequestType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string job */ 5:
                    message.job = reader.string();
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                case /* optional string description */ 7:
                    message.description = reader.string();
                    break;
                case /* uint32 weight */ 8:
                    message.weight = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string job = 5; */
        if (message.job !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        /* optional string description = 7; */
        if (message.description !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        /* uint32 weight = 8; */
        if (message.weight !== 0)
            writer.tag(8, WireType.Varint).uint32(message.weight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.RequestType
 */
export const RequestType = new RequestType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Request$Type extends MessageType<Request> {
    constructor() {
        super("resources.jobs.Request", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 6, name: "type_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 7, name: "type", kind: "message", T: () => RequestType },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "255" } } } },
            { no: 9, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "4096" } } } },
            { no: 10, name: "status", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "24" } } } },
            { no: 11, name: "creator_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 12, name: "creator", kind: "message", T: () => UserShort },
            { no: 13, name: "approved", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "approver_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "approver_user", kind: "message", T: () => UserShort },
            { no: 16, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "begins_at", kind: "message", T: () => Timestamp },
            { no: 18, name: "ends_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.job = "";
        message.title = "";
        message.message = "";
        message.creatorId = 0;
        message.closed = false;
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string job */ 5:
                    message.job = reader.string();
                    break;
                case /* optional uint64 type_id = 6 [jstype = JS_STRING];*/ 6:
                    message.typeId = reader.uint64().toString();
                    break;
                case /* optional resources.jobs.RequestType type */ 7:
                    message.type = RequestType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string message */ 9:
                    message.message = reader.string();
                    break;
                case /* optional string status */ 10:
                    message.status = reader.string();
                    break;
                case /* int32 creator_id */ 11:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 12:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* optional bool approved */ 13:
                    message.approved = reader.bool();
                    break;
                case /* optional int32 approver_id */ 14:
                    message.approverId = reader.int32();
                    break;
                case /* optional resources.users.UserShort approver_user */ 15:
                    message.approverUser = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.approverUser);
                    break;
                case /* bool closed */ 16:
                    message.closed = reader.bool();
                    break;
                case /* optional resources.timestamp.Timestamp begins_at */ 17:
                    message.beginsAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.beginsAt);
                    break;
                case /* optional resources.timestamp.Timestamp ends_at */ 18:
                    message.endsAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endsAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string job = 5; */
        if (message.job !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* optional uint64 type_id = 6 [jstype = JS_STRING]; */
        if (message.typeId !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.typeId);
        /* optional resources.jobs.RequestType type = 7; */
        if (message.type)
            RequestType.internalBinaryWrite(message.type, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string message = 9; */
        if (message.message !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.message);
        /* optional string status = 10; */
        if (message.status !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.status);
        /* int32 creator_id = 11; */
        if (message.creatorId !== 0)
            writer.tag(11, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 12; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional bool approved = 13; */
        if (message.approved !== undefined)
            writer.tag(13, WireType.Varint).bool(message.approved);
        /* optional int32 approver_id = 14; */
        if (message.approverId !== undefined)
            writer.tag(14, WireType.Varint).int32(message.approverId);
        /* optional resources.users.UserShort approver_user = 15; */
        if (message.approverUser)
            UserShort.internalBinaryWrite(message.approverUser, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* bool closed = 16; */
        if (message.closed !== false)
            writer.tag(16, WireType.Varint).bool(message.closed);
        /* optional resources.timestamp.Timestamp begins_at = 17; */
        if (message.beginsAt)
            Timestamp.internalBinaryWrite(message.beginsAt, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp ends_at = 18; */
        if (message.endsAt)
            Timestamp.internalBinaryWrite(message.endsAt, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.Request
 */
export const Request = new Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestComment$Type extends MessageType<RequestComment> {
    constructor() {
        super("resources.jobs.RequestComment", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "request_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxBytes: "2048" } } } },
            { no: 7, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "creator", kind: "message", T: () => UserShort }
        ]);
    }
    create(value?: PartialMessage<RequestComment>): RequestComment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.requestId = "0";
        message.comment = "";
        if (value !== undefined)
            reflectionMergePartial<RequestComment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestComment): RequestComment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* uint64 request_id = 5 [jstype = JS_STRING];*/ 5:
                    message.requestId = reader.uint64().toString();
                    break;
                case /* string comment */ 6:
                    message.comment = reader.string();
                    break;
                case /* optional int32 creator_id */ 7:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 8:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestComment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 request_id = 5 [jstype = JS_STRING]; */
        if (message.requestId !== "0")
            writer.tag(5, WireType.Varint).uint64(message.requestId);
        /* string comment = 6; */
        if (message.comment !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.comment);
        /* optional int32 creator_id = 7; */
        if (message.creatorId !== undefined)
            writer.tag(7, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 8; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.RequestComment
 */
export const RequestComment = new RequestComment$Type();
