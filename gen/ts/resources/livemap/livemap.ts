// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size,long_type_bigint
// @generated from protobuf file "resources/livemap/livemap.proto" (package "resources.livemap", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { Unit } from "../dispatch/units.js";
import { UserShort } from "../users/users.js";
import { Timestamp } from "../timestamp/timestamp.js";
/**
 * @generated from protobuf message resources.livemap.ManualMarker
 */
export interface ManualMarker {
    /**
     * @generated from protobuf field: resources.livemap.MARKER_TYPE type = 1;
     */
    type: MARKER_TYPE;
    /**
     * @generated from protobuf oneof: marker
     */
    marker: {
        oneofKind: "circle";
        /**
         * @generated from protobuf field: resources.livemap.CircleMarker circle = 2;
         */
        circle: CircleMarker;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.livemap.GenericMarker
 */
export interface GenericMarker {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 2;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: double x = 3;
     */
    x: number;
    /**
     * @generated from protobuf field: double y = 4;
     */
    y: number;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: optional string popup = 6;
     */
    popup?: string;
    /**
     * @generated from protobuf field: optional string color = 7;
     */
    color?: string;
    /**
     * @generated from protobuf field: optional string icon = 8;
     */
    icon?: string;
}
/**
 * @generated from protobuf message resources.livemap.DispatchMarker
 */
export interface DispatchMarker {
    /**
     * @generated from protobuf field: resources.livemap.GenericMarker marker = 1;
     */
    marker?: GenericMarker;
    /**
     * @generated from protobuf field: string job = 2;
     */
    job: string; // @gotags: alias:"job"
    /**
     * @generated from protobuf field: optional string job_label = 3;
     */
    jobLabel?: string; // @gotags: alias:"job_label"
    /**
     * @generated from protobuf field: bool active = 4;
     */
    active: boolean;
}
/**
 * @generated from protobuf message resources.livemap.UserMarker
 */
export interface UserMarker {
    /**
     * @generated from protobuf field: resources.livemap.GenericMarker marker = 1;
     */
    marker?: GenericMarker;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: resources.users.UserShort user = 3;
     */
    user?: UserShort; // @gotags: alias:"user"
    /**
     * @generated from protobuf field: optional uint64 unit_id = 4;
     */
    unitId?: bigint;
    /**
     * @generated from protobuf field: optional resources.dispatch.Unit unit = 5;
     */
    unit?: Unit;
}
/**
 * @generated from protobuf message resources.livemap.CircleMarker
 */
export interface CircleMarker {
    /**
     * @generated from protobuf field: resources.livemap.GenericMarker marker = 1;
     */
    marker?: GenericMarker;
    /**
     * @generated from protobuf field: int32 radius = 2;
     */
    radius: number;
}
/**
 * @generated from protobuf enum resources.livemap.MARKER_TYPE
 */
export enum MARKER_TYPE {
    /**
     * @generated from protobuf enum value: GENERIC = 0;
     */
    GENERIC = 0,
    /**
     * @generated from protobuf enum value: DISPATCH = 1;
     */
    DISPATCH = 1,
    /**
     * @generated from protobuf enum value: USER = 2;
     */
    USER = 2,
    /**
     * @generated from protobuf enum value: CIRCLE = 3;
     */
    CIRCLE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ManualMarker$Type extends MessageType<ManualMarker> {
    constructor() {
        super("resources.livemap.ManualMarker", [
            { no: 1, name: "type", kind: "enum", T: () => ["resources.livemap.MARKER_TYPE", MARKER_TYPE] },
            { no: 2, name: "circle", kind: "message", oneof: "marker", T: () => CircleMarker }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message resources.livemap.ManualMarker
 */
export const ManualMarker = new ManualMarker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenericMarker$Type extends MessageType<GenericMarker> {
    constructor() {
        super("resources.livemap.GenericMarker", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "popup", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "icon", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message resources.livemap.GenericMarker
 */
export const GenericMarker = new GenericMarker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DispatchMarker$Type extends MessageType<DispatchMarker> {
    constructor() {
        super("resources.livemap.DispatchMarker", [
            { no: 1, name: "marker", kind: "message", T: () => GenericMarker },
            { no: 2, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 3, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 4, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message resources.livemap.DispatchMarker
 */
export const DispatchMarker = new DispatchMarker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserMarker$Type extends MessageType<UserMarker> {
    constructor() {
        super("resources.livemap.UserMarker", [
            { no: 1, name: "marker", kind: "message", T: () => GenericMarker },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 3, name: "user", kind: "message", T: () => UserShort },
            { no: 4, name: "unit_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "unit", kind: "message", T: () => Unit }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message resources.livemap.UserMarker
 */
export const UserMarker = new UserMarker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CircleMarker$Type extends MessageType<CircleMarker> {
    constructor() {
        super("resources.livemap.CircleMarker", [
            { no: 1, name: "marker", kind: "message", T: () => GenericMarker },
            { no: 2, name: "radius", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message resources.livemap.CircleMarker
 */
export const CircleMarker = new CircleMarker$Type();
