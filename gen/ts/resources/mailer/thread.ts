// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/mailer/thread.proto" (package "resources.mailer", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ThreadAccess } from "./access";
import { UserShort } from "../users/users";
import { Message } from "./message";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.mailer.Thread
 */
export interface Thread {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * @generated from protobuf field: optional resources.mailer.Message last_message = 6;
     */
    lastMessage?: Message;
    /**
     * @generated from protobuf field: resources.mailer.ThreadUserState user_state = 7;
     */
    userState?: ThreadUserState;
    /**
     * @generated from protobuf field: string creator_job = 8;
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: optional int32 creator_id = 9;
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 10;
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: resources.mailer.ThreadAccess access = 11;
     */
    access?: ThreadAccess;
}
/**
 * @generated from protobuf message resources.mailer.ThreadUserState
 */
export interface ThreadUserState {
    /**
     * @generated from protobuf field: uint64 thread_id = 1 [jstype = JS_STRING];
     */
    threadId: string;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: bool unread = 3;
     */
    unread: boolean;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp last_read = 4;
     */
    lastRead?: Timestamp;
    /**
     * @generated from protobuf field: bool important = 5;
     */
    important: boolean;
    /**
     * @generated from protobuf field: bool favorite = 6;
     */
    favorite: boolean;
    /**
     * @generated from protobuf field: bool muted = 7;
     */
    muted: boolean;
    /**
     * @generated from protobuf field: bool archived = 8;
     */
    archived: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Thread$Type extends MessageType<Thread> {
    constructor() {
        super("resources.mailer.Thread", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "255" } } } },
            { no: 6, name: "last_message", kind: "message", T: () => Message },
            { no: 7, name: "user_state", kind: "message", T: () => ThreadUserState },
            { no: 8, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 10, name: "creator", kind: "message", T: () => UserShort },
            { no: 11, name: "access", kind: "message", T: () => ThreadAccess }
        ]);
    }
    create(value?: PartialMessage<Thread>): Thread {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.title = "";
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<Thread>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Thread): Thread {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* optional resources.mailer.Message last_message */ 6:
                    message.lastMessage = Message.internalBinaryRead(reader, reader.uint32(), options, message.lastMessage);
                    break;
                case /* resources.mailer.ThreadUserState user_state */ 7:
                    message.userState = ThreadUserState.internalBinaryRead(reader, reader.uint32(), options, message.userState);
                    break;
                case /* string creator_job */ 8:
                    message.creatorJob = reader.string();
                    break;
                case /* optional int32 creator_id */ 9:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 10:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* resources.mailer.ThreadAccess access */ 11:
                    message.access = ThreadAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Thread, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* optional resources.mailer.Message last_message = 6; */
        if (message.lastMessage)
            Message.internalBinaryWrite(message.lastMessage, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* resources.mailer.ThreadUserState user_state = 7; */
        if (message.userState)
            ThreadUserState.internalBinaryWrite(message.userState, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 8; */
        if (message.creatorJob !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.creatorJob);
        /* optional int32 creator_id = 9; */
        if (message.creatorId !== undefined)
            writer.tag(9, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 10; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* resources.mailer.ThreadAccess access = 11; */
        if (message.access)
            ThreadAccess.internalBinaryWrite(message.access, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.mailer.Thread
 */
export const Thread = new Thread$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadUserState$Type extends MessageType<ThreadUserState> {
    constructor() {
        super("resources.mailer.ThreadUserState", [
            { no: 1, name: "thread_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } },
            { no: 3, name: "unread", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "last_read", kind: "message", T: () => Timestamp },
            { no: 5, name: "important", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "favorite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "archived", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ThreadUserState>): ThreadUserState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.threadId = "0";
        message.userId = 0;
        message.unread = false;
        message.important = false;
        message.favorite = false;
        message.muted = false;
        message.archived = false;
        if (value !== undefined)
            reflectionMergePartial<ThreadUserState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadUserState): ThreadUserState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 thread_id = 1 [jstype = JS_STRING];*/ 1:
                    message.threadId = reader.uint64().toString();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                case /* bool unread */ 3:
                    message.unread = reader.bool();
                    break;
                case /* optional resources.timestamp.Timestamp last_read */ 4:
                    message.lastRead = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastRead);
                    break;
                case /* bool important */ 5:
                    message.important = reader.bool();
                    break;
                case /* bool favorite */ 6:
                    message.favorite = reader.bool();
                    break;
                case /* bool muted */ 7:
                    message.muted = reader.bool();
                    break;
                case /* bool archived */ 8:
                    message.archived = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadUserState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 thread_id = 1 [jstype = JS_STRING]; */
        if (message.threadId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.threadId);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* bool unread = 3; */
        if (message.unread !== false)
            writer.tag(3, WireType.Varint).bool(message.unread);
        /* optional resources.timestamp.Timestamp last_read = 4; */
        if (message.lastRead)
            Timestamp.internalBinaryWrite(message.lastRead, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool important = 5; */
        if (message.important !== false)
            writer.tag(5, WireType.Varint).bool(message.important);
        /* bool favorite = 6; */
        if (message.favorite !== false)
            writer.tag(6, WireType.Varint).bool(message.favorite);
        /* bool muted = 7; */
        if (message.muted !== false)
            writer.tag(7, WireType.Varint).bool(message.muted);
        /* bool archived = 8; */
        if (message.archived !== false)
            writer.tag(8, WireType.Varint).bool(message.archived);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.mailer.ThreadUserState
 */
export const ThreadUserState = new ThreadUserState$Type();
