// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/mailer/thread.proto" (package "resources.mailer", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "../users/users";
import { EmailShort } from "./email";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.mailer.Thread
 */
export interface Thread {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 creator_email_id = 5 [jstype = JS_STRING];
     */
    creatorEmailId: string;
    /**
     * @generated from protobuf field: optional resources.mailer.EmailShort creator_email = 6;
     */
    creatorEmail?: EmailShort;
    /**
     * @generated from protobuf field: optional int32 creator_id = 7;
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 8;
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: repeated resources.mailer.ThreadRecipientEmail recipients = 9;
     */
    recipients: ThreadRecipientEmail[];
    /**
     * @generated from protobuf field: optional resources.mailer.ThreadState state = 10;
     */
    state?: ThreadState;
}
/**
 * @generated from protobuf message resources.mailer.ThreadRecipientEmail
 */
export interface ThreadRecipientEmail {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 target_id = 4 [jstype = JS_STRING];
     */
    targetId: string; // @gotags: alias:"thread_id"
    /**
     * @generated from protobuf field: uint64 email_id = 5 [jstype = JS_STRING];
     */
    emailId: string;
    /**
     * @generated from protobuf field: optional resources.mailer.EmailShort email = 6;
     */
    email?: EmailShort;
}
/**
 * @generated from protobuf message resources.mailer.ThreadState
 */
export interface ThreadState {
    /**
     * @generated from protobuf field: uint64 thread_id = 1 [jstype = JS_STRING];
     */
    threadId: string;
    /**
     * @generated from protobuf field: uint64 email_id = 2 [jstype = JS_STRING];
     */
    emailId: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp last_read = 3;
     */
    lastRead?: Timestamp;
    /**
     * @generated from protobuf field: bool unread = 4;
     */
    unread: boolean;
    /**
     * @generated from protobuf field: bool important = 5;
     */
    important: boolean;
    /**
     * @generated from protobuf field: bool favorite = 6;
     */
    favorite: boolean;
    /**
     * @generated from protobuf field: bool muted = 7;
     */
    muted: boolean;
    /**
     * @generated from protobuf field: bool archived = 8;
     */
    archived: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Thread$Type extends MessageType<Thread> {
    constructor() {
        super("resources.mailer.Thread", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "creator_email_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "creator_email", kind: "message", T: () => EmailShort },
            { no: 7, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 8, name: "creator", kind: "message", T: () => UserShort },
            { no: 9, name: "recipients", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ThreadRecipientEmail },
            { no: 10, name: "state", kind: "message", T: () => ThreadState }
        ]);
    }
    create(value?: PartialMessage<Thread>): Thread {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.creatorEmailId = "0";
        message.recipients = [];
        if (value !== undefined)
            reflectionMergePartial<Thread>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Thread): Thread {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* uint64 creator_email_id = 5 [jstype = JS_STRING];*/ 5:
                    message.creatorEmailId = reader.uint64().toString();
                    break;
                case /* optional resources.mailer.EmailShort creator_email */ 6:
                    message.creatorEmail = EmailShort.internalBinaryRead(reader, reader.uint32(), options, message.creatorEmail);
                    break;
                case /* optional int32 creator_id */ 7:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 8:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* repeated resources.mailer.ThreadRecipientEmail recipients */ 9:
                    message.recipients.push(ThreadRecipientEmail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional resources.mailer.ThreadState state */ 10:
                    message.state = ThreadState.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Thread, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 creator_email_id = 5 [jstype = JS_STRING]; */
        if (message.creatorEmailId !== "0")
            writer.tag(5, WireType.Varint).uint64(message.creatorEmailId);
        /* optional resources.mailer.EmailShort creator_email = 6; */
        if (message.creatorEmail)
            EmailShort.internalBinaryWrite(message.creatorEmail, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 creator_id = 7; */
        if (message.creatorId !== undefined)
            writer.tag(7, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 8; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.mailer.ThreadRecipientEmail recipients = 9; */
        for (let i = 0; i < message.recipients.length; i++)
            ThreadRecipientEmail.internalBinaryWrite(message.recipients[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.mailer.ThreadState state = 10; */
        if (message.state)
            ThreadState.internalBinaryWrite(message.state, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.mailer.Thread
 */
export const Thread = new Thread$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadRecipientEmail$Type extends MessageType<ThreadRecipientEmail> {
    constructor() {
        super("resources.mailer.ThreadRecipientEmail", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "target_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "email_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "email", kind: "message", T: () => EmailShort }
        ]);
    }
    create(value?: PartialMessage<ThreadRecipientEmail>): ThreadRecipientEmail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.targetId = "0";
        message.emailId = "0";
        if (value !== undefined)
            reflectionMergePartial<ThreadRecipientEmail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadRecipientEmail): ThreadRecipientEmail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 target_id = 4 [jstype = JS_STRING];*/ 4:
                    message.targetId = reader.uint64().toString();
                    break;
                case /* uint64 email_id = 5 [jstype = JS_STRING];*/ 5:
                    message.emailId = reader.uint64().toString();
                    break;
                case /* optional resources.mailer.EmailShort email */ 6:
                    message.email = EmailShort.internalBinaryRead(reader, reader.uint32(), options, message.email);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadRecipientEmail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 target_id = 4 [jstype = JS_STRING]; */
        if (message.targetId !== "0")
            writer.tag(4, WireType.Varint).uint64(message.targetId);
        /* uint64 email_id = 5 [jstype = JS_STRING]; */
        if (message.emailId !== "0")
            writer.tag(5, WireType.Varint).uint64(message.emailId);
        /* optional resources.mailer.EmailShort email = 6; */
        if (message.email)
            EmailShort.internalBinaryWrite(message.email, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.mailer.ThreadRecipientEmail
 */
export const ThreadRecipientEmail = new ThreadRecipientEmail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadState$Type extends MessageType<ThreadState> {
    constructor() {
        super("resources.mailer.ThreadState", [
            { no: 1, name: "thread_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "email_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "last_read", kind: "message", T: () => Timestamp },
            { no: 4, name: "unread", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "important", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "favorite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "archived", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ThreadState>): ThreadState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.threadId = "0";
        message.emailId = "0";
        message.unread = false;
        message.important = false;
        message.favorite = false;
        message.muted = false;
        message.archived = false;
        if (value !== undefined)
            reflectionMergePartial<ThreadState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadState): ThreadState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 thread_id = 1 [jstype = JS_STRING];*/ 1:
                    message.threadId = reader.uint64().toString();
                    break;
                case /* uint64 email_id = 2 [jstype = JS_STRING];*/ 2:
                    message.emailId = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp last_read */ 3:
                    message.lastRead = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastRead);
                    break;
                case /* bool unread */ 4:
                    message.unread = reader.bool();
                    break;
                case /* bool important */ 5:
                    message.important = reader.bool();
                    break;
                case /* bool favorite */ 6:
                    message.favorite = reader.bool();
                    break;
                case /* bool muted */ 7:
                    message.muted = reader.bool();
                    break;
                case /* bool archived */ 8:
                    message.archived = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 thread_id = 1 [jstype = JS_STRING]; */
        if (message.threadId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.threadId);
        /* uint64 email_id = 2 [jstype = JS_STRING]; */
        if (message.emailId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.emailId);
        /* optional resources.timestamp.Timestamp last_read = 3; */
        if (message.lastRead)
            Timestamp.internalBinaryWrite(message.lastRead, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool unread = 4; */
        if (message.unread !== false)
            writer.tag(4, WireType.Varint).bool(message.unread);
        /* bool important = 5; */
        if (message.important !== false)
            writer.tag(5, WireType.Varint).bool(message.important);
        /* bool favorite = 6; */
        if (message.favorite !== false)
            writer.tag(6, WireType.Varint).bool(message.favorite);
        /* bool muted = 7; */
        if (message.muted !== false)
            writer.tag(7, WireType.Varint).bool(message.muted);
        /* bool archived = 8; */
        if (message.archived !== false)
            writer.tag(8, WireType.Varint).bool(message.archived);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.mailer.ThreadState
 */
export const ThreadState = new ThreadState$Type();
