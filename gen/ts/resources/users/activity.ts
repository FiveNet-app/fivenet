// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/users/activity.proto" (package "resources.users", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "./users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.users.UserActivity
 */
export interface UserActivity {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: alias:"fivenet_user_activity.id"
    /**
     * @generated from protobuf field: resources.users.UserActivityType type = 2;
     */
    type: UserActivityType; // @gotags: alias:"fivenet_user_activity.type"
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 3;
     */
    createdAt?: Timestamp; // @gotags: alias:"fivenet_user_activity.created_at"
    /**
     * @generated from protobuf field: optional int32 source_user_id = 4;
     */
    sourceUserId?: number; // @gotags: alias:"source_user_id"
    /**
     * @generated from protobuf field: optional resources.users.UserShort source_user = 5;
     */
    sourceUser?: UserShort; // @gotags: alias:"source_user"
    /**
     * @generated from protobuf field: int32 target_user_id = 6;
     */
    targetUserId: number; // @gotags: alias:"target_user_id"
    /**
     * @generated from protobuf field: resources.users.UserShort target_user = 7;
     */
    targetUser?: UserShort; // @gotags: alias:"target_user"
    /**
     * @sanitize
     *
     * @generated from protobuf field: string key = 8;
     */
    key: string; // @gotags: alias:"fivenet_user_activity.key"
    /**
     * @generated from protobuf field: string old_value = 9;
     */
    oldValue: string; // @gotags: alias:"fivenet_user_activity.old_value"
    /**
     * @generated from protobuf field: string new_value = 10;
     */
    newValue: string; // @gotags: alias:"fivenet_user_activity.new_value"
    /**
     * @sanitize
     *
     * @generated from protobuf field: string reason = 11;
     */
    reason: string; // @gotags: alias:"fivenet_user_activity.reason"
}
/**
 * @generated from protobuf enum resources.users.UserActivityType
 */
export enum UserActivityType {
    /**
     * @generated from protobuf enum value: USER_ACTIVITY_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: USER_ACTIVITY_TYPE_CHANGED = 1;
     */
    CHANGED = 1,
    /**
     * @generated from protobuf enum value: USER_ACTIVITY_TYPE_MENTIONED = 2;
     */
    MENTIONED = 2,
    /**
     * @generated from protobuf enum value: USER_ACTIVITY_TYPE_CREATED = 3;
     */
    CREATED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class UserActivity$Type extends MessageType<UserActivity> {
    constructor() {
        super("resources.users.UserActivity", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["resources.users.UserActivityType", UserActivityType, "USER_ACTIVITY_TYPE_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "source_user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "source_user", kind: "message", T: () => UserShort },
            { no: 6, name: "target_user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "target_user", kind: "message", T: () => UserShort },
            { no: 8, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", maxLen: "64" } } } },
            { no: 9, name: "old_value", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 10, name: "new_value", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 11, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<UserActivity>): UserActivity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.type = 0;
        message.targetUserId = 0;
        message.key = "";
        message.oldValue = "";
        message.newValue = "";
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<UserActivity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserActivity): UserActivity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* resources.users.UserActivityType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional int32 source_user_id */ 4:
                    message.sourceUserId = reader.int32();
                    break;
                case /* optional resources.users.UserShort source_user */ 5:
                    message.sourceUser = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.sourceUser);
                    break;
                case /* int32 target_user_id */ 6:
                    message.targetUserId = reader.int32();
                    break;
                case /* resources.users.UserShort target_user */ 7:
                    message.targetUser = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.targetUser);
                    break;
                case /* string key */ 8:
                    message.key = reader.string();
                    break;
                case /* string old_value */ 9:
                    message.oldValue = reader.string();
                    break;
                case /* string new_value */ 10:
                    message.newValue = reader.string();
                    break;
                case /* string reason */ 11:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserActivity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* resources.users.UserActivityType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* resources.timestamp.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 source_user_id = 4; */
        if (message.sourceUserId !== undefined)
            writer.tag(4, WireType.Varint).int32(message.sourceUserId);
        /* optional resources.users.UserShort source_user = 5; */
        if (message.sourceUser)
            UserShort.internalBinaryWrite(message.sourceUser, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 target_user_id = 6; */
        if (message.targetUserId !== 0)
            writer.tag(6, WireType.Varint).int32(message.targetUserId);
        /* resources.users.UserShort target_user = 7; */
        if (message.targetUser)
            UserShort.internalBinaryWrite(message.targetUser, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string key = 8; */
        if (message.key !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.key);
        /* string old_value = 9; */
        if (message.oldValue !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.oldValue);
        /* string new_value = 10; */
        if (message.newValue !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.newValue);
        /* string reason = 11; */
        if (message.reason !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.users.UserActivity
 */
export const UserActivity = new UserActivity$Type();
