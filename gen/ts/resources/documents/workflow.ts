// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/documents/workflow.proto" (package "resources.documents", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../google/protobuf/duration";
/**
 * @generated from protobuf message resources.documents.Workflow
 */
export interface Workflow {
    /**
     * @generated from protobuf field: bool reminder = 1;
     */
    reminder: boolean;
    /**
     * @generated from protobuf field: resources.documents.Reminder reminder_settings = 2;
     */
    reminderSettings?: Reminder;
    /**
     * @generated from protobuf field: bool auto_close = 3;
     */
    autoClose: boolean;
    /**
     * @generated from protobuf field: resources.documents.AutoClose auto_close_settings = 4;
     */
    autoCloseSettings?: AutoClose;
}
/**
 * @generated from protobuf message resources.documents.Reminder
 */
export interface Reminder {
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 1;
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message resources.documents.AutoClose
 */
export interface AutoClose {
    /**
     * @generated from protobuf field: google.protobuf.Duration auto_close_duration = 3;
     */
    autoCloseDuration?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class Workflow$Type extends MessageType<Workflow> {
    constructor() {
        super("resources.documents.Workflow", [
            { no: 1, name: "reminder", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "reminder_settings", kind: "message", T: () => Reminder },
            { no: 3, name: "auto_close", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "auto_close_settings", kind: "message", T: () => AutoClose }
        ]);
    }
    create(value?: PartialMessage<Workflow>): Workflow {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reminder = false;
        message.autoClose = false;
        if (value !== undefined)
            reflectionMergePartial<Workflow>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Workflow): Workflow {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool reminder */ 1:
                    message.reminder = reader.bool();
                    break;
                case /* resources.documents.Reminder reminder_settings */ 2:
                    message.reminderSettings = Reminder.internalBinaryRead(reader, reader.uint32(), options, message.reminderSettings);
                    break;
                case /* bool auto_close */ 3:
                    message.autoClose = reader.bool();
                    break;
                case /* resources.documents.AutoClose auto_close_settings */ 4:
                    message.autoCloseSettings = AutoClose.internalBinaryRead(reader, reader.uint32(), options, message.autoCloseSettings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Workflow, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool reminder = 1; */
        if (message.reminder !== false)
            writer.tag(1, WireType.Varint).bool(message.reminder);
        /* resources.documents.Reminder reminder_settings = 2; */
        if (message.reminderSettings)
            Reminder.internalBinaryWrite(message.reminderSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool auto_close = 3; */
        if (message.autoClose !== false)
            writer.tag(3, WireType.Varint).bool(message.autoClose);
        /* resources.documents.AutoClose auto_close_settings = 4; */
        if (message.autoCloseSettings)
            AutoClose.internalBinaryWrite(message.autoCloseSettings, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.Workflow
 */
export const Workflow = new Workflow$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reminder$Type extends MessageType<Reminder> {
    constructor() {
        super("resources.documents.Reminder", [
            { no: 1, name: "duration", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, lt: { seconds: "7776000" }, gte: { seconds: "86400" } } } } }
        ]);
    }
    create(value?: PartialMessage<Reminder>): Reminder {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Reminder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reminder): Reminder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration duration */ 1:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reminder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration duration = 1; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.Reminder
 */
export const Reminder = new Reminder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutoClose$Type extends MessageType<AutoClose> {
    constructor() {
        super("resources.documents.AutoClose", [
            { no: 3, name: "auto_close_duration", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, lt: { seconds: "7776000" }, gte: { seconds: "86400" } } } } }
        ]);
    }
    create(value?: PartialMessage<AutoClose>): AutoClose {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AutoClose>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutoClose): AutoClose {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration auto_close_duration */ 3:
                    message.autoCloseDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.autoCloseDuration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AutoClose, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration auto_close_duration = 3; */
        if (message.autoCloseDuration)
            Duration.internalBinaryWrite(message.autoCloseDuration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.AutoClose
 */
export const AutoClose = new AutoClose$Type();
