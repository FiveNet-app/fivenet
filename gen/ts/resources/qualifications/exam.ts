// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/qualifications/exam.proto" (package "resources.qualifications", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../timestamp/timestamp";
// Exam / Questions

/**
 * @generated from protobuf message resources.qualifications.ExamQuestions
 */
export interface ExamQuestions {
    /**
     * @generated from protobuf field: repeated resources.qualifications.ExamQuestion questions = 1;
     */
    questions: ExamQuestion[];
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestion
 */
export interface ExamQuestion {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: uint64 qualification_id = 2 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 4;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * @generated from protobuf field: optional string description = 6;
     */
    description?: string;
    /**
     * @generated from protobuf field: resources.qualifications.ExamQuestionData data = 7;
     */
    data?: ExamQuestionData;
    /**
     * @generated from protobuf field: resources.qualifications.ExamQuestionAnswerData answer = 8;
     */
    answer?: ExamQuestionAnswerData;
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionData
 */
export interface ExamQuestionData {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "separator";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionSeparator separator = 1;
         */
        separator: ExamQuestionSeparator;
    } | {
        oneofKind: "yesno";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionYesNo yesno = 2;
         */
        yesno: ExamQuestionYesNo;
    } | {
        oneofKind: "freeText";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionText free_text = 3;
         */
        freeText: ExamQuestionText;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionMultipleChoice multiple_choice = 4;
         */
        multipleChoice: ExamQuestionMultipleChoice;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionSeparator
 */
export interface ExamQuestionSeparator {
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionYesNo
 */
export interface ExamQuestionYesNo {
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionText
 */
export interface ExamQuestionText {
    /**
     * @generated from protobuf field: int32 min_length = 1;
     */
    minLength: number;
    /**
     * @generated from protobuf field: int32 max_length = 2;
     */
    maxLength: number;
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionMultipleChoice
 */
export interface ExamQuestionMultipleChoice {
    /**
     * @generated from protobuf field: repeated string choices = 1;
     */
    choices: string[];
    /**
     * @generated from protobuf field: optional int32 limit = 2;
     */
    limit?: number;
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionAnswerData
 */
export interface ExamQuestionAnswerData {
}
// User Response

/**
 * @generated from protobuf message resources.qualifications.ExamUserResponse
 */
export interface ExamUserResponse {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 qualification_id = 3 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp started_at = 4;
     */
    startedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp ended_at = 5;
     */
    endedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.qualifications.ExamResponses responses = 6;
     */
    responses?: ExamResponses;
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponses
 */
export interface ExamResponses {
    /**
     * @generated from protobuf field: repeated resources.qualifications.ExamResponse responses = 1;
     */
    responses: ExamResponse[];
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponse
 */
export interface ExamResponse {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "separator";
        /**
         * @generated from protobuf field: bool separator = 2;
         */
        separator: boolean;
    } | {
        oneofKind: "yesno";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseYesNo yesno = 3;
         */
        yesno: ExamResponseYesNo;
    } | {
        oneofKind: "freeText";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseText free_text = 4;
         */
        freeText: ExamResponseText;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseMultipleChoice multiple_choice = 5;
         */
        multipleChoice: ExamResponseMultipleChoice;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseYesNo
 */
export interface ExamResponseYesNo {
    /**
     * @generated from protobuf field: bool value = 1;
     */
    value: boolean;
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseText
 */
export interface ExamResponseText {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string; // 0.5 Megabyte
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseMultipleChoice
 */
export interface ExamResponseMultipleChoice {
    /**
     * @generated from protobuf field: repeated string choices = 1;
     */
    choices: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestions$Type extends MessageType<ExamQuestions> {
    constructor() {
        super("resources.qualifications.ExamQuestions", [
            { no: 1, name: "questions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExamQuestion, options: { "validate.rules": { repeated: { maxItems: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestions>): ExamQuestions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questions = [];
        if (value !== undefined)
            reflectionMergePartial<ExamQuestions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestions): ExamQuestions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.qualifications.ExamQuestion questions */ 1:
                    message.questions.push(ExamQuestion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.qualifications.ExamQuestion questions = 1; */
        for (let i = 0; i < message.questions.length; i++)
            ExamQuestion.internalBinaryWrite(message.questions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestions
 */
export const ExamQuestions = new ExamQuestions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestion$Type extends MessageType<ExamQuestion> {
    constructor() {
        super("resources.qualifications.ExamQuestion", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "512" } } } },
            { no: 6, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "1024" } } } },
            { no: 7, name: "data", kind: "message", T: () => ExamQuestionData, options: { "validate.rules": { message: { required: true } } } },
            { no: 8, name: "answer", kind: "message", T: () => ExamQuestionAnswerData, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestion>): ExamQuestion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.qualificationId = "0";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<ExamQuestion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestion): ExamQuestion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* uint64 qualification_id = 2 [jstype = JS_STRING];*/ 2:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 6:
                    message.description = reader.string();
                    break;
                case /* resources.qualifications.ExamQuestionData data */ 7:
                    message.data = ExamQuestionData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* resources.qualifications.ExamQuestionAnswerData answer */ 8:
                    message.answer = ExamQuestionAnswerData.internalBinaryRead(reader, reader.uint32(), options, message.answer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 qualification_id = 2 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.qualificationId);
        /* optional resources.timestamp.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* optional string description = 6; */
        if (message.description !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* resources.qualifications.ExamQuestionData data = 7; */
        if (message.data)
            ExamQuestionData.internalBinaryWrite(message.data, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionAnswerData answer = 8; */
        if (message.answer)
            ExamQuestionAnswerData.internalBinaryWrite(message.answer, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestion
 */
export const ExamQuestion = new ExamQuestion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionData$Type extends MessageType<ExamQuestionData> {
    constructor() {
        super("resources.qualifications.ExamQuestionData", [
            { no: 1, name: "separator", kind: "message", oneof: "data", T: () => ExamQuestionSeparator },
            { no: 2, name: "yesno", kind: "message", oneof: "data", T: () => ExamQuestionYesNo },
            { no: 3, name: "free_text", kind: "message", oneof: "data", T: () => ExamQuestionText },
            { no: 4, name: "multiple_choice", kind: "message", oneof: "data", T: () => ExamQuestionMultipleChoice }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionData>): ExamQuestionData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionData): ExamQuestionData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.ExamQuestionSeparator separator */ 1:
                    message.data = {
                        oneofKind: "separator",
                        separator: ExamQuestionSeparator.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).separator)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionYesNo yesno */ 2:
                    message.data = {
                        oneofKind: "yesno",
                        yesno: ExamQuestionYesNo.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).yesno)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionText free_text */ 3:
                    message.data = {
                        oneofKind: "freeText",
                        freeText: ExamQuestionText.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).freeText)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionMultipleChoice multiple_choice */ 4:
                    message.data = {
                        oneofKind: "multipleChoice",
                        multipleChoice: ExamQuestionMultipleChoice.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).multipleChoice)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.ExamQuestionSeparator separator = 1; */
        if (message.data.oneofKind === "separator")
            ExamQuestionSeparator.internalBinaryWrite(message.data.separator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionYesNo yesno = 2; */
        if (message.data.oneofKind === "yesno")
            ExamQuestionYesNo.internalBinaryWrite(message.data.yesno, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionText free_text = 3; */
        if (message.data.oneofKind === "freeText")
            ExamQuestionText.internalBinaryWrite(message.data.freeText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionMultipleChoice multiple_choice = 4; */
        if (message.data.oneofKind === "multipleChoice")
            ExamQuestionMultipleChoice.internalBinaryWrite(message.data.multipleChoice, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionData
 */
export const ExamQuestionData = new ExamQuestionData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionSeparator$Type extends MessageType<ExamQuestionSeparator> {
    constructor() {
        super("resources.qualifications.ExamQuestionSeparator", []);
    }
    create(value?: PartialMessage<ExamQuestionSeparator>): ExamQuestionSeparator {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionSeparator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionSeparator): ExamQuestionSeparator {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExamQuestionSeparator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionSeparator
 */
export const ExamQuestionSeparator = new ExamQuestionSeparator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionYesNo$Type extends MessageType<ExamQuestionYesNo> {
    constructor() {
        super("resources.qualifications.ExamQuestionYesNo", []);
    }
    create(value?: PartialMessage<ExamQuestionYesNo>): ExamQuestionYesNo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionYesNo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionYesNo): ExamQuestionYesNo {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExamQuestionYesNo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionYesNo
 */
export const ExamQuestionYesNo = new ExamQuestionYesNo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionText$Type extends MessageType<ExamQuestionText> {
    constructor() {
        super("resources.qualifications.ExamQuestionText", [
            { no: 1, name: "min_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionText>): ExamQuestionText {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.minLength = 0;
        message.maxLength = 0;
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionText): ExamQuestionText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 min_length */ 1:
                    message.minLength = reader.int32();
                    break;
                case /* int32 max_length */ 2:
                    message.maxLength = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 min_length = 1; */
        if (message.minLength !== 0)
            writer.tag(1, WireType.Varint).int32(message.minLength);
        /* int32 max_length = 2; */
        if (message.maxLength !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxLength);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionText
 */
export const ExamQuestionText = new ExamQuestionText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionMultipleChoice$Type extends MessageType<ExamQuestionMultipleChoice> {
    constructor() {
        super("resources.qualifications.ExamQuestionMultipleChoice", [
            { no: 1, name: "choices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { maxItems: "10" } } } },
            { no: 2, name: "limit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionMultipleChoice>): ExamQuestionMultipleChoice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.choices = [];
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionMultipleChoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionMultipleChoice): ExamQuestionMultipleChoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string choices */ 1:
                    message.choices.push(reader.string());
                    break;
                case /* optional int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionMultipleChoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string choices = 1; */
        for (let i = 0; i < message.choices.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.choices[i]);
        /* optional int32 limit = 2; */
        if (message.limit !== undefined)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionMultipleChoice
 */
export const ExamQuestionMultipleChoice = new ExamQuestionMultipleChoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionAnswerData$Type extends MessageType<ExamQuestionAnswerData> {
    constructor() {
        super("resources.qualifications.ExamQuestionAnswerData", []);
    }
    create(value?: PartialMessage<ExamQuestionAnswerData>): ExamQuestionAnswerData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionAnswerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionAnswerData): ExamQuestionAnswerData {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExamQuestionAnswerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionAnswerData
 */
export const ExamQuestionAnswerData = new ExamQuestionAnswerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamUserResponse$Type extends MessageType<ExamUserResponse> {
    constructor() {
        super("resources.qualifications.ExamUserResponse", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "started_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "ended_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "responses", kind: "message", T: () => ExamResponses }
        ]);
    }
    create(value?: PartialMessage<ExamUserResponse>): ExamUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<ExamUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamUserResponse): ExamUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 qualification_id = 3 [jstype = JS_STRING];*/ 3:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp started_at */ 4:
                    message.startedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedAt);
                    break;
                case /* optional resources.timestamp.Timestamp ended_at */ 5:
                    message.endedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endedAt);
                    break;
                case /* optional resources.qualifications.ExamResponses responses */ 6:
                    message.responses = ExamResponses.internalBinaryRead(reader, reader.uint32(), options, message.responses);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 3 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.qualificationId);
        /* optional resources.timestamp.Timestamp started_at = 4; */
        if (message.startedAt)
            Timestamp.internalBinaryWrite(message.startedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp ended_at = 5; */
        if (message.endedAt)
            Timestamp.internalBinaryWrite(message.endedAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.ExamResponses responses = 6; */
        if (message.responses)
            ExamResponses.internalBinaryWrite(message.responses, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamUserResponse
 */
export const ExamUserResponse = new ExamUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponses$Type extends MessageType<ExamResponses> {
    constructor() {
        super("resources.qualifications.ExamResponses", [
            { no: 1, name: "responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExamResponse, options: { "validate.rules": { repeated: { maxItems: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamResponses>): ExamResponses {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.responses = [];
        if (value !== undefined)
            reflectionMergePartial<ExamResponses>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponses): ExamResponses {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.qualifications.ExamResponse responses */ 1:
                    message.responses.push(ExamResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.qualifications.ExamResponse responses = 1; */
        for (let i = 0; i < message.responses.length; i++)
            ExamResponse.internalBinaryWrite(message.responses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponses
 */
export const ExamResponses = new ExamResponses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponse$Type extends MessageType<ExamResponse> {
    constructor() {
        super("resources.qualifications.ExamResponse", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "separator", kind: "scalar", oneof: "response", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "yesno", kind: "message", oneof: "response", T: () => ExamResponseYesNo },
            { no: 4, name: "free_text", kind: "message", oneof: "response", T: () => ExamResponseText },
            { no: 5, name: "multiple_choice", kind: "message", oneof: "response", T: () => ExamResponseMultipleChoice }
        ]);
    }
    create(value?: PartialMessage<ExamResponse>): ExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponse): ExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* bool separator */ 2:
                    message.response = {
                        oneofKind: "separator",
                        separator: reader.bool()
                    };
                    break;
                case /* resources.qualifications.ExamResponseYesNo yesno */ 3:
                    message.response = {
                        oneofKind: "yesno",
                        yesno: ExamResponseYesNo.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).yesno)
                    };
                    break;
                case /* resources.qualifications.ExamResponseText free_text */ 4:
                    message.response = {
                        oneofKind: "freeText",
                        freeText: ExamResponseText.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).freeText)
                    };
                    break;
                case /* resources.qualifications.ExamResponseMultipleChoice multiple_choice */ 5:
                    message.response = {
                        oneofKind: "multipleChoice",
                        multipleChoice: ExamResponseMultipleChoice.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).multipleChoice)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* bool separator = 2; */
        if (message.response.oneofKind === "separator")
            writer.tag(2, WireType.Varint).bool(message.response.separator);
        /* resources.qualifications.ExamResponseYesNo yesno = 3; */
        if (message.response.oneofKind === "yesno")
            ExamResponseYesNo.internalBinaryWrite(message.response.yesno, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseText free_text = 4; */
        if (message.response.oneofKind === "freeText")
            ExamResponseText.internalBinaryWrite(message.response.freeText, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseMultipleChoice multiple_choice = 5; */
        if (message.response.oneofKind === "multipleChoice")
            ExamResponseMultipleChoice.internalBinaryWrite(message.response.multipleChoice, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponse
 */
export const ExamResponse = new ExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseYesNo$Type extends MessageType<ExamResponseYesNo> {
    constructor() {
        super("resources.qualifications.ExamResponseYesNo", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExamResponseYesNo>): ExamResponseYesNo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial<ExamResponseYesNo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseYesNo): ExamResponseYesNo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseYesNo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseYesNo
 */
export const ExamResponseYesNo = new ExamResponseYesNo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseText$Type extends MessageType<ExamResponseText> {
    constructor() {
        super("resources.qualifications.ExamResponseText", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "500000" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamResponseText>): ExamResponseText {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<ExamResponseText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseText): ExamResponseText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseText
 */
export const ExamResponseText = new ExamResponseText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseMultipleChoice$Type extends MessageType<ExamResponseMultipleChoice> {
    constructor() {
        super("resources.qualifications.ExamResponseMultipleChoice", [
            { no: 1, name: "choices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { maxItems: "10" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamResponseMultipleChoice>): ExamResponseMultipleChoice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.choices = [];
        if (value !== undefined)
            reflectionMergePartial<ExamResponseMultipleChoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseMultipleChoice): ExamResponseMultipleChoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string choices */ 1:
                    message.choices.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseMultipleChoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string choices = 1; */
        for (let i = 0; i < message.choices.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.choices[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseMultipleChoice
 */
export const ExamResponseMultipleChoice = new ExamResponseMultipleChoice$Type();
