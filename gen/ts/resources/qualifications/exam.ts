// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/qualifications/exam.proto" (package "resources.qualifications", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../google/protobuf/duration";
import { Timestamp } from "../timestamp/timestamp";
// Exam / Questions

/**
 * @generated from protobuf message resources.qualifications.QualificationExam
 */
export interface QualificationExam {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: uint64 qualification_id = 2 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 4;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: resources.qualifications.ExamQuestions questions = 6;
     */
    questions?: ExamQuestions;
}
/**
 * @generated from protobuf message resources.qualifications.ExamSettings
 */
export interface ExamSettings {
    /**
     * @generated from protobuf field: google.protobuf.Duration time = 1;
     */
    time?: Duration;
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestions
 */
export interface ExamQuestions {
    /**
     * @generated from protobuf field: repeated resources.qualifications.ExamQuestion data = 1;
     */
    data: ExamQuestion[];
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestion
 */
export interface ExamQuestion {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "separator";
        /**
         * @generated from protobuf field: bool separator = 1;
         */
        separator: boolean;
    } | {
        oneofKind: "yesno";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionYesNo yesno = 2;
         */
        yesno: ExamQuestionYesNo;
    } | {
        oneofKind: "freeText";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionText free_text = 3;
         */
        freeText: ExamQuestionText;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionChoices multiple_choice = 4;
         */
        multipleChoice: ExamQuestionChoices;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionYesNo
 */
export interface ExamQuestionYesNo {
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionText
 */
export interface ExamQuestionText {
    /**
     * @generated from protobuf field: int32 min_length = 1;
     */
    minLength: number;
    /**
     * @generated from protobuf field: int32 max_length = 2;
     */
    maxLength: number;
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionChoices
 */
export interface ExamQuestionChoices {
    /**
     * @generated from protobuf field: bool multi = 1;
     */
    multi: boolean;
    /**
     * @generated from protobuf field: optional int32 limit = 2;
     */
    limit?: number;
    /**
     * @generated from protobuf field: repeated string choices = 3;
     */
    choices: string[];
}
// Response / Answers

/**
 * @generated from protobuf message resources.qualifications.QualificationExamResponse
 */
export interface QualificationExamResponse {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: uint64 qualification_id = 2 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp started_at = 3;
     */
    startedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp ended_at = 4;
     */
    endedAt?: Timestamp;
    /**
     * @generated from protobuf field: resources.qualifications.ExamResponses responses = 6;
     */
    responses?: ExamResponses;
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponses
 */
export interface ExamResponses {
    /**
     * @generated from protobuf field: repeated resources.qualifications.ExamResponse data = 1;
     */
    data: ExamResponse[];
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponse
 */
export interface ExamResponse {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "separator";
        /**
         * @generated from protobuf field: bool separator = 1;
         */
        separator: boolean;
    } | {
        oneofKind: "yesno";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseYesNo yesno = 2;
         */
        yesno: ExamResponseYesNo;
    } | {
        oneofKind: "freeText";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseText free_text = 3;
         */
        freeText: ExamResponseText;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseChoices multiple_choice = 4;
         */
        multipleChoice: ExamResponseChoices;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseYesNo
 */
export interface ExamResponseYesNo {
    /**
     * @generated from protobuf field: bool value = 1;
     */
    value: boolean;
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseText
 */
export interface ExamResponseText {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseChoices
 */
export interface ExamResponseChoices {
    /**
     * @generated from protobuf field: repeated string choices = 1;
     */
    choices: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class QualificationExam$Type extends MessageType<QualificationExam> {
    constructor() {
        super("resources.qualifications.QualificationExam", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "questions", kind: "message", T: () => ExamQuestions, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<QualificationExam>): QualificationExam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<QualificationExam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationExam): QualificationExam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* uint64 qualification_id = 2 [jstype = JS_STRING];*/ 2:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* resources.qualifications.ExamQuestions questions */ 6:
                    message.questions = ExamQuestions.internalBinaryRead(reader, reader.uint32(), options, message.questions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationExam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 qualification_id = 2 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.qualificationId);
        /* optional resources.timestamp.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestions questions = 6; */
        if (message.questions)
            ExamQuestions.internalBinaryWrite(message.questions, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationExam
 */
export const QualificationExam = new QualificationExam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamSettings$Type extends MessageType<ExamSettings> {
    constructor() {
        super("resources.qualifications.ExamSettings", [
            { no: 1, name: "time", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, lt: { seconds: "300" }, gte: { seconds: "1036800" } } } } }
        ]);
    }
    create(value?: PartialMessage<ExamSettings>): ExamSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamSettings): ExamSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration time */ 1:
                    message.time = Duration.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration time = 1; */
        if (message.time)
            Duration.internalBinaryWrite(message.time, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamSettings
 */
export const ExamSettings = new ExamSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestions$Type extends MessageType<ExamQuestions> {
    constructor() {
        super("resources.qualifications.ExamQuestions", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExamQuestion }
        ]);
    }
    create(value?: PartialMessage<ExamQuestions>): ExamQuestions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<ExamQuestions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestions): ExamQuestions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.qualifications.ExamQuestion data */ 1:
                    message.data.push(ExamQuestion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.qualifications.ExamQuestion data = 1; */
        for (let i = 0; i < message.data.length; i++)
            ExamQuestion.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestions
 */
export const ExamQuestions = new ExamQuestions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestion$Type extends MessageType<ExamQuestion> {
    constructor() {
        super("resources.qualifications.ExamQuestion", [
            { no: 1, name: "separator", kind: "scalar", oneof: "data", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "yesno", kind: "message", oneof: "data", T: () => ExamQuestionYesNo },
            { no: 3, name: "free_text", kind: "message", oneof: "data", T: () => ExamQuestionText },
            { no: 4, name: "multiple_choice", kind: "message", oneof: "data", T: () => ExamQuestionChoices }
        ]);
    }
    create(value?: PartialMessage<ExamQuestion>): ExamQuestion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ExamQuestion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestion): ExamQuestion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool separator */ 1:
                    message.data = {
                        oneofKind: "separator",
                        separator: reader.bool()
                    };
                    break;
                case /* resources.qualifications.ExamQuestionYesNo yesno */ 2:
                    message.data = {
                        oneofKind: "yesno",
                        yesno: ExamQuestionYesNo.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).yesno)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionText free_text */ 3:
                    message.data = {
                        oneofKind: "freeText",
                        freeText: ExamQuestionText.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).freeText)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionChoices multiple_choice */ 4:
                    message.data = {
                        oneofKind: "multipleChoice",
                        multipleChoice: ExamQuestionChoices.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).multipleChoice)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool separator = 1; */
        if (message.data.oneofKind === "separator")
            writer.tag(1, WireType.Varint).bool(message.data.separator);
        /* resources.qualifications.ExamQuestionYesNo yesno = 2; */
        if (message.data.oneofKind === "yesno")
            ExamQuestionYesNo.internalBinaryWrite(message.data.yesno, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionText free_text = 3; */
        if (message.data.oneofKind === "freeText")
            ExamQuestionText.internalBinaryWrite(message.data.freeText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionChoices multiple_choice = 4; */
        if (message.data.oneofKind === "multipleChoice")
            ExamQuestionChoices.internalBinaryWrite(message.data.multipleChoice, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestion
 */
export const ExamQuestion = new ExamQuestion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionYesNo$Type extends MessageType<ExamQuestionYesNo> {
    constructor() {
        super("resources.qualifications.ExamQuestionYesNo", []);
    }
    create(value?: PartialMessage<ExamQuestionYesNo>): ExamQuestionYesNo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionYesNo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionYesNo): ExamQuestionYesNo {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExamQuestionYesNo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionYesNo
 */
export const ExamQuestionYesNo = new ExamQuestionYesNo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionText$Type extends MessageType<ExamQuestionText> {
    constructor() {
        super("resources.qualifications.ExamQuestionText", [
            { no: 1, name: "min_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionText>): ExamQuestionText {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.minLength = 0;
        message.maxLength = 0;
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionText): ExamQuestionText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 min_length */ 1:
                    message.minLength = reader.int32();
                    break;
                case /* int32 max_length */ 2:
                    message.maxLength = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 min_length = 1; */
        if (message.minLength !== 0)
            writer.tag(1, WireType.Varint).int32(message.minLength);
        /* int32 max_length = 2; */
        if (message.maxLength !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxLength);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionText
 */
export const ExamQuestionText = new ExamQuestionText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionChoices$Type extends MessageType<ExamQuestionChoices> {
    constructor() {
        super("resources.qualifications.ExamQuestionChoices", [
            { no: 1, name: "multi", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "limit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "choices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { maxItems: "10" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionChoices>): ExamQuestionChoices {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.multi = false;
        message.choices = [];
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionChoices>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionChoices): ExamQuestionChoices {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool multi */ 1:
                    message.multi = reader.bool();
                    break;
                case /* optional int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* repeated string choices */ 3:
                    message.choices.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionChoices, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool multi = 1; */
        if (message.multi !== false)
            writer.tag(1, WireType.Varint).bool(message.multi);
        /* optional int32 limit = 2; */
        if (message.limit !== undefined)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* repeated string choices = 3; */
        for (let i = 0; i < message.choices.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.choices[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionChoices
 */
export const ExamQuestionChoices = new ExamQuestionChoices$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationExamResponse$Type extends MessageType<QualificationExamResponse> {
    constructor() {
        super("resources.qualifications.QualificationExamResponse", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "started_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "ended_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "responses", kind: "message", T: () => ExamResponses }
        ]);
    }
    create(value?: PartialMessage<QualificationExamResponse>): QualificationExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<QualificationExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationExamResponse): QualificationExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* uint64 qualification_id = 2 [jstype = JS_STRING];*/ 2:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp started_at */ 3:
                    message.startedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedAt);
                    break;
                case /* optional resources.timestamp.Timestamp ended_at */ 4:
                    message.endedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endedAt);
                    break;
                case /* resources.qualifications.ExamResponses responses */ 6:
                    message.responses = ExamResponses.internalBinaryRead(reader, reader.uint32(), options, message.responses);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 qualification_id = 2 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.qualificationId);
        /* optional resources.timestamp.Timestamp started_at = 3; */
        if (message.startedAt)
            Timestamp.internalBinaryWrite(message.startedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp ended_at = 4; */
        if (message.endedAt)
            Timestamp.internalBinaryWrite(message.endedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponses responses = 6; */
        if (message.responses)
            ExamResponses.internalBinaryWrite(message.responses, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationExamResponse
 */
export const QualificationExamResponse = new QualificationExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponses$Type extends MessageType<ExamResponses> {
    constructor() {
        super("resources.qualifications.ExamResponses", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExamResponse }
        ]);
    }
    create(value?: PartialMessage<ExamResponses>): ExamResponses {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<ExamResponses>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponses): ExamResponses {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.qualifications.ExamResponse data */ 1:
                    message.data.push(ExamResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.qualifications.ExamResponse data = 1; */
        for (let i = 0; i < message.data.length; i++)
            ExamResponse.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponses
 */
export const ExamResponses = new ExamResponses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponse$Type extends MessageType<ExamResponse> {
    constructor() {
        super("resources.qualifications.ExamResponse", [
            { no: 1, name: "separator", kind: "scalar", oneof: "data", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "yesno", kind: "message", oneof: "data", T: () => ExamResponseYesNo },
            { no: 3, name: "free_text", kind: "message", oneof: "data", T: () => ExamResponseText },
            { no: 4, name: "multiple_choice", kind: "message", oneof: "data", T: () => ExamResponseChoices }
        ]);
    }
    create(value?: PartialMessage<ExamResponse>): ExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponse): ExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool separator */ 1:
                    message.data = {
                        oneofKind: "separator",
                        separator: reader.bool()
                    };
                    break;
                case /* resources.qualifications.ExamResponseYesNo yesno */ 2:
                    message.data = {
                        oneofKind: "yesno",
                        yesno: ExamResponseYesNo.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).yesno)
                    };
                    break;
                case /* resources.qualifications.ExamResponseText free_text */ 3:
                    message.data = {
                        oneofKind: "freeText",
                        freeText: ExamResponseText.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).freeText)
                    };
                    break;
                case /* resources.qualifications.ExamResponseChoices multiple_choice */ 4:
                    message.data = {
                        oneofKind: "multipleChoice",
                        multipleChoice: ExamResponseChoices.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).multipleChoice)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool separator = 1; */
        if (message.data.oneofKind === "separator")
            writer.tag(1, WireType.Varint).bool(message.data.separator);
        /* resources.qualifications.ExamResponseYesNo yesno = 2; */
        if (message.data.oneofKind === "yesno")
            ExamResponseYesNo.internalBinaryWrite(message.data.yesno, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseText free_text = 3; */
        if (message.data.oneofKind === "freeText")
            ExamResponseText.internalBinaryWrite(message.data.freeText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseChoices multiple_choice = 4; */
        if (message.data.oneofKind === "multipleChoice")
            ExamResponseChoices.internalBinaryWrite(message.data.multipleChoice, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponse
 */
export const ExamResponse = new ExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseYesNo$Type extends MessageType<ExamResponseYesNo> {
    constructor() {
        super("resources.qualifications.ExamResponseYesNo", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExamResponseYesNo>): ExamResponseYesNo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial<ExamResponseYesNo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseYesNo): ExamResponseYesNo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseYesNo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseYesNo
 */
export const ExamResponseYesNo = new ExamResponseYesNo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseText$Type extends MessageType<ExamResponseText> {
    constructor() {
        super("resources.qualifications.ExamResponseText", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExamResponseText>): ExamResponseText {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<ExamResponseText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseText): ExamResponseText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseText
 */
export const ExamResponseText = new ExamResponseText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseChoices$Type extends MessageType<ExamResponseChoices> {
    constructor() {
        super("resources.qualifications.ExamResponseChoices", [
            { no: 1, name: "choices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExamResponseChoices>): ExamResponseChoices {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.choices = [];
        if (value !== undefined)
            reflectionMergePartial<ExamResponseChoices>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseChoices): ExamResponseChoices {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string choices */ 1:
                    message.choices.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseChoices, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string choices = 1; */
        for (let i = 0; i < message.choices.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.choices[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseChoices
 */
export const ExamResponseChoices = new ExamResponseChoices$Type();
