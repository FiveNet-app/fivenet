// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_bigint
// @generated from protobuf file "resources/qualifications/qualifications.proto" (package "resources.qualifications", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.qualifications.Qualification
 */
export interface Qualification {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string job = 5;
     */
    job: string;
    /**
     * @generated from protobuf field: uint32 weight = 6;
     */
    weight: number;
    /**
     * @generated from protobuf field: bool closed = 7;
     */
    closed: boolean;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string abbreviation = 8;
     */
    abbreviation: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string title = 9;
     */
    title: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string description = 10;
     */
    description?: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string content = 11;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 creator_id = 12;
     */
    creatorId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 13;
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: string creator_job = 14;
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: resources.qualifications.QualificationAccess access = 15;
     */
    access?: QualificationAccess;
    /**
     * @generated from protobuf field: repeated resources.qualifications.QualificationRequirement requirements = 16;
     */
    requirements: QualificationRequirement[];
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationDiscordSettings discord_settings = 17;
     */
    discordSettings?: QualificationDiscordSettings;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationResult result = 18;
     */
    result?: QualificationResult;
}
/**
 * @generated from protobuf message resources.qualifications.QualificationShort
 */
export interface QualificationShort {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string job = 5;
     */
    job: string;
    /**
     * @generated from protobuf field: uint32 weight = 6;
     */
    weight: number;
    /**
     * @generated from protobuf field: bool closed = 7;
     */
    closed: boolean;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string abbreviation = 8;
     */
    abbreviation: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string title = 9;
     */
    title: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string description = 10;
     */
    description?: string;
    /**
     * @generated from protobuf field: int32 creator_id = 12;
     */
    creatorId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 13;
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: string creator_job = 14;
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: repeated resources.qualifications.QualificationRequirement requirements = 16;
     */
    requirements: QualificationRequirement[];
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationResult result = 18;
     */
    result?: QualificationResult;
}
/**
 * @generated from protobuf message resources.qualifications.QualificationAccess
 */
export interface QualificationAccess {
    /**
     * @generated from protobuf field: repeated resources.qualifications.QualificationJobAccess jobs = 1;
     */
    jobs: QualificationJobAccess[];
}
/**
 * @generated from protobuf message resources.qualifications.QualificationJobAccess
 */
export interface QualificationJobAccess {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 qualification_id = 4 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: string job = 5;
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 6;
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: int32 minimum_grade = 7;
     */
    minimumGrade: number;
    /**
     * @generated from protobuf field: optional string job_grade_label = 8;
     */
    jobGradeLabel?: string;
    /**
     * @generated from protobuf field: resources.qualifications.AccessLevel access = 9;
     */
    access: AccessLevel;
}
/**
 * @generated from protobuf message resources.qualifications.QualificationRequirement
 */
export interface QualificationRequirement {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 qualification_id = 3 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: uint64 target_qualification_id = 4 [jstype = JS_STRING];
     */
    targetQualificationId: string;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationShort target_qualification = 5;
     */
    targetQualification?: QualificationShort; // @gotags: alias:"targetqualification.*"
}
/**
 * @generated from protobuf message resources.qualifications.QualificationDiscordSettings
 */
export interface QualificationDiscordSettings {
    /**
     * @generated from protobuf field: bool sync_enabled = 1;
     */
    syncEnabled: boolean;
    /**
     * @generated from protobuf field: optional string role_name = 2;
     */
    roleName?: string;
}
/**
 * @generated from protobuf message resources.qualifications.QualificationResult
 */
export interface QualificationResult {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 3;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 qualification_id = 4 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: int32 user_id = 5;
     */
    userId: number;
    /**
     * @generated from protobuf field: resources.users.UserShort user = 6;
     */
    user?: UserShort;
    /**
     * @generated from protobuf field: resources.qualifications.ResultStatus status = 7;
     */
    status: ResultStatus;
    /**
     * @generated from protobuf field: optional uint32 score = 8;
     */
    score?: number;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string summary = 9;
     */
    summary: string;
    /**
     * @generated from protobuf field: int32 creator_id = 10;
     */
    creatorId: number;
    /**
     * @generated from protobuf field: resources.users.UserShort creator = 11;
     */
    creator?: UserShort;
    /**
     * @generated from protobuf field: string creator_job = 12;
     */
    creatorJob: string;
}
/**
 * @generated from protobuf message resources.qualifications.QualificationRequest
 */
export interface QualificationRequest {
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 1;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 2;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 qualification_id = 3 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: int32 user_id = 4;
     */
    userId: number;
    /**
     * @generated from protobuf field: resources.users.UserShort user = 5;
     */
    user?: UserShort;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string user_comment = 6;
     */
    userComment?: string;
    /**
     * @generated from protobuf field: optional bool approved = 7;
     */
    approved?: boolean;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp approved_at = 8;
     */
    approvedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional string approver_comment = 9;
     */
    approverComment?: string;
    /**
     * @generated from protobuf field: optional int32 approver_id = 10;
     */
    approverId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort approver = 11;
     */
    approver?: UserShort;
    /**
     * @generated from protobuf field: optional string approver_job = 12;
     */
    approverJob?: string;
}
/**
 * @generated from protobuf enum resources.qualifications.AccessLevelUpdateMode
 */
export enum AccessLevelUpdateMode {
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_UPDATE_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_UPDATE_MODE_UPDATE = 1;
     */
    UPDATE = 1,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_UPDATE_MODE_DELETE = 2;
     */
    DELETE = 2,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_UPDATE_MODE_CLEAR = 3;
     */
    CLEAR = 3
}
/**
 * @generated from protobuf enum resources.qualifications.AccessLevel
 */
export enum AccessLevel {
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_BLOCKED = 1;
     */
    BLOCKED = 1,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_VIEW = 2;
     */
    VIEW = 2,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_REQUEST = 3;
     */
    REQUEST = 3,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_TAKE = 4;
     */
    TAKE = 4,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_GRADE = 5;
     */
    GRADE = 5,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_MANAGE = 6;
     */
    MANAGE = 6,
    /**
     * @generated from protobuf enum value: ACCESS_LEVEL_EDIT = 7;
     */
    EDIT = 7
}
/**
 * @generated from protobuf enum resources.qualifications.ResultStatus
 */
export enum ResultStatus {
    /**
     * @generated from protobuf enum value: RESULT_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RESULT_STATUS_PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: RESULT_STATUS_FAILED = 2;
     */
    FAILED = 2,
    /**
     * @generated from protobuf enum value: RESULT_STATUS_SUCCESSFUL = 3;
     */
    SUCCESSFUL = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Qualification$Type extends MessageType<Qualification> {
    constructor() {
        super("resources.qualifications.Qualification", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 6, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 4294967295 } } } },
            { no: 7, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "abbreviation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 9, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "1024" } } } },
            { no: 10, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 11, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "20", maxBytes: "750000" } } } },
            { no: 12, name: "creator_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "creator", kind: "message", T: () => UserShort },
            { no: 14, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 15, name: "access", kind: "message", T: () => QualificationAccess },
            { no: 16, name: "requirements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QualificationRequirement },
            { no: 17, name: "discord_settings", kind: "message", T: () => QualificationDiscordSettings },
            { no: 18, name: "result", kind: "message", T: () => QualificationResult }
        ]);
    }
    create(value?: PartialMessage<Qualification>): Qualification {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.job = "";
        message.weight = 0;
        message.closed = false;
        message.abbreviation = "";
        message.title = "";
        message.content = "";
        message.creatorId = 0;
        message.creatorJob = "";
        message.requirements = [];
        if (value !== undefined)
            reflectionMergePartial<Qualification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Qualification): Qualification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string job */ 5:
                    message.job = reader.string();
                    break;
                case /* uint32 weight */ 6:
                    message.weight = reader.uint32();
                    break;
                case /* bool closed */ 7:
                    message.closed = reader.bool();
                    break;
                case /* string abbreviation */ 8:
                    message.abbreviation = reader.string();
                    break;
                case /* string title */ 9:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 10:
                    message.description = reader.string();
                    break;
                case /* string content */ 11:
                    message.content = reader.string();
                    break;
                case /* int32 creator_id */ 12:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 13:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 14:
                    message.creatorJob = reader.string();
                    break;
                case /* resources.qualifications.QualificationAccess access */ 15:
                    message.access = QualificationAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                case /* repeated resources.qualifications.QualificationRequirement requirements */ 16:
                    message.requirements.push(QualificationRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional resources.qualifications.QualificationDiscordSettings discord_settings */ 17:
                    message.discordSettings = QualificationDiscordSettings.internalBinaryRead(reader, reader.uint32(), options, message.discordSettings);
                    break;
                case /* optional resources.qualifications.QualificationResult result */ 18:
                    message.result = QualificationResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Qualification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string job = 5; */
        if (message.job !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* uint32 weight = 6; */
        if (message.weight !== 0)
            writer.tag(6, WireType.Varint).uint32(message.weight);
        /* bool closed = 7; */
        if (message.closed !== false)
            writer.tag(7, WireType.Varint).bool(message.closed);
        /* string abbreviation = 8; */
        if (message.abbreviation !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.abbreviation);
        /* string title = 9; */
        if (message.title !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.title);
        /* optional string description = 10; */
        if (message.description !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.description);
        /* string content = 11; */
        if (message.content !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.content);
        /* int32 creator_id = 12; */
        if (message.creatorId !== 0)
            writer.tag(12, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 13; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 14; */
        if (message.creatorJob !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.creatorJob);
        /* resources.qualifications.QualificationAccess access = 15; */
        if (message.access)
            QualificationAccess.internalBinaryWrite(message.access, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.qualifications.QualificationRequirement requirements = 16; */
        for (let i = 0; i < message.requirements.length; i++)
            QualificationRequirement.internalBinaryWrite(message.requirements[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.QualificationDiscordSettings discord_settings = 17; */
        if (message.discordSettings)
            QualificationDiscordSettings.internalBinaryWrite(message.discordSettings, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.QualificationResult result = 18; */
        if (message.result)
            QualificationResult.internalBinaryWrite(message.result, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.Qualification
 */
export const Qualification = new Qualification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationShort$Type extends MessageType<QualificationShort> {
    constructor() {
        super("resources.qualifications.QualificationShort", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 6, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 4294967295 } } } },
            { no: 7, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "abbreviation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 9, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "1024" } } } },
            { no: 10, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 12, name: "creator_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "creator", kind: "message", T: () => UserShort },
            { no: 14, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 16, name: "requirements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QualificationRequirement },
            { no: 18, name: "result", kind: "message", T: () => QualificationResult }
        ]);
    }
    create(value?: PartialMessage<QualificationShort>): QualificationShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.job = "";
        message.weight = 0;
        message.closed = false;
        message.abbreviation = "";
        message.title = "";
        message.creatorId = 0;
        message.creatorJob = "";
        message.requirements = [];
        if (value !== undefined)
            reflectionMergePartial<QualificationShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationShort): QualificationShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string job */ 5:
                    message.job = reader.string();
                    break;
                case /* uint32 weight */ 6:
                    message.weight = reader.uint32();
                    break;
                case /* bool closed */ 7:
                    message.closed = reader.bool();
                    break;
                case /* string abbreviation */ 8:
                    message.abbreviation = reader.string();
                    break;
                case /* string title */ 9:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 10:
                    message.description = reader.string();
                    break;
                case /* int32 creator_id */ 12:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 13:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 14:
                    message.creatorJob = reader.string();
                    break;
                case /* repeated resources.qualifications.QualificationRequirement requirements */ 16:
                    message.requirements.push(QualificationRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional resources.qualifications.QualificationResult result */ 18:
                    message.result = QualificationResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string job = 5; */
        if (message.job !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* uint32 weight = 6; */
        if (message.weight !== 0)
            writer.tag(6, WireType.Varint).uint32(message.weight);
        /* bool closed = 7; */
        if (message.closed !== false)
            writer.tag(7, WireType.Varint).bool(message.closed);
        /* string abbreviation = 8; */
        if (message.abbreviation !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.abbreviation);
        /* string title = 9; */
        if (message.title !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.title);
        /* optional string description = 10; */
        if (message.description !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.description);
        /* int32 creator_id = 12; */
        if (message.creatorId !== 0)
            writer.tag(12, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 13; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 14; */
        if (message.creatorJob !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.creatorJob);
        /* repeated resources.qualifications.QualificationRequirement requirements = 16; */
        for (let i = 0; i < message.requirements.length; i++)
            QualificationRequirement.internalBinaryWrite(message.requirements[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.QualificationResult result = 18; */
        if (message.result)
            QualificationResult.internalBinaryWrite(message.result, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationShort
 */
export const QualificationShort = new QualificationShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationAccess$Type extends MessageType<QualificationAccess> {
    constructor() {
        super("resources.qualifications.QualificationAccess", [
            { no: 1, name: "jobs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QualificationJobAccess }
        ]);
    }
    create(value?: PartialMessage<QualificationAccess>): QualificationAccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobs = [];
        if (value !== undefined)
            reflectionMergePartial<QualificationAccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationAccess): QualificationAccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.qualifications.QualificationJobAccess jobs */ 1:
                    message.jobs.push(QualificationJobAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationAccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.qualifications.QualificationJobAccess jobs = 1; */
        for (let i = 0; i < message.jobs.length; i++)
            QualificationJobAccess.internalBinaryWrite(message.jobs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationAccess
 */
export const QualificationAccess = new QualificationAccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationJobAccess$Type extends MessageType<QualificationJobAccess> {
    constructor() {
        super("resources.qualifications.QualificationJobAccess", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 6, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 7, name: "minimum_grade", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 8, name: "job_grade_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 9, name: "access", kind: "enum", T: () => ["resources.qualifications.AccessLevel", AccessLevel, "ACCESS_LEVEL_"], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<QualificationJobAccess>): QualificationJobAccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.qualificationId = "0";
        message.job = "";
        message.minimumGrade = 0;
        message.access = 0;
        if (value !== undefined)
            reflectionMergePartial<QualificationJobAccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationJobAccess): QualificationJobAccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 qualification_id = 4 [jstype = JS_STRING];*/ 4:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* string job */ 5:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 6:
                    message.jobLabel = reader.string();
                    break;
                case /* int32 minimum_grade */ 7:
                    message.minimumGrade = reader.int32();
                    break;
                case /* optional string job_grade_label */ 8:
                    message.jobGradeLabel = reader.string();
                    break;
                case /* resources.qualifications.AccessLevel access */ 9:
                    message.access = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationJobAccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 4 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(4, WireType.Varint).uint64(message.qualificationId);
        /* string job = 5; */
        if (message.job !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 6; */
        if (message.jobLabel !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.jobLabel);
        /* int32 minimum_grade = 7; */
        if (message.minimumGrade !== 0)
            writer.tag(7, WireType.Varint).int32(message.minimumGrade);
        /* optional string job_grade_label = 8; */
        if (message.jobGradeLabel !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.jobGradeLabel);
        /* resources.qualifications.AccessLevel access = 9; */
        if (message.access !== 0)
            writer.tag(9, WireType.Varint).int32(message.access);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationJobAccess
 */
export const QualificationJobAccess = new QualificationJobAccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationRequirement$Type extends MessageType<QualificationRequirement> {
    constructor() {
        super("resources.qualifications.QualificationRequirement", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "target_qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "target_qualification", kind: "message", T: () => QualificationShort }
        ]);
    }
    create(value?: PartialMessage<QualificationRequirement>): QualificationRequirement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.qualificationId = "0";
        message.targetQualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<QualificationRequirement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationRequirement): QualificationRequirement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 qualification_id = 3 [jstype = JS_STRING];*/ 3:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* uint64 target_qualification_id = 4 [jstype = JS_STRING];*/ 4:
                    message.targetQualificationId = reader.uint64().toString();
                    break;
                case /* optional resources.qualifications.QualificationShort target_qualification */ 5:
                    message.targetQualification = QualificationShort.internalBinaryRead(reader, reader.uint32(), options, message.targetQualification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationRequirement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 3 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.qualificationId);
        /* uint64 target_qualification_id = 4 [jstype = JS_STRING]; */
        if (message.targetQualificationId !== "0")
            writer.tag(4, WireType.Varint).uint64(message.targetQualificationId);
        /* optional resources.qualifications.QualificationShort target_qualification = 5; */
        if (message.targetQualification)
            QualificationShort.internalBinaryWrite(message.targetQualification, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationRequirement
 */
export const QualificationRequirement = new QualificationRequirement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationDiscordSettings$Type extends MessageType<QualificationDiscordSettings> {
    constructor() {
        super("resources.qualifications.QualificationDiscordSettings", [
            { no: 1, name: "sync_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "role_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<QualificationDiscordSettings>): QualificationDiscordSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.syncEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<QualificationDiscordSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationDiscordSettings): QualificationDiscordSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool sync_enabled */ 1:
                    message.syncEnabled = reader.bool();
                    break;
                case /* optional string role_name */ 2:
                    message.roleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationDiscordSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool sync_enabled = 1; */
        if (message.syncEnabled !== false)
            writer.tag(1, WireType.Varint).bool(message.syncEnabled);
        /* optional string role_name = 2; */
        if (message.roleName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.roleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationDiscordSettings
 */
export const QualificationDiscordSettings = new QualificationDiscordSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationResult$Type extends MessageType<QualificationResult> {
    constructor() {
        super("resources.qualifications.QualificationResult", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "user", kind: "message", T: () => UserShort },
            { no: 7, name: "status", kind: "enum", T: () => ["resources.qualifications.ResultStatus", ResultStatus, "RESULT_STATUS_"] },
            { no: 8, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 1000 } } } },
            { no: 9, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "512" } } } },
            { no: 10, name: "creator_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "creator", kind: "message", T: () => UserShort },
            { no: 12, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<QualificationResult>): QualificationResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.qualificationId = "0";
        message.userId = 0;
        message.status = 0;
        message.summary = "";
        message.creatorId = 0;
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<QualificationResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationResult): QualificationResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 3:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* uint64 qualification_id = 4 [jstype = JS_STRING];*/ 4:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* int32 user_id */ 5:
                    message.userId = reader.int32();
                    break;
                case /* resources.users.UserShort user */ 6:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* resources.qualifications.ResultStatus status */ 7:
                    message.status = reader.int32();
                    break;
                case /* optional uint32 score */ 8:
                    message.score = reader.uint32();
                    break;
                case /* string summary */ 9:
                    message.summary = reader.string();
                    break;
                case /* int32 creator_id */ 10:
                    message.creatorId = reader.int32();
                    break;
                case /* resources.users.UserShort creator */ 11:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 12:
                    message.creatorJob = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 3; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 4 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(4, WireType.Varint).uint64(message.qualificationId);
        /* int32 user_id = 5; */
        if (message.userId !== 0)
            writer.tag(5, WireType.Varint).int32(message.userId);
        /* resources.users.UserShort user = 6; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ResultStatus status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* optional uint32 score = 8; */
        if (message.score !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.score);
        /* string summary = 9; */
        if (message.summary !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.summary);
        /* int32 creator_id = 10; */
        if (message.creatorId !== 0)
            writer.tag(10, WireType.Varint).int32(message.creatorId);
        /* resources.users.UserShort creator = 11; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 12; */
        if (message.creatorJob !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.creatorJob);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationResult
 */
export const QualificationResult = new QualificationResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationRequest$Type extends MessageType<QualificationRequest> {
    constructor() {
        super("resources.qualifications.QualificationRequest", [
            { no: 1, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "user", kind: "message", T: () => UserShort },
            { no: 6, name: "user_comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 7, name: "approved", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "approved_at", kind: "message", T: () => Timestamp },
            { no: 9, name: "approver_comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 10, name: "approver_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "approver", kind: "message", T: () => UserShort },
            { no: 12, name: "approver_job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QualificationRequest>): QualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = "0";
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<QualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationRequest): QualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional resources.timestamp.Timestamp created_at */ 1:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 2:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* uint64 qualification_id = 3 [jstype = JS_STRING];*/ 3:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* int32 user_id */ 4:
                    message.userId = reader.int32();
                    break;
                case /* resources.users.UserShort user */ 5:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional string user_comment */ 6:
                    message.userComment = reader.string();
                    break;
                case /* optional bool approved */ 7:
                    message.approved = reader.bool();
                    break;
                case /* optional resources.timestamp.Timestamp approved_at */ 8:
                    message.approvedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.approvedAt);
                    break;
                case /* optional string approver_comment */ 9:
                    message.approverComment = reader.string();
                    break;
                case /* optional int32 approver_id */ 10:
                    message.approverId = reader.int32();
                    break;
                case /* optional resources.users.UserShort approver */ 11:
                    message.approver = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.approver);
                    break;
                case /* optional string approver_job */ 12:
                    message.approverJob = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional resources.timestamp.Timestamp created_at = 1; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 2; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 3 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.qualificationId);
        /* int32 user_id = 4; */
        if (message.userId !== 0)
            writer.tag(4, WireType.Varint).int32(message.userId);
        /* resources.users.UserShort user = 5; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional string user_comment = 6; */
        if (message.userComment !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.userComment);
        /* optional bool approved = 7; */
        if (message.approved !== undefined)
            writer.tag(7, WireType.Varint).bool(message.approved);
        /* optional resources.timestamp.Timestamp approved_at = 8; */
        if (message.approvedAt)
            Timestamp.internalBinaryWrite(message.approvedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional string approver_comment = 9; */
        if (message.approverComment !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.approverComment);
        /* optional int32 approver_id = 10; */
        if (message.approverId !== undefined)
            writer.tag(10, WireType.Varint).int32(message.approverId);
        /* optional resources.users.UserShort approver = 11; */
        if (message.approver)
            UserShort.internalBinaryWrite(message.approver, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional string approver_job = 12; */
        if (message.approverJob !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.approverJob);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationRequest
 */
export const QualificationRequest = new QualificationRequest$Type();
