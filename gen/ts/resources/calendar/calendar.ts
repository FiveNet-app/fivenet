// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/calendar/calendar.proto" (package "resources.calendar", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CalendarAccess } from "./access";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.calendar.Calendar
 */
export interface Calendar {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional string job = 5;
     */
    job?: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string name = 6;
     */
    name: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string description = 7;
     */
    description?: string;
    /**
     * @generated from protobuf field: bool public = 8;
     */
    public: boolean;
    /**
     * @generated from protobuf field: bool closed = 9;
     */
    closed: boolean;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string color = 10;
     */
    color: string;
    /**
     * @generated from protobuf field: optional int32 creator_id = 11;
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 12;
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: string creator_job = 13;
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: resources.calendar.CalendarAccess access = 14;
     */
    access?: CalendarAccess;
}
/**
 * @generated from protobuf message resources.calendar.CalendarShort
 */
export interface CalendarShort {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string name = 6;
     */
    name: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string description = 7;
     */
    description?: string;
    /**
     * @generated from protobuf field: bool public = 8;
     */
    public: boolean;
    /**
     * @generated from protobuf field: bool closed = 9;
     */
    closed: boolean;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string color = 10;
     */
    color: string;
}
/**
 * @generated from protobuf message resources.calendar.CalendarEntry
 */
export interface CalendarEntry {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 calendar_id = 5 [jstype = JS_STRING];
     */
    calendarId: string;
    /**
     * @generated from protobuf field: optional resources.calendar.Calendar calendar = 6;
     */
    calendar?: Calendar;
    /**
     * @generated from protobuf field: optional string job = 7;
     */
    job?: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp start_time = 8;
     */
    startTime?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp end_time = 9;
     */
    endTime?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string title = 10;
     */
    title: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string content = 11;
     */
    content: string;
    /**
     * @generated from protobuf field: optional bool rsvp_open = 12;
     */
    rsvpOpen?: boolean;
    /**
     * @generated from protobuf field: optional int32 creator_id = 13;
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 14;
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: string creator_job = 15;
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: resources.calendar.CalendarAccess access = 16;
     */
    access?: CalendarAccess;
    /**
     * @generated from protobuf field: optional resources.calendar.CalendarEntryRecurring recurring = 17;
     */
    recurring?: CalendarEntryRecurring;
}
/**
 * @generated from protobuf message resources.calendar.CalendarEntryRecurring
 */
export interface CalendarEntryRecurring {
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp started_at = 1;
     */
    startedAt?: Timestamp;
    /**
     * @generated from protobuf field: bool weekly = 2;
     */
    weekly: boolean;
}
/**
 * @generated from protobuf message resources.calendar.CalendarSub
 */
export interface CalendarSub {
    /**
     * @generated from protobuf field: uint64 calendar_id = 1 [jstype = JS_STRING];
     */
    calendarId: string;
    /**
     * @generated from protobuf field: optional uint64 entry_id = 2 [jstype = JS_STRING];
     */
    entryId?: string;
    /**
     * @generated from protobuf field: int32 user_id = 3;
     */
    userId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort user = 4;
     */
    user?: UserShort;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 5;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: bool confirmed = 6;
     */
    confirmed: boolean;
    /**
     * @generated from protobuf field: bool muted = 7;
     */
    muted: boolean;
}
/**
 * @generated from protobuf message resources.calendar.CalendarEntryRSVP
 */
export interface CalendarEntryRSVP {
    /**
     * @generated from protobuf field: uint64 entry_id = 1 [jstype = JS_STRING];
     */
    entryId: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: int32 user_id = 3;
     */
    userId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort user = 4;
     */
    user?: UserShort;
    /**
     * @generated from protobuf field: resources.calendar.RsvpResponses response = 5;
     */
    response: RsvpResponses;
}
/**
 * @generated from protobuf enum resources.calendar.RsvpResponses
 */
export enum RsvpResponses {
    /**
     * @generated from protobuf enum value: RSVP_RESPONSES_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RSVP_RESPONSES_NO = 1;
     */
    NO = 1,
    /**
     * @generated from protobuf enum value: RSVP_RESPONSES_MAYBE = 2;
     */
    MAYBE = 2,
    /**
     * @generated from protobuf enum value: RSVP_RESPONSES_YES = 3;
     */
    YES = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Calendar$Type extends MessageType<Calendar> {
    constructor() {
        super("resources.calendar.Calendar", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "255" } } } },
            { no: 7, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 8, name: "public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "12" } } } },
            { no: 11, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "creator", kind: "message", T: () => UserShort },
            { no: 13, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 14, name: "access", kind: "message", T: () => CalendarAccess }
        ]);
    }
    create(value?: PartialMessage<Calendar>): Calendar {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.name = "";
        message.public = false;
        message.closed = false;
        message.color = "";
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<Calendar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Calendar): Calendar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* optional string job */ 5:
                    message.job = reader.string();
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                case /* optional string description */ 7:
                    message.description = reader.string();
                    break;
                case /* bool public */ 8:
                    message.public = reader.bool();
                    break;
                case /* bool closed */ 9:
                    message.closed = reader.bool();
                    break;
                case /* string color */ 10:
                    message.color = reader.string();
                    break;
                case /* optional int32 creator_id */ 11:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 12:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 13:
                    message.creatorJob = reader.string();
                    break;
                case /* resources.calendar.CalendarAccess access */ 14:
                    message.access = CalendarAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Calendar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional string job = 5; */
        if (message.job !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        /* optional string description = 7; */
        if (message.description !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        /* bool public = 8; */
        if (message.public !== false)
            writer.tag(8, WireType.Varint).bool(message.public);
        /* bool closed = 9; */
        if (message.closed !== false)
            writer.tag(9, WireType.Varint).bool(message.closed);
        /* string color = 10; */
        if (message.color !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.color);
        /* optional int32 creator_id = 11; */
        if (message.creatorId !== undefined)
            writer.tag(11, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 12; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 13; */
        if (message.creatorJob !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.creatorJob);
        /* resources.calendar.CalendarAccess access = 14; */
        if (message.access)
            CalendarAccess.internalBinaryWrite(message.access, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.calendar.Calendar
 */
export const Calendar = new Calendar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalendarShort$Type extends MessageType<CalendarShort> {
    constructor() {
        super("resources.calendar.CalendarShort", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "255" } } } },
            { no: 7, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 8, name: "public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "12" } } } }
        ]);
    }
    create(value?: PartialMessage<CalendarShort>): CalendarShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.name = "";
        message.public = false;
        message.closed = false;
        message.color = "";
        if (value !== undefined)
            reflectionMergePartial<CalendarShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalendarShort): CalendarShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                case /* optional string description */ 7:
                    message.description = reader.string();
                    break;
                case /* bool public */ 8:
                    message.public = reader.bool();
                    break;
                case /* bool closed */ 9:
                    message.closed = reader.bool();
                    break;
                case /* string color */ 10:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalendarShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        /* optional string description = 7; */
        if (message.description !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        /* bool public = 8; */
        if (message.public !== false)
            writer.tag(8, WireType.Varint).bool(message.public);
        /* bool closed = 9; */
        if (message.closed !== false)
            writer.tag(9, WireType.Varint).bool(message.closed);
        /* string color = 10; */
        if (message.color !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.calendar.CalendarShort
 */
export const CalendarShort = new CalendarShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalendarEntry$Type extends MessageType<CalendarEntry> {
    constructor() {
        super("resources.calendar.CalendarEntry", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "calendar_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "calendar", kind: "message", T: () => Calendar },
            { no: 7, name: "job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 8, name: "start_time", kind: "message", T: () => Timestamp },
            { no: 9, name: "end_time", kind: "message", T: () => Timestamp },
            { no: 10, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "512" } } } },
            { no: 11, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "20", maxBytes: "1000000" } } } },
            { no: 12, name: "rsvp_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "creator", kind: "message", T: () => UserShort },
            { no: 15, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 16, name: "access", kind: "message", T: () => CalendarAccess },
            { no: 17, name: "recurring", kind: "message", T: () => CalendarEntryRecurring }
        ]);
    }
    create(value?: PartialMessage<CalendarEntry>): CalendarEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.calendarId = "0";
        message.title = "";
        message.content = "";
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<CalendarEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalendarEntry): CalendarEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* uint64 calendar_id = 5 [jstype = JS_STRING];*/ 5:
                    message.calendarId = reader.uint64().toString();
                    break;
                case /* optional resources.calendar.Calendar calendar */ 6:
                    message.calendar = Calendar.internalBinaryRead(reader, reader.uint32(), options, message.calendar);
                    break;
                case /* optional string job */ 7:
                    message.job = reader.string();
                    break;
                case /* resources.timestamp.Timestamp start_time */ 8:
                    message.startTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTime);
                    break;
                case /* optional resources.timestamp.Timestamp end_time */ 9:
                    message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* string title */ 10:
                    message.title = reader.string();
                    break;
                case /* string content */ 11:
                    message.content = reader.string();
                    break;
                case /* optional bool rsvp_open */ 12:
                    message.rsvpOpen = reader.bool();
                    break;
                case /* optional int32 creator_id */ 13:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 14:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 15:
                    message.creatorJob = reader.string();
                    break;
                case /* resources.calendar.CalendarAccess access */ 16:
                    message.access = CalendarAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                case /* optional resources.calendar.CalendarEntryRecurring recurring */ 17:
                    message.recurring = CalendarEntryRecurring.internalBinaryRead(reader, reader.uint32(), options, message.recurring);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalendarEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 calendar_id = 5 [jstype = JS_STRING]; */
        if (message.calendarId !== "0")
            writer.tag(5, WireType.Varint).uint64(message.calendarId);
        /* optional resources.calendar.Calendar calendar = 6; */
        if (message.calendar)
            Calendar.internalBinaryWrite(message.calendar, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional string job = 7; */
        if (message.job !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.job);
        /* resources.timestamp.Timestamp start_time = 8; */
        if (message.startTime)
            Timestamp.internalBinaryWrite(message.startTime, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp end_time = 9; */
        if (message.endTime)
            Timestamp.internalBinaryWrite(message.endTime, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string title = 10; */
        if (message.title !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.title);
        /* string content = 11; */
        if (message.content !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.content);
        /* optional bool rsvp_open = 12; */
        if (message.rsvpOpen !== undefined)
            writer.tag(12, WireType.Varint).bool(message.rsvpOpen);
        /* optional int32 creator_id = 13; */
        if (message.creatorId !== undefined)
            writer.tag(13, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 14; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 15; */
        if (message.creatorJob !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.creatorJob);
        /* resources.calendar.CalendarAccess access = 16; */
        if (message.access)
            CalendarAccess.internalBinaryWrite(message.access, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.calendar.CalendarEntryRecurring recurring = 17; */
        if (message.recurring)
            CalendarEntryRecurring.internalBinaryWrite(message.recurring, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.calendar.CalendarEntry
 */
export const CalendarEntry = new CalendarEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalendarEntryRecurring$Type extends MessageType<CalendarEntryRecurring> {
    constructor() {
        super("resources.calendar.CalendarEntryRecurring", [
            { no: 1, name: "started_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "weekly", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CalendarEntryRecurring>): CalendarEntryRecurring {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.weekly = false;
        if (value !== undefined)
            reflectionMergePartial<CalendarEntryRecurring>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalendarEntryRecurring): CalendarEntryRecurring {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.timestamp.Timestamp started_at */ 1:
                    message.startedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedAt);
                    break;
                case /* bool weekly */ 2:
                    message.weekly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalendarEntryRecurring, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.timestamp.Timestamp started_at = 1; */
        if (message.startedAt)
            Timestamp.internalBinaryWrite(message.startedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool weekly = 2; */
        if (message.weekly !== false)
            writer.tag(2, WireType.Varint).bool(message.weekly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.calendar.CalendarEntryRecurring
 */
export const CalendarEntryRecurring = new CalendarEntryRecurring$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalendarSub$Type extends MessageType<CalendarSub> {
    constructor() {
        super("resources.calendar.CalendarSub", [
            { no: 1, name: "calendar_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "entry_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "user", kind: "message", T: () => UserShort },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CalendarSub>): CalendarSub {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.calendarId = "0";
        message.userId = 0;
        message.confirmed = false;
        message.muted = false;
        if (value !== undefined)
            reflectionMergePartial<CalendarSub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalendarSub): CalendarSub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 calendar_id = 1 [jstype = JS_STRING];*/ 1:
                    message.calendarId = reader.uint64().toString();
                    break;
                case /* optional uint64 entry_id = 2 [jstype = JS_STRING];*/ 2:
                    message.entryId = reader.uint64().toString();
                    break;
                case /* int32 user_id */ 3:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.users.UserShort user */ 4:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* bool confirmed */ 6:
                    message.confirmed = reader.bool();
                    break;
                case /* bool muted */ 7:
                    message.muted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalendarSub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 calendar_id = 1 [jstype = JS_STRING]; */
        if (message.calendarId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.calendarId);
        /* optional uint64 entry_id = 2 [jstype = JS_STRING]; */
        if (message.entryId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.entryId);
        /* int32 user_id = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).int32(message.userId);
        /* optional resources.users.UserShort user = 4; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool confirmed = 6; */
        if (message.confirmed !== false)
            writer.tag(6, WireType.Varint).bool(message.confirmed);
        /* bool muted = 7; */
        if (message.muted !== false)
            writer.tag(7, WireType.Varint).bool(message.muted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.calendar.CalendarSub
 */
export const CalendarSub = new CalendarSub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalendarEntryRSVP$Type extends MessageType<CalendarEntryRSVP> {
    constructor() {
        super("resources.calendar.CalendarEntryRSVP", [
            { no: 1, name: "entry_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 4, name: "user", kind: "message", T: () => UserShort },
            { no: 5, name: "response", kind: "enum", T: () => ["resources.calendar.RsvpResponses", RsvpResponses, "RSVP_RESPONSES_"], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<CalendarEntryRSVP>): CalendarEntryRSVP {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entryId = "0";
        message.userId = 0;
        message.response = 0;
        if (value !== undefined)
            reflectionMergePartial<CalendarEntryRSVP>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalendarEntryRSVP): CalendarEntryRSVP {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 entry_id = 1 [jstype = JS_STRING];*/ 1:
                    message.entryId = reader.uint64().toString();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* int32 user_id */ 3:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.users.UserShort user */ 4:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* resources.calendar.RsvpResponses response */ 5:
                    message.response = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalendarEntryRSVP, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 entry_id = 1 [jstype = JS_STRING]; */
        if (message.entryId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.entryId);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 user_id = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).int32(message.userId);
        /* optional resources.users.UserShort user = 4; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.calendar.RsvpResponses response = 5; */
        if (message.response !== 0)
            writer.tag(5, WireType.Varint).int32(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.calendar.CalendarEntryRSVP
 */
export const CalendarEntryRSVP = new CalendarEntryRSVP$Type();
