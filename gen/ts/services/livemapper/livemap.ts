// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size,long_type_number
// @generated from protobuf file "services/livemapper/livemap.proto" (package "services.livemapper", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { UserMarker } from "../../resources/livemap/livemap.js";
import { DispatchMarker } from "../../resources/livemap/livemap.js";
import { Job } from "../../resources/jobs/jobs.js";
/**
 * @generated from protobuf message services.livemapper.StreamRequest
 */
export interface StreamRequest {
}
/**
 * @generated from protobuf message services.livemapper.StreamResponse
 */
export interface StreamResponse {
    /**
     * @generated from protobuf field: repeated resources.jobs.Job jobs_dispatches = 1;
     */
    jobsDispatches: Job[];
    /**
     * @generated from protobuf field: repeated resources.jobs.Job jobs_users = 2;
     */
    jobsUsers: Job[];
    /**
     * @generated from protobuf field: repeated resources.livemap.DispatchMarker dispatches = 3;
     */
    dispatches: DispatchMarker[];
    /**
     * @generated from protobuf field: repeated resources.livemap.UserMarker users = 4;
     */
    users: UserMarker[];
}
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequest$Type extends MessageType<StreamRequest> {
    constructor() {
        super("services.livemapper.StreamRequest", []);
    }
}
/**
 * @generated MessageType for protobuf message services.livemapper.StreamRequest
 */
export const StreamRequest = new StreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamResponse$Type extends MessageType<StreamResponse> {
    constructor() {
        super("services.livemapper.StreamResponse", [
            { no: 1, name: "jobs_dispatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Job },
            { no: 2, name: "jobs_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Job },
            { no: 3, name: "dispatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DispatchMarker },
            { no: 4, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserMarker }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.livemapper.StreamResponse
 */
export const StreamResponse = new StreamResponse$Type();
/**
 * @generated ServiceType for protobuf service services.livemapper.LivemapperService
 */
export const LivemapperService = new ServiceType("services.livemapper.LivemapperService", [
    { name: "Stream", serverStreaming: true, options: {}, I: StreamRequest, O: StreamResponse }
]);
