// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/rector/sync.proto" (package "services.rector", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SyncService } from "./sync";
import type { SyncResponse } from "./sync";
import type { SyncRequest } from "./sync";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetStatusResponse } from "./sync";
import type { GetStatusRequest } from "./sync";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.rector.SyncService
 */
export interface ISyncServiceClient {
    /**
     * @generated from protobuf rpc: GetStatus(services.rector.GetStatusRequest) returns (services.rector.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * @generated from protobuf rpc: Sync(services.rector.SyncRequest) returns (services.rector.SyncResponse);
     */
    sync(input: SyncRequest, options?: RpcOptions): UnaryCall<SyncRequest, SyncResponse>;
}
/**
 * @generated from protobuf service services.rector.SyncService
 */
export class SyncServiceClient implements ISyncServiceClient, ServiceInfo {
    typeName = SyncService.typeName;
    methods = SyncService.methods;
    options = SyncService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetStatus(services.rector.GetStatusRequest) returns (services.rector.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Sync(services.rector.SyncRequest) returns (services.rector.SyncResponse);
     */
    sync(input: SyncRequest, options?: RpcOptions): UnaryCall<SyncRequest, SyncResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SyncRequest, SyncResponse>("unary", this._transport, method, opt, input);
    }
}
