// @generated by protobuf-ts 2.9.3 with parameter optimize_speed,long_type_bigint
// @generated from protobuf file "services/jobs/qualifications.proto" (package "services.jobs", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { QualificationRequest } from "../../resources/jobs/qualifications";
import { AccessLevelUpdateMode } from "../../resources/jobs/qualifications";
import { QualificationAccess } from "../../resources/jobs/qualifications";
import { QualificationResult } from "../../resources/jobs/qualifications";
import { Qualification } from "../../resources/jobs/qualifications";
import { PaginationResponse } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
/**
 * @generated from protobuf message services.jobs.ListQualificationsRequest
 */
export interface ListQualificationsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest; // Search params
}
/**
 * @generated from protobuf message services.jobs.ListQualificationsResponse
 */
export interface ListQualificationsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.Qualification qualifications = 2;
     */
    qualifications: Qualification[];
}
/**
 * @generated from protobuf message services.jobs.GetQualificationRequest
 */
export interface GetQualificationRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1 [jstype = JS_STRING];
     */
    qualificationId: string;
}
/**
 * @generated from protobuf message services.jobs.GetQualificationResponse
 */
export interface GetQualificationResponse {
    /**
     * @generated from protobuf field: resources.jobs.Qualification qualification = 1;
     */
    qualification?: Qualification;
}
/**
 * @generated from protobuf message services.jobs.ListQualificationResultsRequest
 */
export interface ListQualificationResultsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: uint64 qualification_id = 2 [jstype = JS_STRING];
     */
    qualificationId: string;
}
/**
 * @generated from protobuf message services.jobs.ListQualificationResultsResponse
 */
export interface ListQualificationResultsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.QualificationResult results = 2;
     */
    results: QualificationResult[];
}
/**
 * @generated from protobuf message services.jobs.CreateQualificationRequest
 */
export interface CreateQualificationRequest {
    /**
     * @generated from protobuf field: resources.jobs.Qualification qualification = 1;
     */
    qualification?: Qualification;
}
/**
 * @generated from protobuf message services.jobs.CreateQualificationResponse
 */
export interface CreateQualificationResponse {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1 [jstype = JS_STRING];
     */
    qualificationId: string;
}
/**
 * @generated from protobuf message services.jobs.UpdateQualificationRequest
 */
export interface UpdateQualificationRequest {
    /**
     * @generated from protobuf field: resources.jobs.Qualification qualification = 1;
     */
    qualification?: Qualification;
}
/**
 * @generated from protobuf message services.jobs.UpdateQualificationResponse
 */
export interface UpdateQualificationResponse {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1 [jstype = JS_STRING];
     */
    qualificationId: string;
}
/**
 * @generated from protobuf message services.jobs.DeleteQualificationRequest
 */
export interface DeleteQualificationRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1 [jstype = JS_STRING];
     */
    qualificationId: string;
}
/**
 * @generated from protobuf message services.jobs.DeleteQualificationResponse
 */
export interface DeleteQualificationResponse {
}
/**
 * Access =====================================================================
 *
 * @generated from protobuf message services.jobs.GetQualificationAccessRequest
 */
export interface GetQualificationAccessRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1 [jstype = JS_STRING];
     */
    qualificationId: string;
}
/**
 * @generated from protobuf message services.jobs.GetQualificationAccessResponse
 */
export interface GetQualificationAccessResponse {
    /**
     * @generated from protobuf field: resources.jobs.QualificationAccess access = 1;
     */
    access?: QualificationAccess;
}
/**
 * @generated from protobuf message services.jobs.SetQualificationAccessRequest
 */
export interface SetQualificationAccessRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1 [jstype = JS_STRING];
     */
    qualificationId: string;
    /**
     * @generated from protobuf field: resources.jobs.AccessLevelUpdateMode mode = 2;
     */
    mode: AccessLevelUpdateMode;
    /**
     * @generated from protobuf field: resources.jobs.QualificationAccess access = 3;
     */
    access?: QualificationAccess;
}
/**
 * @generated from protobuf message services.jobs.SetQualificationAccessResponse
 */
export interface SetQualificationAccessResponse {
}
/**
 * Requests ===================================================================
 *
 * @generated from protobuf message services.jobs.ListQualificationRequestsRequest
 */
export interface ListQualificationRequestsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional uint64 qualification_id = 2 [jstype = JS_STRING];
     */
    qualificationId?: string;
}
/**
 * @generated from protobuf message services.jobs.ListQualificationRequestsResponse
 */
export interface ListQualificationRequestsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.QualificationRequest requests = 2;
     */
    requests: QualificationRequest[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationsRequest$Type extends MessageType<ListQualificationsRequest> {
    constructor() {
        super("services.jobs.ListQualificationsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<ListQualificationsRequest>): ListQualificationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListQualificationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationsRequest): ListQualificationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListQualificationsRequest
 */
export const ListQualificationsRequest = new ListQualificationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationsResponse$Type extends MessageType<ListQualificationsResponse> {
    constructor() {
        super("services.jobs.ListQualificationsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "qualifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Qualification }
        ]);
    }
    create(value?: PartialMessage<ListQualificationsResponse>): ListQualificationsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualifications = [];
        if (value !== undefined)
            reflectionMergePartial<ListQualificationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationsResponse): ListQualificationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.Qualification qualifications */ 2:
                    message.qualifications.push(Qualification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.Qualification qualifications = 2; */
        for (let i = 0; i < message.qualifications.length; i++)
            Qualification.internalBinaryWrite(message.qualifications[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListQualificationsResponse
 */
export const ListQualificationsResponse = new ListQualificationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQualificationRequest$Type extends MessageType<GetQualificationRequest> {
    constructor() {
        super("services.jobs.GetQualificationRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<GetQualificationRequest>): GetQualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<GetQualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQualificationRequest): GetQualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id = 1 [jstype = JS_STRING];*/ 1:
                    message.qualificationId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetQualificationRequest
 */
export const GetQualificationRequest = new GetQualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQualificationResponse$Type extends MessageType<GetQualificationResponse> {
    constructor() {
        super("services.jobs.GetQualificationResponse", [
            { no: 1, name: "qualification", kind: "message", T: () => Qualification }
        ]);
    }
    create(value?: PartialMessage<GetQualificationResponse>): GetQualificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetQualificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQualificationResponse): GetQualificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Qualification qualification */ 1:
                    message.qualification = Qualification.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQualificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Qualification qualification = 1; */
        if (message.qualification)
            Qualification.internalBinaryWrite(message.qualification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetQualificationResponse
 */
export const GetQualificationResponse = new GetQualificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationResultsRequest$Type extends MessageType<ListQualificationResultsRequest> {
    constructor() {
        super("services.jobs.ListQualificationResultsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<ListQualificationResultsRequest>): ListQualificationResultsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<ListQualificationResultsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationResultsRequest): ListQualificationResultsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* uint64 qualification_id = 2 [jstype = JS_STRING];*/ 2:
                    message.qualificationId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationResultsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 2 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListQualificationResultsRequest
 */
export const ListQualificationResultsRequest = new ListQualificationResultsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationResultsResponse$Type extends MessageType<ListQualificationResultsResponse> {
    constructor() {
        super("services.jobs.ListQualificationResultsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QualificationResult }
        ]);
    }
    create(value?: PartialMessage<ListQualificationResultsResponse>): ListQualificationResultsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.results = [];
        if (value !== undefined)
            reflectionMergePartial<ListQualificationResultsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationResultsResponse): ListQualificationResultsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.QualificationResult results */ 2:
                    message.results.push(QualificationResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationResultsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.QualificationResult results = 2; */
        for (let i = 0; i < message.results.length; i++)
            QualificationResult.internalBinaryWrite(message.results[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListQualificationResultsResponse
 */
export const ListQualificationResultsResponse = new ListQualificationResultsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateQualificationRequest$Type extends MessageType<CreateQualificationRequest> {
    constructor() {
        super("services.jobs.CreateQualificationRequest", [
            { no: 1, name: "qualification", kind: "message", T: () => Qualification }
        ]);
    }
    create(value?: PartialMessage<CreateQualificationRequest>): CreateQualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateQualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateQualificationRequest): CreateQualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Qualification qualification */ 1:
                    message.qualification = Qualification.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateQualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Qualification qualification = 1; */
        if (message.qualification)
            Qualification.internalBinaryWrite(message.qualification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.CreateQualificationRequest
 */
export const CreateQualificationRequest = new CreateQualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateQualificationResponse$Type extends MessageType<CreateQualificationResponse> {
    constructor() {
        super("services.jobs.CreateQualificationResponse", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<CreateQualificationResponse>): CreateQualificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<CreateQualificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateQualificationResponse): CreateQualificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id = 1 [jstype = JS_STRING];*/ 1:
                    message.qualificationId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateQualificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.CreateQualificationResponse
 */
export const CreateQualificationResponse = new CreateQualificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateQualificationRequest$Type extends MessageType<UpdateQualificationRequest> {
    constructor() {
        super("services.jobs.UpdateQualificationRequest", [
            { no: 1, name: "qualification", kind: "message", T: () => Qualification }
        ]);
    }
    create(value?: PartialMessage<UpdateQualificationRequest>): UpdateQualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateQualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateQualificationRequest): UpdateQualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Qualification qualification */ 1:
                    message.qualification = Qualification.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateQualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Qualification qualification = 1; */
        if (message.qualification)
            Qualification.internalBinaryWrite(message.qualification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.UpdateQualificationRequest
 */
export const UpdateQualificationRequest = new UpdateQualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateQualificationResponse$Type extends MessageType<UpdateQualificationResponse> {
    constructor() {
        super("services.jobs.UpdateQualificationResponse", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateQualificationResponse>): UpdateQualificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<UpdateQualificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateQualificationResponse): UpdateQualificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id = 1 [jstype = JS_STRING];*/ 1:
                    message.qualificationId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateQualificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.UpdateQualificationResponse
 */
export const UpdateQualificationResponse = new UpdateQualificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQualificationRequest$Type extends MessageType<DeleteQualificationRequest> {
    constructor() {
        super("services.jobs.DeleteQualificationRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteQualificationRequest>): DeleteQualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<DeleteQualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQualificationRequest): DeleteQualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id = 1 [jstype = JS_STRING];*/ 1:
                    message.qualificationId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.DeleteQualificationRequest
 */
export const DeleteQualificationRequest = new DeleteQualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQualificationResponse$Type extends MessageType<DeleteQualificationResponse> {
    constructor() {
        super("services.jobs.DeleteQualificationResponse", []);
    }
    create(value?: PartialMessage<DeleteQualificationResponse>): DeleteQualificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteQualificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQualificationResponse): DeleteQualificationResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteQualificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.DeleteQualificationResponse
 */
export const DeleteQualificationResponse = new DeleteQualificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQualificationAccessRequest$Type extends MessageType<GetQualificationAccessRequest> {
    constructor() {
        super("services.jobs.GetQualificationAccessRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<GetQualificationAccessRequest>): GetQualificationAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = "0";
        if (value !== undefined)
            reflectionMergePartial<GetQualificationAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQualificationAccessRequest): GetQualificationAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id = 1 [jstype = JS_STRING];*/ 1:
                    message.qualificationId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQualificationAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetQualificationAccessRequest
 */
export const GetQualificationAccessRequest = new GetQualificationAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQualificationAccessResponse$Type extends MessageType<GetQualificationAccessResponse> {
    constructor() {
        super("services.jobs.GetQualificationAccessResponse", [
            { no: 1, name: "access", kind: "message", T: () => QualificationAccess, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<GetQualificationAccessResponse>): GetQualificationAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetQualificationAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQualificationAccessResponse): GetQualificationAccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.QualificationAccess access */ 1:
                    message.access = QualificationAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQualificationAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.QualificationAccess access = 1; */
        if (message.access)
            QualificationAccess.internalBinaryWrite(message.access, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetQualificationAccessResponse
 */
export const GetQualificationAccessResponse = new GetQualificationAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQualificationAccessRequest$Type extends MessageType<SetQualificationAccessRequest> {
    constructor() {
        super("services.jobs.SetQualificationAccessRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "mode", kind: "enum", T: () => ["resources.jobs.AccessLevelUpdateMode", AccessLevelUpdateMode, "ACCESS_LEVEL_UPDATE_MODE_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "access", kind: "message", T: () => QualificationAccess, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<SetQualificationAccessRequest>): SetQualificationAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = "0";
        message.mode = 0;
        if (value !== undefined)
            reflectionMergePartial<SetQualificationAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQualificationAccessRequest): SetQualificationAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id = 1 [jstype = JS_STRING];*/ 1:
                    message.qualificationId = reader.uint64().toString();
                    break;
                case /* resources.jobs.AccessLevelUpdateMode mode */ 2:
                    message.mode = reader.int32();
                    break;
                case /* resources.jobs.QualificationAccess access */ 3:
                    message.access = QualificationAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQualificationAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1 [jstype = JS_STRING]; */
        if (message.qualificationId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* resources.jobs.AccessLevelUpdateMode mode = 2; */
        if (message.mode !== 0)
            writer.tag(2, WireType.Varint).int32(message.mode);
        /* resources.jobs.QualificationAccess access = 3; */
        if (message.access)
            QualificationAccess.internalBinaryWrite(message.access, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.SetQualificationAccessRequest
 */
export const SetQualificationAccessRequest = new SetQualificationAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQualificationAccessResponse$Type extends MessageType<SetQualificationAccessResponse> {
    constructor() {
        super("services.jobs.SetQualificationAccessResponse", []);
    }
    create(value?: PartialMessage<SetQualificationAccessResponse>): SetQualificationAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetQualificationAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQualificationAccessResponse): SetQualificationAccessResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetQualificationAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.SetQualificationAccessResponse
 */
export const SetQualificationAccessResponse = new SetQualificationAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationRequestsRequest$Type extends MessageType<ListQualificationRequestsRequest> {
    constructor() {
        super("services.jobs.ListQualificationRequestsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "qualification_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<ListQualificationRequestsRequest>): ListQualificationRequestsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListQualificationRequestsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationRequestsRequest): ListQualificationRequestsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional uint64 qualification_id = 2 [jstype = JS_STRING];*/ 2:
                    message.qualificationId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationRequestsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 qualification_id = 2 [jstype = JS_STRING]; */
        if (message.qualificationId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListQualificationRequestsRequest
 */
export const ListQualificationRequestsRequest = new ListQualificationRequestsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationRequestsResponse$Type extends MessageType<ListQualificationRequestsResponse> {
    constructor() {
        super("services.jobs.ListQualificationRequestsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QualificationRequest }
        ]);
    }
    create(value?: PartialMessage<ListQualificationRequestsResponse>): ListQualificationRequestsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requests = [];
        if (value !== undefined)
            reflectionMergePartial<ListQualificationRequestsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationRequestsResponse): ListQualificationRequestsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.QualificationRequest requests */ 2:
                    message.requests.push(QualificationRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationRequestsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.QualificationRequest requests = 2; */
        for (let i = 0; i < message.requests.length; i++)
            QualificationRequest.internalBinaryWrite(message.requests[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListQualificationRequestsResponse
 */
export const ListQualificationRequestsResponse = new ListQualificationRequestsResponse$Type();
/**
 * @generated ServiceType for protobuf service services.jobs.JobsQualificationsService
 */
export const JobsQualificationsService = new ServiceType("services.jobs.JobsQualificationsService", [
    { name: "ListQualifications", options: {}, I: ListQualificationsRequest, O: ListQualificationsResponse },
    { name: "GetQualification", options: {}, I: GetQualificationRequest, O: GetQualificationResponse },
    { name: "ListQualificationResults", options: {}, I: ListQualificationResultsRequest, O: ListQualificationResultsResponse },
    { name: "CreateQualification", options: {}, I: CreateQualificationRequest, O: CreateQualificationResponse },
    { name: "UpdateQualification", options: {}, I: UpdateQualificationRequest, O: UpdateQualificationResponse },
    { name: "DeleteQualification", options: {}, I: DeleteQualificationRequest, O: DeleteQualificationResponse },
    { name: "ListQualificationRequests", options: {}, I: ListQualificationRequestsRequest, O: ListQualificationRequestsResponse }
]);
