// @generated by protobuf-ts 2.9.3 with parameter optimize_speed,long_type_bigint
// @generated from protobuf file "services/jobs/timeclock.proto" (package "services.jobs", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Colleague } from "../../resources/jobs/colleagues";
import { TimeclockWeeklyStats } from "../../resources/jobs/timeclock";
import { TimeclockStats } from "../../resources/jobs/timeclock";
import { TimeclockEntry } from "../../resources/jobs/timeclock";
import { PaginationResponse } from "../../resources/common/database/database";
import { Timestamp } from "../../resources/timestamp/timestamp";
import { PaginationRequest } from "../../resources/common/database/database";
// Time Clock

/**
 * @generated from protobuf message services.jobs.ListTimeclockRequest
 */
export interface ListTimeclockRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * Search
     *
     * @generated from protobuf field: repeated int32 user_ids = 2;
     */
    userIds: number[];
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp from = 3;
     */
    from?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp to = 4;
     */
    to?: Timestamp;
    /**
     * @generated from protobuf field: optional bool per_day = 5;
     */
    perDay?: boolean;
}
/**
 * @generated from protobuf message services.jobs.ListTimeclockResponse
 */
export interface ListTimeclockResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.TimeclockEntry entries = 2;
     */
    entries: TimeclockEntry[];
    /**
     * @generated from protobuf field: resources.jobs.TimeclockStats stats = 3;
     */
    stats?: TimeclockStats;
    /**
     * @generated from protobuf field: repeated resources.jobs.TimeclockWeeklyStats weekly = 4;
     */
    weekly: TimeclockWeeklyStats[];
}
/**
 * @generated from protobuf message services.jobs.GetTimeclockStatsRequest
 */
export interface GetTimeclockStatsRequest {
    /**
     * @generated from protobuf field: optional int32 user_id = 1;
     */
    userId?: number;
}
/**
 * @generated from protobuf message services.jobs.GetTimeclockStatsResponse
 */
export interface GetTimeclockStatsResponse {
    /**
     * @generated from protobuf field: resources.jobs.TimeclockStats stats = 1;
     */
    stats?: TimeclockStats;
    /**
     * @generated from protobuf field: repeated resources.jobs.TimeclockWeeklyStats weekly = 2;
     */
    weekly: TimeclockWeeklyStats[];
}
/**
 * @generated from protobuf message services.jobs.ListInactiveEmployeesRequest
 */
export interface ListInactiveEmployeesRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: int64 days = 2;
     */
    days: bigint;
}
/**
 * @generated from protobuf message services.jobs.ListInactiveEmployeesResponse
 */
export interface ListInactiveEmployeesResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.Colleague colleagues = 2;
     */
    colleagues: Colleague[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListTimeclockRequest$Type extends MessageType<ListTimeclockRequest> {
    constructor() {
        super("services.jobs.ListTimeclockRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "from", kind: "message", T: () => Timestamp },
            { no: 4, name: "to", kind: "message", T: () => Timestamp },
            { no: 5, name: "per_day", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListTimeclockRequest>): ListTimeclockRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListTimeclockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTimeclockRequest): ListTimeclockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated int32 user_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int32());
                    else
                        message.userIds.push(reader.int32());
                    break;
                case /* optional resources.timestamp.Timestamp from */ 3:
                    message.from = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.from);
                    break;
                case /* optional resources.timestamp.Timestamp to */ 4:
                    message.to = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.to);
                    break;
                case /* optional bool per_day */ 5:
                    message.perDay = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTimeclockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 user_ids = 2; */
        if (message.userIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int32(message.userIds[i]);
            writer.join();
        }
        /* optional resources.timestamp.Timestamp from = 3; */
        if (message.from)
            Timestamp.internalBinaryWrite(message.from, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp to = 4; */
        if (message.to)
            Timestamp.internalBinaryWrite(message.to, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional bool per_day = 5; */
        if (message.perDay !== undefined)
            writer.tag(5, WireType.Varint).bool(message.perDay);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListTimeclockRequest
 */
export const ListTimeclockRequest = new ListTimeclockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTimeclockResponse$Type extends MessageType<ListTimeclockResponse> {
    constructor() {
        super("services.jobs.ListTimeclockResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TimeclockEntry },
            { no: 3, name: "stats", kind: "message", T: () => TimeclockStats },
            { no: 4, name: "weekly", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TimeclockWeeklyStats }
        ]);
    }
    create(value?: PartialMessage<ListTimeclockResponse>): ListTimeclockResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        message.weekly = [];
        if (value !== undefined)
            reflectionMergePartial<ListTimeclockResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTimeclockResponse): ListTimeclockResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.TimeclockEntry entries */ 2:
                    message.entries.push(TimeclockEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* resources.jobs.TimeclockStats stats */ 3:
                    message.stats = TimeclockStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* repeated resources.jobs.TimeclockWeeklyStats weekly */ 4:
                    message.weekly.push(TimeclockWeeklyStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTimeclockResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.TimeclockEntry entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            TimeclockEntry.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.jobs.TimeclockStats stats = 3; */
        if (message.stats)
            TimeclockStats.internalBinaryWrite(message.stats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.TimeclockWeeklyStats weekly = 4; */
        for (let i = 0; i < message.weekly.length; i++)
            TimeclockWeeklyStats.internalBinaryWrite(message.weekly[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListTimeclockResponse
 */
export const ListTimeclockResponse = new ListTimeclockResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTimeclockStatsRequest$Type extends MessageType<GetTimeclockStatsRequest> {
    constructor() {
        super("services.jobs.GetTimeclockStatsRequest", [
            { no: 1, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetTimeclockStatsRequest>): GetTimeclockStatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTimeclockStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTimeclockStatsRequest): GetTimeclockStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTimeclockStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 user_id = 1; */
        if (message.userId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetTimeclockStatsRequest
 */
export const GetTimeclockStatsRequest = new GetTimeclockStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTimeclockStatsResponse$Type extends MessageType<GetTimeclockStatsResponse> {
    constructor() {
        super("services.jobs.GetTimeclockStatsResponse", [
            { no: 1, name: "stats", kind: "message", T: () => TimeclockStats },
            { no: 2, name: "weekly", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TimeclockWeeklyStats }
        ]);
    }
    create(value?: PartialMessage<GetTimeclockStatsResponse>): GetTimeclockStatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.weekly = [];
        if (value !== undefined)
            reflectionMergePartial<GetTimeclockStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTimeclockStatsResponse): GetTimeclockStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.TimeclockStats stats */ 1:
                    message.stats = TimeclockStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* repeated resources.jobs.TimeclockWeeklyStats weekly */ 2:
                    message.weekly.push(TimeclockWeeklyStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTimeclockStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.TimeclockStats stats = 1; */
        if (message.stats)
            TimeclockStats.internalBinaryWrite(message.stats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.TimeclockWeeklyStats weekly = 2; */
        for (let i = 0; i < message.weekly.length; i++)
            TimeclockWeeklyStats.internalBinaryWrite(message.weekly[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetTimeclockStatsResponse
 */
export const GetTimeclockStatsResponse = new GetTimeclockStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListInactiveEmployeesRequest$Type extends MessageType<ListInactiveEmployeesRequest> {
    constructor() {
        super("services.jobs.ListInactiveEmployeesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "days", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "validate.rules": { int64: { gte: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<ListInactiveEmployeesRequest>): ListInactiveEmployeesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.days = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListInactiveEmployeesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListInactiveEmployeesRequest): ListInactiveEmployeesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* int64 days */ 2:
                    message.days = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListInactiveEmployeesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 days = 2; */
        if (message.days !== 0n)
            writer.tag(2, WireType.Varint).int64(message.days);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListInactiveEmployeesRequest
 */
export const ListInactiveEmployeesRequest = new ListInactiveEmployeesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListInactiveEmployeesResponse$Type extends MessageType<ListInactiveEmployeesResponse> {
    constructor() {
        super("services.jobs.ListInactiveEmployeesResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "colleagues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Colleague }
        ]);
    }
    create(value?: PartialMessage<ListInactiveEmployeesResponse>): ListInactiveEmployeesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.colleagues = [];
        if (value !== undefined)
            reflectionMergePartial<ListInactiveEmployeesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListInactiveEmployeesResponse): ListInactiveEmployeesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.Colleague colleagues */ 2:
                    message.colleagues.push(Colleague.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListInactiveEmployeesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.Colleague colleagues = 2; */
        for (let i = 0; i < message.colleagues.length; i++)
            Colleague.internalBinaryWrite(message.colleagues[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListInactiveEmployeesResponse
 */
export const ListInactiveEmployeesResponse = new ListInactiveEmployeesResponse$Type();
/**
 * @generated ServiceType for protobuf service services.jobs.JobsTimeclockService
 */
export const JobsTimeclockService = new ServiceType("services.jobs.JobsTimeclockService", [
    { name: "ListTimeclock", options: {}, I: ListTimeclockRequest, O: ListTimeclockResponse },
    { name: "GetTimeclockStats", options: {}, I: GetTimeclockStatsRequest, O: GetTimeclockStatsResponse },
    { name: "ListInactiveEmployees", options: {}, I: ListInactiveEmployeesRequest, O: ListInactiveEmployeesResponse }
]);
