// @generated by protobuf-ts 2.9.3 with parameter optimize_speed,long_type_bigint
// @generated from protobuf file "services/jobs/jobs.proto" (package "services.jobs", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { User } from "../../resources/users/users";
import { PaginationResponse } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
// Colleagues

/**
 * @generated from protobuf message services.jobs.ListColleaguesRequest
 */
export interface ListColleaguesRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * Search params
     *
     * @generated from protobuf field: string search_name = 2;
     */
    searchName: string;
}
/**
 * @generated from protobuf message services.jobs.ListColleaguesResponse
 */
export interface ListColleaguesResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.users.User users = 2;
     */
    users: User[];
}
/**
 * @generated from protobuf message services.jobs.GetMOTDRequest
 */
export interface GetMOTDRequest {
}
/**
 * @generated from protobuf message services.jobs.GetMOTDResponse
 */
export interface GetMOTDResponse {
    /**
     * @generated from protobuf field: string motd = 1;
     */
    motd: string;
}
/**
 * @generated from protobuf message services.jobs.SetMOTDRequest
 */
export interface SetMOTDRequest {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string motd = 1;
     */
    motd: string;
}
/**
 * @generated from protobuf message services.jobs.SetMOTDResponse
 */
export interface SetMOTDResponse {
    /**
     * @generated from protobuf field: string motd = 1;
     */
    motd: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListColleaguesRequest$Type extends MessageType<ListColleaguesRequest> {
    constructor() {
        super("services.jobs.ListColleaguesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "search_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<ListColleaguesRequest>): ListColleaguesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchName = "";
        if (value !== undefined)
            reflectionMergePartial<ListColleaguesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListColleaguesRequest): ListColleaguesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* string search_name */ 2:
                    message.searchName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListColleaguesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string search_name = 2; */
        if (message.searchName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.searchName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListColleaguesRequest
 */
export const ListColleaguesRequest = new ListColleaguesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListColleaguesResponse$Type extends MessageType<ListColleaguesResponse> {
    constructor() {
        super("services.jobs.ListColleaguesResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<ListColleaguesResponse>): ListColleaguesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<ListColleaguesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListColleaguesResponse): ListColleaguesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.users.User users */ 2:
                    message.users.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListColleaguesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.users.User users = 2; */
        for (let i = 0; i < message.users.length; i++)
            User.internalBinaryWrite(message.users[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListColleaguesResponse
 */
export const ListColleaguesResponse = new ListColleaguesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMOTDRequest$Type extends MessageType<GetMOTDRequest> {
    constructor() {
        super("services.jobs.GetMOTDRequest", []);
    }
    create(value?: PartialMessage<GetMOTDRequest>): GetMOTDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMOTDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMOTDRequest): GetMOTDRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetMOTDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetMOTDRequest
 */
export const GetMOTDRequest = new GetMOTDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMOTDResponse$Type extends MessageType<GetMOTDResponse> {
    constructor() {
        super("services.jobs.GetMOTDResponse", [
            { no: 1, name: "motd", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetMOTDResponse>): GetMOTDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.motd = "";
        if (value !== undefined)
            reflectionMergePartial<GetMOTDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMOTDResponse): GetMOTDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string motd */ 1:
                    message.motd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMOTDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string motd = 1; */
        if (message.motd !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.motd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetMOTDResponse
 */
export const GetMOTDResponse = new GetMOTDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMOTDRequest$Type extends MessageType<SetMOTDRequest> {
    constructor() {
        super("services.jobs.SetMOTDRequest", [
            { no: 1, name: "motd", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "1024" } } } }
        ]);
    }
    create(value?: PartialMessage<SetMOTDRequest>): SetMOTDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.motd = "";
        if (value !== undefined)
            reflectionMergePartial<SetMOTDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetMOTDRequest): SetMOTDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string motd */ 1:
                    message.motd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetMOTDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string motd = 1; */
        if (message.motd !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.motd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.SetMOTDRequest
 */
export const SetMOTDRequest = new SetMOTDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMOTDResponse$Type extends MessageType<SetMOTDResponse> {
    constructor() {
        super("services.jobs.SetMOTDResponse", [
            { no: 1, name: "motd", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetMOTDResponse>): SetMOTDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.motd = "";
        if (value !== undefined)
            reflectionMergePartial<SetMOTDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetMOTDResponse): SetMOTDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string motd */ 1:
                    message.motd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetMOTDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string motd = 1; */
        if (message.motd !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.motd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.SetMOTDResponse
 */
export const SetMOTDResponse = new SetMOTDResponse$Type();
/**
 * @generated ServiceType for protobuf service services.jobs.JobsService
 */
export const JobsService = new ServiceType("services.jobs.JobsService", [
    { name: "ListColleagues", options: {}, I: ListColleaguesRequest, O: ListColleaguesResponse },
    { name: "GetMOTD", options: {}, I: GetMOTDRequest, O: GetMOTDResponse },
    { name: "SetMOTD", options: {}, I: SetMOTDRequest, O: SetMOTDResponse }
]);
