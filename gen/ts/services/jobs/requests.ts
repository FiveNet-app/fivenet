// @generated by protobuf-ts 2.9.3 with parameter optimize_speed,long_type_bigint
// @generated from protobuf file "services/jobs/requests.proto" (package "services.jobs", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RequestComment } from "../../resources/jobs/requests";
import { RequestType } from "../../resources/jobs/requests";
import { Request } from "../../resources/jobs/requests";
import { PaginationResponse } from "../../resources/common/database/database";
import { Timestamp } from "../../resources/timestamp/timestamp";
import { PaginationRequest } from "../../resources/common/database/database";
// Requests

/**
 * @generated from protobuf message services.jobs.ListRequestsRequest
 */
export interface ListRequestsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * Search
     *
     * @generated from protobuf field: repeated int32 user_ids = 2;
     */
    userIds: number[];
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp from = 3;
     */
    from?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp to = 4;
     */
    to?: Timestamp;
    /**
     * @generated from protobuf field: optional string search = 5;
     */
    search?: string;
}
/**
 * @generated from protobuf message services.jobs.ListRequestsResponse
 */
export interface ListRequestsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.Request entries = 2;
     */
    entries: Request[];
}
/**
 * @generated from protobuf message services.jobs.CreateRequestRequest
 */
export interface CreateRequestRequest {
    /**
     * @generated from protobuf field: resources.jobs.Request entry = 1;
     */
    entry?: Request;
}
/**
 * @generated from protobuf message services.jobs.CreateRequestResponse
 */
export interface CreateRequestResponse {
    /**
     * @generated from protobuf field: resources.jobs.Request entry = 1;
     */
    entry?: Request;
}
/**
 * @generated from protobuf message services.jobs.UpdateRequestRequest
 */
export interface UpdateRequestRequest {
    /**
     * @generated from protobuf field: resources.jobs.Request entry = 1;
     */
    entry?: Request;
}
/**
 * @generated from protobuf message services.jobs.UpdateRequestResponse
 */
export interface UpdateRequestResponse {
    /**
     * @generated from protobuf field: resources.jobs.Request entry = 1;
     */
    entry?: Request;
}
/**
 * @generated from protobuf message services.jobs.DeleteRequestRequest
 */
export interface DeleteRequestRequest {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
}
/**
 * @generated from protobuf message services.jobs.DeleteRequestResponse
 */
export interface DeleteRequestResponse {
}
/**
 * @generated from protobuf message services.jobs.ApproveRequestRequest
 */
export interface ApproveRequestRequest {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: bool approve = 2;
     */
    approve: boolean;
}
/**
 * @generated from protobuf message services.jobs.ApproveRequestResponse
 */
export interface ApproveRequestResponse {
}
/**
 * @generated from protobuf message services.jobs.RequestsCloseRequest
 */
export interface RequestsCloseRequest {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
    /**
     * @generated from protobuf field: bool close = 2;
     */
    close: boolean;
}
/**
 * @generated from protobuf message services.jobs.RequestsCloseResponse
 */
export interface RequestsCloseResponse {
}
/**
 * @generated from protobuf message services.jobs.ListRequestTypesRequest
 */
export interface ListRequestTypesRequest {
}
/**
 * @generated from protobuf message services.jobs.ListRequestTypesResponse
 */
export interface ListRequestTypesResponse {
    /**
     * @generated from protobuf field: repeated resources.jobs.RequestType types = 1;
     */
    types: RequestType[];
}
/**
 * @generated from protobuf message services.jobs.CreateOrUpdateRequestTypeRequest
 */
export interface CreateOrUpdateRequestTypeRequest {
    /**
     * @generated from protobuf field: resources.jobs.RequestType request_type = 1;
     */
    requestType?: RequestType;
}
/**
 * @generated from protobuf message services.jobs.CreateOrUpdateRequestTypeResponse
 */
export interface CreateOrUpdateRequestTypeResponse {
    /**
     * @generated from protobuf field: resources.jobs.RequestType request_type = 1;
     */
    requestType?: RequestType;
}
/**
 * @generated from protobuf message services.jobs.DeleteRequestTypeRequest
 */
export interface DeleteRequestTypeRequest {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
}
/**
 * @generated from protobuf message services.jobs.DeleteRequestTypeResponse
 */
export interface DeleteRequestTypeResponse {
}
/**
 * @generated from protobuf message services.jobs.ListRequestCommentsRequest
 */
export interface ListRequestCommentsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: uint64 request_id = 2 [jstype = JS_STRING];
     */
    requestId: string;
}
/**
 * @generated from protobuf message services.jobs.ListRequestCommentsResponse
 */
export interface ListRequestCommentsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.RequestComment comments = 2;
     */
    comments: RequestComment[];
}
/**
 * @generated from protobuf message services.jobs.PostRequestCommentRequest
 */
export interface PostRequestCommentRequest {
    /**
     * @generated from protobuf field: resources.jobs.RequestComment comment = 1;
     */
    comment?: RequestComment;
}
/**
 * @generated from protobuf message services.jobs.PostRequestCommentResponse
 */
export interface PostRequestCommentResponse {
    /**
     * @generated from protobuf field: resources.jobs.RequestComment comment = 1;
     */
    comment?: RequestComment;
}
/**
 * @generated from protobuf message services.jobs.DeleteRequestCommentRequest
 */
export interface DeleteRequestCommentRequest {
    /**
     * @generated from protobuf field: uint64 id = 1 [jstype = JS_STRING];
     */
    id: string;
}
/**
 * @generated from protobuf message services.jobs.DeleteRequestCommentResponse
 */
export interface DeleteRequestCommentResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ListRequestsRequest$Type extends MessageType<ListRequestsRequest> {
    constructor() {
        super("services.jobs.ListRequestsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "from", kind: "message", T: () => Timestamp },
            { no: 4, name: "to", kind: "message", T: () => Timestamp },
            { no: 5, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<ListRequestsRequest>): ListRequestsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListRequestsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequestsRequest): ListRequestsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated int32 user_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int32());
                    else
                        message.userIds.push(reader.int32());
                    break;
                case /* optional resources.timestamp.Timestamp from */ 3:
                    message.from = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.from);
                    break;
                case /* optional resources.timestamp.Timestamp to */ 4:
                    message.to = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.to);
                    break;
                case /* optional string search */ 5:
                    message.search = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequestsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 user_ids = 2; */
        if (message.userIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int32(message.userIds[i]);
            writer.join();
        }
        /* optional resources.timestamp.Timestamp from = 3; */
        if (message.from)
            Timestamp.internalBinaryWrite(message.from, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp to = 4; */
        if (message.to)
            Timestamp.internalBinaryWrite(message.to, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional string search = 5; */
        if (message.search !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.search);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListRequestsRequest
 */
export const ListRequestsRequest = new ListRequestsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequestsResponse$Type extends MessageType<ListRequestsResponse> {
    constructor() {
        super("services.jobs.ListRequestsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Request }
        ]);
    }
    create(value?: PartialMessage<ListRequestsResponse>): ListRequestsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<ListRequestsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequestsResponse): ListRequestsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.Request entries */ 2:
                    message.entries.push(Request.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequestsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.Request entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            Request.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListRequestsResponse
 */
export const ListRequestsResponse = new ListRequestsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRequestRequest$Type extends MessageType<CreateRequestRequest> {
    constructor() {
        super("services.jobs.CreateRequestRequest", [
            { no: 1, name: "entry", kind: "message", T: () => Request, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateRequestRequest>): CreateRequestRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateRequestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRequestRequest): CreateRequestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Request entry */ 1:
                    message.entry = Request.internalBinaryRead(reader, reader.uint32(), options, message.entry);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRequestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Request entry = 1; */
        if (message.entry)
            Request.internalBinaryWrite(message.entry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.CreateRequestRequest
 */
export const CreateRequestRequest = new CreateRequestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRequestResponse$Type extends MessageType<CreateRequestResponse> {
    constructor() {
        super("services.jobs.CreateRequestResponse", [
            { no: 1, name: "entry", kind: "message", T: () => Request }
        ]);
    }
    create(value?: PartialMessage<CreateRequestResponse>): CreateRequestResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateRequestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRequestResponse): CreateRequestResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Request entry */ 1:
                    message.entry = Request.internalBinaryRead(reader, reader.uint32(), options, message.entry);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRequestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Request entry = 1; */
        if (message.entry)
            Request.internalBinaryWrite(message.entry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.CreateRequestResponse
 */
export const CreateRequestResponse = new CreateRequestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRequestRequest$Type extends MessageType<UpdateRequestRequest> {
    constructor() {
        super("services.jobs.UpdateRequestRequest", [
            { no: 1, name: "entry", kind: "message", T: () => Request, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<UpdateRequestRequest>): UpdateRequestRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateRequestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRequestRequest): UpdateRequestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Request entry */ 1:
                    message.entry = Request.internalBinaryRead(reader, reader.uint32(), options, message.entry);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRequestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Request entry = 1; */
        if (message.entry)
            Request.internalBinaryWrite(message.entry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.UpdateRequestRequest
 */
export const UpdateRequestRequest = new UpdateRequestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRequestResponse$Type extends MessageType<UpdateRequestResponse> {
    constructor() {
        super("services.jobs.UpdateRequestResponse", [
            { no: 1, name: "entry", kind: "message", T: () => Request }
        ]);
    }
    create(value?: PartialMessage<UpdateRequestResponse>): UpdateRequestResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateRequestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRequestResponse): UpdateRequestResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Request entry */ 1:
                    message.entry = Request.internalBinaryRead(reader, reader.uint32(), options, message.entry);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRequestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Request entry = 1; */
        if (message.entry)
            Request.internalBinaryWrite(message.entry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.UpdateRequestResponse
 */
export const UpdateRequestResponse = new UpdateRequestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequestRequest$Type extends MessageType<DeleteRequestRequest> {
    constructor() {
        super("services.jobs.DeleteRequestRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRequestRequest>): DeleteRequestRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        if (value !== undefined)
            reflectionMergePartial<DeleteRequestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequestRequest): DeleteRequestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.DeleteRequestRequest
 */
export const DeleteRequestRequest = new DeleteRequestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequestResponse$Type extends MessageType<DeleteRequestResponse> {
    constructor() {
        super("services.jobs.DeleteRequestResponse", []);
    }
    create(value?: PartialMessage<DeleteRequestResponse>): DeleteRequestResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteRequestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequestResponse): DeleteRequestResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteRequestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.DeleteRequestResponse
 */
export const DeleteRequestResponse = new DeleteRequestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApproveRequestRequest$Type extends MessageType<ApproveRequestRequest> {
    constructor() {
        super("services.jobs.ApproveRequestRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "approve", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ApproveRequestRequest>): ApproveRequestRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.approve = false;
        if (value !== undefined)
            reflectionMergePartial<ApproveRequestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApproveRequestRequest): ApproveRequestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* bool approve */ 2:
                    message.approve = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApproveRequestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* bool approve = 2; */
        if (message.approve !== false)
            writer.tag(2, WireType.Varint).bool(message.approve);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ApproveRequestRequest
 */
export const ApproveRequestRequest = new ApproveRequestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApproveRequestResponse$Type extends MessageType<ApproveRequestResponse> {
    constructor() {
        super("services.jobs.ApproveRequestResponse", []);
    }
    create(value?: PartialMessage<ApproveRequestResponse>): ApproveRequestResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ApproveRequestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApproveRequestResponse): ApproveRequestResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ApproveRequestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ApproveRequestResponse
 */
export const ApproveRequestResponse = new ApproveRequestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestsCloseRequest$Type extends MessageType<RequestsCloseRequest> {
    constructor() {
        super("services.jobs.RequestsCloseRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "close", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RequestsCloseRequest>): RequestsCloseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.close = false;
        if (value !== undefined)
            reflectionMergePartial<RequestsCloseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestsCloseRequest): RequestsCloseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* bool close */ 2:
                    message.close = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestsCloseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* bool close = 2; */
        if (message.close !== false)
            writer.tag(2, WireType.Varint).bool(message.close);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.RequestsCloseRequest
 */
export const RequestsCloseRequest = new RequestsCloseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestsCloseResponse$Type extends MessageType<RequestsCloseResponse> {
    constructor() {
        super("services.jobs.RequestsCloseResponse", []);
    }
    create(value?: PartialMessage<RequestsCloseResponse>): RequestsCloseResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RequestsCloseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestsCloseResponse): RequestsCloseResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RequestsCloseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.RequestsCloseResponse
 */
export const RequestsCloseResponse = new RequestsCloseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequestTypesRequest$Type extends MessageType<ListRequestTypesRequest> {
    constructor() {
        super("services.jobs.ListRequestTypesRequest", []);
    }
    create(value?: PartialMessage<ListRequestTypesRequest>): ListRequestTypesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListRequestTypesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequestTypesRequest): ListRequestTypesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListRequestTypesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListRequestTypesRequest
 */
export const ListRequestTypesRequest = new ListRequestTypesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequestTypesResponse$Type extends MessageType<ListRequestTypesResponse> {
    constructor() {
        super("services.jobs.ListRequestTypesResponse", [
            { no: 1, name: "types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RequestType }
        ]);
    }
    create(value?: PartialMessage<ListRequestTypesResponse>): ListRequestTypesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.types = [];
        if (value !== undefined)
            reflectionMergePartial<ListRequestTypesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequestTypesResponse): ListRequestTypesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.jobs.RequestType types */ 1:
                    message.types.push(RequestType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequestTypesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.jobs.RequestType types = 1; */
        for (let i = 0; i < message.types.length; i++)
            RequestType.internalBinaryWrite(message.types[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListRequestTypesResponse
 */
export const ListRequestTypesResponse = new ListRequestTypesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateRequestTypeRequest$Type extends MessageType<CreateOrUpdateRequestTypeRequest> {
    constructor() {
        super("services.jobs.CreateOrUpdateRequestTypeRequest", [
            { no: 1, name: "request_type", kind: "message", T: () => RequestType }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateRequestTypeRequest>): CreateOrUpdateRequestTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateRequestTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateRequestTypeRequest): CreateOrUpdateRequestTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.RequestType request_type */ 1:
                    message.requestType = RequestType.internalBinaryRead(reader, reader.uint32(), options, message.requestType);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateRequestTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.RequestType request_type = 1; */
        if (message.requestType)
            RequestType.internalBinaryWrite(message.requestType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.CreateOrUpdateRequestTypeRequest
 */
export const CreateOrUpdateRequestTypeRequest = new CreateOrUpdateRequestTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateRequestTypeResponse$Type extends MessageType<CreateOrUpdateRequestTypeResponse> {
    constructor() {
        super("services.jobs.CreateOrUpdateRequestTypeResponse", [
            { no: 1, name: "request_type", kind: "message", T: () => RequestType }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateRequestTypeResponse>): CreateOrUpdateRequestTypeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateRequestTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateRequestTypeResponse): CreateOrUpdateRequestTypeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.RequestType request_type */ 1:
                    message.requestType = RequestType.internalBinaryRead(reader, reader.uint32(), options, message.requestType);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateRequestTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.RequestType request_type = 1; */
        if (message.requestType)
            RequestType.internalBinaryWrite(message.requestType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.CreateOrUpdateRequestTypeResponse
 */
export const CreateOrUpdateRequestTypeResponse = new CreateOrUpdateRequestTypeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequestTypeRequest$Type extends MessageType<DeleteRequestTypeRequest> {
    constructor() {
        super("services.jobs.DeleteRequestTypeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRequestTypeRequest>): DeleteRequestTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        if (value !== undefined)
            reflectionMergePartial<DeleteRequestTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequestTypeRequest): DeleteRequestTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequestTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.DeleteRequestTypeRequest
 */
export const DeleteRequestTypeRequest = new DeleteRequestTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequestTypeResponse$Type extends MessageType<DeleteRequestTypeResponse> {
    constructor() {
        super("services.jobs.DeleteRequestTypeResponse", []);
    }
    create(value?: PartialMessage<DeleteRequestTypeResponse>): DeleteRequestTypeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteRequestTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequestTypeResponse): DeleteRequestTypeResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteRequestTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.DeleteRequestTypeResponse
 */
export const DeleteRequestTypeResponse = new DeleteRequestTypeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequestCommentsRequest$Type extends MessageType<ListRequestCommentsRequest> {
    constructor() {
        super("services.jobs.ListRequestCommentsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "request_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<ListRequestCommentsRequest>): ListRequestCommentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "0";
        if (value !== undefined)
            reflectionMergePartial<ListRequestCommentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequestCommentsRequest): ListRequestCommentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* uint64 request_id = 2 [jstype = JS_STRING];*/ 2:
                    message.requestId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequestCommentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 request_id = 2 [jstype = JS_STRING]; */
        if (message.requestId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.requestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListRequestCommentsRequest
 */
export const ListRequestCommentsRequest = new ListRequestCommentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequestCommentsResponse$Type extends MessageType<ListRequestCommentsResponse> {
    constructor() {
        super("services.jobs.ListRequestCommentsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "comments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RequestComment }
        ]);
    }
    create(value?: PartialMessage<ListRequestCommentsResponse>): ListRequestCommentsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.comments = [];
        if (value !== undefined)
            reflectionMergePartial<ListRequestCommentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequestCommentsResponse): ListRequestCommentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.RequestComment comments */ 2:
                    message.comments.push(RequestComment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequestCommentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.RequestComment comments = 2; */
        for (let i = 0; i < message.comments.length; i++)
            RequestComment.internalBinaryWrite(message.comments[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListRequestCommentsResponse
 */
export const ListRequestCommentsResponse = new ListRequestCommentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostRequestCommentRequest$Type extends MessageType<PostRequestCommentRequest> {
    constructor() {
        super("services.jobs.PostRequestCommentRequest", [
            { no: 1, name: "comment", kind: "message", T: () => RequestComment, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<PostRequestCommentRequest>): PostRequestCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PostRequestCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostRequestCommentRequest): PostRequestCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.RequestComment comment */ 1:
                    message.comment = RequestComment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostRequestCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.RequestComment comment = 1; */
        if (message.comment)
            RequestComment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.PostRequestCommentRequest
 */
export const PostRequestCommentRequest = new PostRequestCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostRequestCommentResponse$Type extends MessageType<PostRequestCommentResponse> {
    constructor() {
        super("services.jobs.PostRequestCommentResponse", [
            { no: 1, name: "comment", kind: "message", T: () => RequestComment, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<PostRequestCommentResponse>): PostRequestCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PostRequestCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostRequestCommentResponse): PostRequestCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.RequestComment comment */ 1:
                    message.comment = RequestComment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostRequestCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.RequestComment comment = 1; */
        if (message.comment)
            RequestComment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.PostRequestCommentResponse
 */
export const PostRequestCommentResponse = new PostRequestCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequestCommentRequest$Type extends MessageType<DeleteRequestCommentRequest> {
    constructor() {
        super("services.jobs.DeleteRequestCommentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRequestCommentRequest>): DeleteRequestCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        if (value !== undefined)
            reflectionMergePartial<DeleteRequestCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequestCommentRequest): DeleteRequestCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id = 1 [jstype = JS_STRING];*/ 1:
                    message.id = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequestCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1 [jstype = JS_STRING]; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.DeleteRequestCommentRequest
 */
export const DeleteRequestCommentRequest = new DeleteRequestCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequestCommentResponse$Type extends MessageType<DeleteRequestCommentResponse> {
    constructor() {
        super("services.jobs.DeleteRequestCommentResponse", []);
    }
    create(value?: PartialMessage<DeleteRequestCommentResponse>): DeleteRequestCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteRequestCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequestCommentResponse): DeleteRequestCommentResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteRequestCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.DeleteRequestCommentResponse
 */
export const DeleteRequestCommentResponse = new DeleteRequestCommentResponse$Type();
/**
 * @generated ServiceType for protobuf service services.jobs.JobsRequestsService
 */
export const JobsRequestsService = new ServiceType("services.jobs.JobsRequestsService", [
    { name: "ListRequests", options: {}, I: ListRequestsRequest, O: ListRequestsResponse },
    { name: "CreateRequest", options: {}, I: CreateRequestRequest, O: CreateRequestResponse },
    { name: "UpdateRequest", options: {}, I: UpdateRequestRequest, O: UpdateRequestResponse },
    { name: "DeleteRequest", options: {}, I: DeleteRequestRequest, O: DeleteRequestResponse },
    { name: "ListRequestTypes", options: {}, I: ListRequestTypesRequest, O: ListRequestTypesResponse },
    { name: "CreateOrUpdateRequestType", options: {}, I: CreateOrUpdateRequestTypeRequest, O: CreateOrUpdateRequestTypeResponse },
    { name: "DeleteRequestType", options: {}, I: DeleteRequestTypeRequest, O: DeleteRequestTypeResponse },
    { name: "ListRequestComments", options: {}, I: ListRequestCommentsRequest, O: ListRequestCommentsResponse },
    { name: "PostRequestComment", options: {}, I: PostRequestCommentRequest, O: PostRequestCommentResponse },
    { name: "DeleteRequestComment", options: {}, I: DeleteRequestCommentRequest, O: DeleteRequestCommentResponse }
]);
