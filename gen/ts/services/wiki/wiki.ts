// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/wiki/wiki.proto" (package "services.wiki", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Page } from "../../resources/wiki/page";
import { PaginationResponse } from "../../resources/common/database/database";
import { Sort } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
/**
 * @generated from protobuf message services.wiki.ListPagesRequest
 */
export interface ListPagesRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2;
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: string prefix = 3;
     */
    prefix: string;
}
/**
 * @generated from protobuf message services.wiki.ListPagesResponse
 */
export interface ListPagesResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.wiki.Page pages = 2;
     */
    pages: Page[];
}
/**
 * @generated from protobuf message services.wiki.GetPageRequest
 */
export interface GetPageRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message services.wiki.GetPageResponse
 */
export interface GetPageResponse {
    /**
     * @generated from protobuf field: resources.wiki.Page page = 1;
     */
    page?: Page;
}
/**
 * @generated from protobuf message services.wiki.CreateOrUpdatePageRequest
 */
export interface CreateOrUpdatePageRequest {
    /**
     * @generated from protobuf field: resources.wiki.Page page = 1;
     */
    page?: Page;
}
/**
 * @generated from protobuf message services.wiki.CreateOrUpdatePageResponse
 */
export interface CreateOrUpdatePageResponse {
    /**
     * @generated from protobuf field: resources.wiki.Page page = 1;
     */
    page?: Page;
}
/**
 * @generated from protobuf message services.wiki.DeletePageRequest
 */
export interface DeletePageRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message services.wiki.DeletePageResponse
 */
export interface DeletePageResponse {
}
/**
 * @generated from protobuf message services.wiki.GetPageHistoryRequest
 */
export interface GetPageHistoryRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message services.wiki.GetPageHistoryResponse
 */
export interface GetPageHistoryResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ListPagesRequest$Type extends MessageType<ListPagesRequest> {
    constructor() {
        super("services.wiki.ListPagesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPagesRequest>): ListPagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.prefix = "";
        if (value !== undefined)
            reflectionMergePartial<ListPagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPagesRequest): ListPagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* string prefix */ 3:
                    message.prefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string prefix = 3; */
        if (message.prefix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.prefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.ListPagesRequest
 */
export const ListPagesRequest = new ListPagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPagesResponse$Type extends MessageType<ListPagesResponse> {
    constructor() {
        super("services.wiki.ListPagesResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Page }
        ]);
    }
    create(value?: PartialMessage<ListPagesResponse>): ListPagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pages = [];
        if (value !== undefined)
            reflectionMergePartial<ListPagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPagesResponse): ListPagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.wiki.Page pages */ 2:
                    message.pages.push(Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.wiki.Page pages = 2; */
        for (let i = 0; i < message.pages.length; i++)
            Page.internalBinaryWrite(message.pages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.ListPagesResponse
 */
export const ListPagesResponse = new ListPagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPageRequest$Type extends MessageType<GetPageRequest> {
    constructor() {
        super("services.wiki.GetPageRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPageRequest>): GetPageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetPageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPageRequest): GetPageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.GetPageRequest
 */
export const GetPageRequest = new GetPageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPageResponse$Type extends MessageType<GetPageResponse> {
    constructor() {
        super("services.wiki.GetPageResponse", [
            { no: 1, name: "page", kind: "message", T: () => Page }
        ]);
    }
    create(value?: PartialMessage<GetPageResponse>): GetPageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPageResponse): GetPageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.wiki.Page page */ 1:
                    message.page = Page.internalBinaryRead(reader, reader.uint32(), options, message.page);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.wiki.Page page = 1; */
        if (message.page)
            Page.internalBinaryWrite(message.page, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.GetPageResponse
 */
export const GetPageResponse = new GetPageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdatePageRequest$Type extends MessageType<CreateOrUpdatePageRequest> {
    constructor() {
        super("services.wiki.CreateOrUpdatePageRequest", [
            { no: 1, name: "page", kind: "message", T: () => Page }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdatePageRequest>): CreateOrUpdatePageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdatePageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdatePageRequest): CreateOrUpdatePageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.wiki.Page page */ 1:
                    message.page = Page.internalBinaryRead(reader, reader.uint32(), options, message.page);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdatePageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.wiki.Page page = 1; */
        if (message.page)
            Page.internalBinaryWrite(message.page, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.CreateOrUpdatePageRequest
 */
export const CreateOrUpdatePageRequest = new CreateOrUpdatePageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdatePageResponse$Type extends MessageType<CreateOrUpdatePageResponse> {
    constructor() {
        super("services.wiki.CreateOrUpdatePageResponse", [
            { no: 1, name: "page", kind: "message", T: () => Page }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdatePageResponse>): CreateOrUpdatePageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdatePageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdatePageResponse): CreateOrUpdatePageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.wiki.Page page */ 1:
                    message.page = Page.internalBinaryRead(reader, reader.uint32(), options, message.page);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdatePageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.wiki.Page page = 1; */
        if (message.page)
            Page.internalBinaryWrite(message.page, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.CreateOrUpdatePageResponse
 */
export const CreateOrUpdatePageResponse = new CreateOrUpdatePageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePageRequest$Type extends MessageType<DeletePageRequest> {
    constructor() {
        super("services.wiki.DeletePageRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePageRequest>): DeletePageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeletePageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePageRequest): DeletePageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.DeletePageRequest
 */
export const DeletePageRequest = new DeletePageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePageResponse$Type extends MessageType<DeletePageResponse> {
    constructor() {
        super("services.wiki.DeletePageResponse", []);
    }
    create(value?: PartialMessage<DeletePageResponse>): DeletePageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeletePageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePageResponse): DeletePageResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeletePageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.DeletePageResponse
 */
export const DeletePageResponse = new DeletePageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPageHistoryRequest$Type extends MessageType<GetPageHistoryRequest> {
    constructor() {
        super("services.wiki.GetPageHistoryRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPageHistoryRequest>): GetPageHistoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetPageHistoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPageHistoryRequest): GetPageHistoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPageHistoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.GetPageHistoryRequest
 */
export const GetPageHistoryRequest = new GetPageHistoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPageHistoryResponse$Type extends MessageType<GetPageHistoryResponse> {
    constructor() {
        super("services.wiki.GetPageHistoryResponse", []);
    }
    create(value?: PartialMessage<GetPageHistoryResponse>): GetPageHistoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPageHistoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPageHistoryResponse): GetPageHistoryResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPageHistoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.wiki.GetPageHistoryResponse
 */
export const GetPageHistoryResponse = new GetPageHistoryResponse$Type();
/**
 * @generated ServiceType for protobuf service services.wiki.WikiService
 */
export const WikiService = new ServiceType("services.wiki.WikiService", [
    { name: "ListPages", options: {}, I: ListPagesRequest, O: ListPagesResponse },
    { name: "GetPage", options: {}, I: GetPageRequest, O: GetPageResponse },
    { name: "CreateOrUpdatePage", options: {}, I: CreateOrUpdatePageRequest, O: CreateOrUpdatePageResponse },
    { name: "DeletePage", options: {}, I: DeletePageRequest, O: DeletePageResponse },
    { name: "GetPageHistory", options: {}, I: GetPageHistoryRequest, O: GetPageHistoryResponse }
]);
