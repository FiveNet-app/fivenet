// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/wiki/wiki.proto" (package "services.wiki", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WikiService } from "./wiki";
import type { GetPageHistoryResponse } from "./wiki";
import type { GetPageHistoryRequest } from "./wiki";
import type { DeletePageResponse } from "./wiki";
import type { DeletePageRequest } from "./wiki";
import type { CreateOrUpdatePageResponse } from "./wiki";
import type { CreateOrUpdatePageRequest } from "./wiki";
import type { GetPageResponse } from "./wiki";
import type { GetPageRequest } from "./wiki";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListPagesResponse } from "./wiki";
import type { ListPagesRequest } from "./wiki";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.wiki.WikiService
 */
export interface IWikiServiceClient {
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListPages(services.wiki.ListPagesRequest) returns (services.wiki.ListPagesResponse);
     */
    listPages(input: ListPagesRequest, options?: RpcOptions): UnaryCall<ListPagesRequest, ListPagesResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: GetPage(services.wiki.GetPageRequest) returns (services.wiki.GetPageResponse);
     */
    getPage(input: GetPageRequest, options?: RpcOptions): UnaryCall<GetPageRequest, GetPageResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdatePage(services.wiki.CreateOrUpdatePageRequest) returns (services.wiki.CreateOrUpdatePageResponse);
     */
    createOrUpdatePage(input: CreateOrUpdatePageRequest, options?: RpcOptions): UnaryCall<CreateOrUpdatePageRequest, CreateOrUpdatePageResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeletePage(services.wiki.DeletePageRequest) returns (services.wiki.DeletePageResponse);
     */
    deletePage(input: DeletePageRequest, options?: RpcOptions): UnaryCall<DeletePageRequest, DeletePageResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: GetPageHistory(services.wiki.GetPageHistoryRequest) returns (services.wiki.GetPageHistoryResponse);
     */
    getPageHistory(input: GetPageHistoryRequest, options?: RpcOptions): UnaryCall<GetPageHistoryRequest, GetPageHistoryResponse>;
}
/**
 * @generated from protobuf service services.wiki.WikiService
 */
export class WikiServiceClient implements IWikiServiceClient, ServiceInfo {
    typeName = WikiService.typeName;
    methods = WikiService.methods;
    options = WikiService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListPages(services.wiki.ListPagesRequest) returns (services.wiki.ListPagesResponse);
     */
    listPages(input: ListPagesRequest, options?: RpcOptions): UnaryCall<ListPagesRequest, ListPagesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListPagesRequest, ListPagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: GetPage(services.wiki.GetPageRequest) returns (services.wiki.GetPageResponse);
     */
    getPage(input: GetPageRequest, options?: RpcOptions): UnaryCall<GetPageRequest, GetPageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPageRequest, GetPageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdatePage(services.wiki.CreateOrUpdatePageRequest) returns (services.wiki.CreateOrUpdatePageResponse);
     */
    createOrUpdatePage(input: CreateOrUpdatePageRequest, options?: RpcOptions): UnaryCall<CreateOrUpdatePageRequest, CreateOrUpdatePageResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdatePageRequest, CreateOrUpdatePageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeletePage(services.wiki.DeletePageRequest) returns (services.wiki.DeletePageResponse);
     */
    deletePage(input: DeletePageRequest, options?: RpcOptions): UnaryCall<DeletePageRequest, DeletePageResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeletePageRequest, DeletePageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: GetPageHistory(services.wiki.GetPageHistoryRequest) returns (services.wiki.GetPageHistoryResponse);
     */
    getPageHistory(input: GetPageHistoryRequest, options?: RpcOptions): UnaryCall<GetPageHistoryRequest, GetPageHistoryResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPageHistoryRequest, GetPageHistoryResponse>("unary", this._transport, method, opt, input);
    }
}
