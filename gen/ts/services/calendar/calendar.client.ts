// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/calendar/calendar.proto" (package "services.calendar", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CalendarService } from "./calendar";
import type { RSVPCalendarEntryResponse } from "./calendar";
import type { RSVPCalendarEntryRequest } from "./calendar";
import type { ListCalendarEntryRSVPResponse } from "./calendar";
import type { ListCalendarEntryRSVPRequest } from "./calendar";
import type { ShareCalendarEntryResponse } from "./calendar";
import type { ShareCalendarEntryRequest } from "./calendar";
import type { DeleteCalendarEntriesResponse } from "./calendar";
import type { DeleteCalendarEntriesRequest } from "./calendar";
import type { CreateOrUpdateCalendarEntriesResponse } from "./calendar";
import type { CreateOrUpdateCalendarEntriesRequest } from "./calendar";
import type { GetCalendarEntryResponse } from "./calendar";
import type { GetCalendarEntryRequest } from "./calendar";
import type { DeleteCalendarResponse } from "./calendar";
import type { DeleteCalendarRequest } from "./calendar";
import type { CreateOrUpdateCalendarResponse } from "./calendar";
import type { CreateOrUpdateCalendarRequest } from "./calendar";
import type { GetCalendarResponse } from "./calendar";
import type { GetCalendarRequest } from "./calendar";
import type { ListCalendarsResponse } from "./calendar";
import type { ListCalendarsRequest } from "./calendar";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListCalendarEntriesResponse } from "./calendar";
import type { ListCalendarEntriesRequest } from "./calendar";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.calendar.CalendarService
 */
export interface ICalendarServiceClient {
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendarEntries(services.calendar.ListCalendarEntriesRequest) returns (services.calendar.ListCalendarEntriesResponse);
     */
    listCalendarEntries(input: ListCalendarEntriesRequest, options?: RpcOptions): UnaryCall<ListCalendarEntriesRequest, ListCalendarEntriesResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendars(services.calendar.ListCalendarsRequest) returns (services.calendar.ListCalendarsResponse);
     */
    listCalendars(input: ListCalendarsRequest, options?: RpcOptions): UnaryCall<ListCalendarsRequest, ListCalendarsResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetCalendar(services.calendar.GetCalendarRequest) returns (services.calendar.GetCalendarResponse);
     */
    getCalendar(input: GetCalendarRequest, options?: RpcOptions): UnaryCall<GetCalendarRequest, GetCalendarResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdateCalendar(services.calendar.CreateOrUpdateCalendarRequest) returns (services.calendar.CreateOrUpdateCalendarResponse);
     */
    createOrUpdateCalendar(input: CreateOrUpdateCalendarRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateCalendarRequest, CreateOrUpdateCalendarResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteCalendar(services.calendar.DeleteCalendarRequest) returns (services.calendar.DeleteCalendarResponse);
     */
    deleteCalendar(input: DeleteCalendarRequest, options?: RpcOptions): UnaryCall<DeleteCalendarRequest, DeleteCalendarResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetCalendarEntry(services.calendar.GetCalendarEntryRequest) returns (services.calendar.GetCalendarEntryResponse);
     */
    getCalendarEntry(input: GetCalendarEntryRequest, options?: RpcOptions): UnaryCall<GetCalendarEntryRequest, GetCalendarEntryResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdateCalendarEntries(services.calendar.CreateOrUpdateCalendarEntriesRequest) returns (services.calendar.CreateOrUpdateCalendarEntriesResponse);
     */
    createOrUpdateCalendarEntries(input: CreateOrUpdateCalendarEntriesRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateCalendarEntriesRequest, CreateOrUpdateCalendarEntriesResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteCalendarEntries(services.calendar.DeleteCalendarEntriesRequest) returns (services.calendar.DeleteCalendarEntriesResponse);
     */
    deleteCalendarEntries(input: DeleteCalendarEntriesRequest, options?: RpcOptions): UnaryCall<DeleteCalendarEntriesRequest, DeleteCalendarEntriesResponse>;
    /**
     * @perm: Name=CreateOrUpdateCalendarEntries
     *
     * @generated from protobuf rpc: ShareCalendarEntry(services.calendar.ShareCalendarEntryRequest) returns (services.calendar.ShareCalendarEntryResponse);
     */
    shareCalendarEntry(input: ShareCalendarEntryRequest, options?: RpcOptions): UnaryCall<ShareCalendarEntryRequest, ShareCalendarEntryResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendarEntryRSVP(services.calendar.ListCalendarEntryRSVPRequest) returns (services.calendar.ListCalendarEntryRSVPResponse);
     */
    listCalendarEntryRSVP(input: ListCalendarEntryRSVPRequest, options?: RpcOptions): UnaryCall<ListCalendarEntryRSVPRequest, ListCalendarEntryRSVPResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: RSVPCalendarEntry(services.calendar.RSVPCalendarEntryRequest) returns (services.calendar.RSVPCalendarEntryResponse);
     */
    rSVPCalendarEntry(input: RSVPCalendarEntryRequest, options?: RpcOptions): UnaryCall<RSVPCalendarEntryRequest, RSVPCalendarEntryResponse>;
}
/**
 * @generated from protobuf service services.calendar.CalendarService
 */
export class CalendarServiceClient implements ICalendarServiceClient, ServiceInfo {
    typeName = CalendarService.typeName;
    methods = CalendarService.methods;
    options = CalendarService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendarEntries(services.calendar.ListCalendarEntriesRequest) returns (services.calendar.ListCalendarEntriesResponse);
     */
    listCalendarEntries(input: ListCalendarEntriesRequest, options?: RpcOptions): UnaryCall<ListCalendarEntriesRequest, ListCalendarEntriesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCalendarEntriesRequest, ListCalendarEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendars(services.calendar.ListCalendarsRequest) returns (services.calendar.ListCalendarsResponse);
     */
    listCalendars(input: ListCalendarsRequest, options?: RpcOptions): UnaryCall<ListCalendarsRequest, ListCalendarsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCalendarsRequest, ListCalendarsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetCalendar(services.calendar.GetCalendarRequest) returns (services.calendar.GetCalendarResponse);
     */
    getCalendar(input: GetCalendarRequest, options?: RpcOptions): UnaryCall<GetCalendarRequest, GetCalendarResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCalendarRequest, GetCalendarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdateCalendar(services.calendar.CreateOrUpdateCalendarRequest) returns (services.calendar.CreateOrUpdateCalendarResponse);
     */
    createOrUpdateCalendar(input: CreateOrUpdateCalendarRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateCalendarRequest, CreateOrUpdateCalendarResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdateCalendarRequest, CreateOrUpdateCalendarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteCalendar(services.calendar.DeleteCalendarRequest) returns (services.calendar.DeleteCalendarResponse);
     */
    deleteCalendar(input: DeleteCalendarRequest, options?: RpcOptions): UnaryCall<DeleteCalendarRequest, DeleteCalendarResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCalendarRequest, DeleteCalendarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetCalendarEntry(services.calendar.GetCalendarEntryRequest) returns (services.calendar.GetCalendarEntryResponse);
     */
    getCalendarEntry(input: GetCalendarEntryRequest, options?: RpcOptions): UnaryCall<GetCalendarEntryRequest, GetCalendarEntryResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCalendarEntryRequest, GetCalendarEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdateCalendarEntries(services.calendar.CreateOrUpdateCalendarEntriesRequest) returns (services.calendar.CreateOrUpdateCalendarEntriesResponse);
     */
    createOrUpdateCalendarEntries(input: CreateOrUpdateCalendarEntriesRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateCalendarEntriesRequest, CreateOrUpdateCalendarEntriesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdateCalendarEntriesRequest, CreateOrUpdateCalendarEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteCalendarEntries(services.calendar.DeleteCalendarEntriesRequest) returns (services.calendar.DeleteCalendarEntriesResponse);
     */
    deleteCalendarEntries(input: DeleteCalendarEntriesRequest, options?: RpcOptions): UnaryCall<DeleteCalendarEntriesRequest, DeleteCalendarEntriesResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCalendarEntriesRequest, DeleteCalendarEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=CreateOrUpdateCalendarEntries
     *
     * @generated from protobuf rpc: ShareCalendarEntry(services.calendar.ShareCalendarEntryRequest) returns (services.calendar.ShareCalendarEntryResponse);
     */
    shareCalendarEntry(input: ShareCalendarEntryRequest, options?: RpcOptions): UnaryCall<ShareCalendarEntryRequest, ShareCalendarEntryResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ShareCalendarEntryRequest, ShareCalendarEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendarEntryRSVP(services.calendar.ListCalendarEntryRSVPRequest) returns (services.calendar.ListCalendarEntryRSVPResponse);
     */
    listCalendarEntryRSVP(input: ListCalendarEntryRSVPRequest, options?: RpcOptions): UnaryCall<ListCalendarEntryRSVPRequest, ListCalendarEntryRSVPResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCalendarEntryRSVPRequest, ListCalendarEntryRSVPResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: RSVPCalendarEntry(services.calendar.RSVPCalendarEntryRequest) returns (services.calendar.RSVPCalendarEntryResponse);
     */
    rSVPCalendarEntry(input: RSVPCalendarEntryRequest, options?: RpcOptions): UnaryCall<RSVPCalendarEntryRequest, RSVPCalendarEntryResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<RSVPCalendarEntryRequest, RSVPCalendarEntryResponse>("unary", this._transport, method, opt, input);
    }
}
