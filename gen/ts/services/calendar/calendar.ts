// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/calendar/calendar.proto" (package "services.calendar", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Calendar } from "../../resources/calendar/calendar";
import { PaginationResponse } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
import { CalendarEntry } from "../../resources/calendar/calendar";
/**
 * @generated from protobuf message services.calendar.ListCalendarEntriesRequest
 */
export interface ListCalendarEntriesRequest {
    /**
     * @generated from protobuf field: int32 year = 1;
     */
    year: number;
    /**
     * @generated from protobuf field: int32 month = 2;
     */
    month: number;
    /**
     * @generated from protobuf field: repeated uint64 calendar_ids = 3 [jstype = JS_STRING];
     */
    calendarIds: string[];
}
/**
 * @generated from protobuf message services.calendar.ListCalendarEntriesResponse
 */
export interface ListCalendarEntriesResponse {
    /**
     * @generated from protobuf field: repeated resources.calendar.CalendarEntry entries = 1;
     */
    entries: CalendarEntry[];
}
/**
 * @generated from protobuf message services.calendar.ListCalendarsRequest
 */
export interface ListCalendarsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
}
/**
 * @generated from protobuf message services.calendar.ListCalendarsResponse
 */
export interface ListCalendarsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.calendar.Calendar calendars = 2;
     */
    calendars: Calendar[];
}
/**
 * @generated from protobuf message services.calendar.CreateOrUpdateCalendarRequest
 */
export interface CreateOrUpdateCalendarRequest {
    /**
     * @generated from protobuf field: resources.calendar.Calendar calendar = 1;
     */
    calendar?: Calendar;
}
/**
 * @generated from protobuf message services.calendar.CreateOrUpdateCalendarResponse
 */
export interface CreateOrUpdateCalendarResponse {
    /**
     * @generated from protobuf field: resources.calendar.Calendar calendar = 1;
     */
    calendar?: Calendar;
}
/**
 * @generated from protobuf message services.calendar.DeleteCalendarRequest
 */
export interface DeleteCalendarRequest {
    /**
     * @generated from protobuf field: uint64 calendar_id = 1;
     */
    calendarId: number;
}
/**
 * @generated from protobuf message services.calendar.DeleteCalendarResponse
 */
export interface DeleteCalendarResponse {
}
/**
 * @generated from protobuf message services.calendar.CreateOrUpdateCalendarEntriesRequest
 */
export interface CreateOrUpdateCalendarEntriesRequest {
    /**
     * @generated from protobuf field: resources.calendar.CalendarEntry entry = 1;
     */
    entry?: CalendarEntry;
}
/**
 * @generated from protobuf message services.calendar.CreateOrUpdateCalendarEntriesResponse
 */
export interface CreateOrUpdateCalendarEntriesResponse {
    /**
     * @generated from protobuf field: resources.calendar.CalendarEntry entry = 1;
     */
    entry?: CalendarEntry;
}
/**
 * @generated from protobuf message services.calendar.DeleteCalendarEntriesRequest
 */
export interface DeleteCalendarEntriesRequest {
    /**
     * @generated from protobuf field: uint64 calendar_id = 1;
     */
    calendarId: number;
    /**
     * @generated from protobuf field: uint64 entry_id = 2;
     */
    entryId: number;
}
/**
 * @generated from protobuf message services.calendar.DeleteCalendarEntriesResponse
 */
export interface DeleteCalendarEntriesResponse {
}
/**
 * TODO
 *
 * @generated from protobuf message services.calendar.ShareCalendarEntryRequest
 */
export interface ShareCalendarEntryRequest {
}
/**
 * @generated from protobuf message services.calendar.ShareCalendarEntryResponse
 */
export interface ShareCalendarEntryResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ListCalendarEntriesRequest$Type extends MessageType<ListCalendarEntriesRequest> {
    constructor() {
        super("services.calendar.ListCalendarEntriesRequest", [
            { no: 1, name: "year", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 2023 } } } },
            { no: 2, name: "month", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { lte: 12, gte: 1 } } } },
            { no: 3, name: "calendar_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<ListCalendarEntriesRequest>): ListCalendarEntriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.year = 0;
        message.month = 0;
        message.calendarIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListCalendarEntriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCalendarEntriesRequest): ListCalendarEntriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 year */ 1:
                    message.year = reader.int32();
                    break;
                case /* int32 month */ 2:
                    message.month = reader.int32();
                    break;
                case /* repeated uint64 calendar_ids = 3 [jstype = JS_STRING];*/ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.calendarIds.push(reader.uint64().toString());
                    else
                        message.calendarIds.push(reader.uint64().toString());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCalendarEntriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 year = 1; */
        if (message.year !== 0)
            writer.tag(1, WireType.Varint).int32(message.year);
        /* int32 month = 2; */
        if (message.month !== 0)
            writer.tag(2, WireType.Varint).int32(message.month);
        /* repeated uint64 calendar_ids = 3 [jstype = JS_STRING]; */
        if (message.calendarIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.calendarIds.length; i++)
                writer.uint64(message.calendarIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.ListCalendarEntriesRequest
 */
export const ListCalendarEntriesRequest = new ListCalendarEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCalendarEntriesResponse$Type extends MessageType<ListCalendarEntriesResponse> {
    constructor() {
        super("services.calendar.ListCalendarEntriesResponse", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CalendarEntry }
        ]);
    }
    create(value?: PartialMessage<ListCalendarEntriesResponse>): ListCalendarEntriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<ListCalendarEntriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCalendarEntriesResponse): ListCalendarEntriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.calendar.CalendarEntry entries */ 1:
                    message.entries.push(CalendarEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCalendarEntriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.calendar.CalendarEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            CalendarEntry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.ListCalendarEntriesResponse
 */
export const ListCalendarEntriesResponse = new ListCalendarEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCalendarsRequest$Type extends MessageType<ListCalendarsRequest> {
    constructor() {
        super("services.calendar.ListCalendarsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<ListCalendarsRequest>): ListCalendarsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListCalendarsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCalendarsRequest): ListCalendarsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCalendarsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.ListCalendarsRequest
 */
export const ListCalendarsRequest = new ListCalendarsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCalendarsResponse$Type extends MessageType<ListCalendarsResponse> {
    constructor() {
        super("services.calendar.ListCalendarsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "calendars", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Calendar }
        ]);
    }
    create(value?: PartialMessage<ListCalendarsResponse>): ListCalendarsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.calendars = [];
        if (value !== undefined)
            reflectionMergePartial<ListCalendarsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCalendarsResponse): ListCalendarsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.calendar.Calendar calendars */ 2:
                    message.calendars.push(Calendar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCalendarsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.calendar.Calendar calendars = 2; */
        for (let i = 0; i < message.calendars.length; i++)
            Calendar.internalBinaryWrite(message.calendars[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.ListCalendarsResponse
 */
export const ListCalendarsResponse = new ListCalendarsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateCalendarRequest$Type extends MessageType<CreateOrUpdateCalendarRequest> {
    constructor() {
        super("services.calendar.CreateOrUpdateCalendarRequest", [
            { no: 1, name: "calendar", kind: "message", T: () => Calendar }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateCalendarRequest>): CreateOrUpdateCalendarRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateCalendarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateCalendarRequest): CreateOrUpdateCalendarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.calendar.Calendar calendar */ 1:
                    message.calendar = Calendar.internalBinaryRead(reader, reader.uint32(), options, message.calendar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateCalendarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.calendar.Calendar calendar = 1; */
        if (message.calendar)
            Calendar.internalBinaryWrite(message.calendar, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.CreateOrUpdateCalendarRequest
 */
export const CreateOrUpdateCalendarRequest = new CreateOrUpdateCalendarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateCalendarResponse$Type extends MessageType<CreateOrUpdateCalendarResponse> {
    constructor() {
        super("services.calendar.CreateOrUpdateCalendarResponse", [
            { no: 1, name: "calendar", kind: "message", T: () => Calendar }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateCalendarResponse>): CreateOrUpdateCalendarResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateCalendarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateCalendarResponse): CreateOrUpdateCalendarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.calendar.Calendar calendar */ 1:
                    message.calendar = Calendar.internalBinaryRead(reader, reader.uint32(), options, message.calendar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateCalendarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.calendar.Calendar calendar = 1; */
        if (message.calendar)
            Calendar.internalBinaryWrite(message.calendar, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.CreateOrUpdateCalendarResponse
 */
export const CreateOrUpdateCalendarResponse = new CreateOrUpdateCalendarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCalendarRequest$Type extends MessageType<DeleteCalendarRequest> {
    constructor() {
        super("services.calendar.DeleteCalendarRequest", [
            { no: 1, name: "calendar_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCalendarRequest>): DeleteCalendarRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.calendarId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteCalendarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCalendarRequest): DeleteCalendarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 calendar_id */ 1:
                    message.calendarId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCalendarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 calendar_id = 1; */
        if (message.calendarId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.calendarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.DeleteCalendarRequest
 */
export const DeleteCalendarRequest = new DeleteCalendarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCalendarResponse$Type extends MessageType<DeleteCalendarResponse> {
    constructor() {
        super("services.calendar.DeleteCalendarResponse", []);
    }
    create(value?: PartialMessage<DeleteCalendarResponse>): DeleteCalendarResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteCalendarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCalendarResponse): DeleteCalendarResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteCalendarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.DeleteCalendarResponse
 */
export const DeleteCalendarResponse = new DeleteCalendarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateCalendarEntriesRequest$Type extends MessageType<CreateOrUpdateCalendarEntriesRequest> {
    constructor() {
        super("services.calendar.CreateOrUpdateCalendarEntriesRequest", [
            { no: 1, name: "entry", kind: "message", T: () => CalendarEntry, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateCalendarEntriesRequest>): CreateOrUpdateCalendarEntriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateCalendarEntriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateCalendarEntriesRequest): CreateOrUpdateCalendarEntriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.calendar.CalendarEntry entry */ 1:
                    message.entry = CalendarEntry.internalBinaryRead(reader, reader.uint32(), options, message.entry);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateCalendarEntriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.calendar.CalendarEntry entry = 1; */
        if (message.entry)
            CalendarEntry.internalBinaryWrite(message.entry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.CreateOrUpdateCalendarEntriesRequest
 */
export const CreateOrUpdateCalendarEntriesRequest = new CreateOrUpdateCalendarEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateCalendarEntriesResponse$Type extends MessageType<CreateOrUpdateCalendarEntriesResponse> {
    constructor() {
        super("services.calendar.CreateOrUpdateCalendarEntriesResponse", [
            { no: 1, name: "entry", kind: "message", T: () => CalendarEntry }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateCalendarEntriesResponse>): CreateOrUpdateCalendarEntriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateCalendarEntriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateCalendarEntriesResponse): CreateOrUpdateCalendarEntriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.calendar.CalendarEntry entry */ 1:
                    message.entry = CalendarEntry.internalBinaryRead(reader, reader.uint32(), options, message.entry);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateCalendarEntriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.calendar.CalendarEntry entry = 1; */
        if (message.entry)
            CalendarEntry.internalBinaryWrite(message.entry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.CreateOrUpdateCalendarEntriesResponse
 */
export const CreateOrUpdateCalendarEntriesResponse = new CreateOrUpdateCalendarEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCalendarEntriesRequest$Type extends MessageType<DeleteCalendarEntriesRequest> {
    constructor() {
        super("services.calendar.DeleteCalendarEntriesRequest", [
            { no: 1, name: "calendar_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "entry_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCalendarEntriesRequest>): DeleteCalendarEntriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.calendarId = 0;
        message.entryId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteCalendarEntriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCalendarEntriesRequest): DeleteCalendarEntriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 calendar_id */ 1:
                    message.calendarId = reader.uint64().toNumber();
                    break;
                case /* uint64 entry_id */ 2:
                    message.entryId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCalendarEntriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 calendar_id = 1; */
        if (message.calendarId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.calendarId);
        /* uint64 entry_id = 2; */
        if (message.entryId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.entryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.DeleteCalendarEntriesRequest
 */
export const DeleteCalendarEntriesRequest = new DeleteCalendarEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCalendarEntriesResponse$Type extends MessageType<DeleteCalendarEntriesResponse> {
    constructor() {
        super("services.calendar.DeleteCalendarEntriesResponse", []);
    }
    create(value?: PartialMessage<DeleteCalendarEntriesResponse>): DeleteCalendarEntriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteCalendarEntriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCalendarEntriesResponse): DeleteCalendarEntriesResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteCalendarEntriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.DeleteCalendarEntriesResponse
 */
export const DeleteCalendarEntriesResponse = new DeleteCalendarEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareCalendarEntryRequest$Type extends MessageType<ShareCalendarEntryRequest> {
    constructor() {
        super("services.calendar.ShareCalendarEntryRequest", []);
    }
    create(value?: PartialMessage<ShareCalendarEntryRequest>): ShareCalendarEntryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ShareCalendarEntryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShareCalendarEntryRequest): ShareCalendarEntryRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ShareCalendarEntryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.ShareCalendarEntryRequest
 */
export const ShareCalendarEntryRequest = new ShareCalendarEntryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareCalendarEntryResponse$Type extends MessageType<ShareCalendarEntryResponse> {
    constructor() {
        super("services.calendar.ShareCalendarEntryResponse", []);
    }
    create(value?: PartialMessage<ShareCalendarEntryResponse>): ShareCalendarEntryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ShareCalendarEntryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShareCalendarEntryResponse): ShareCalendarEntryResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ShareCalendarEntryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.calendar.ShareCalendarEntryResponse
 */
export const ShareCalendarEntryResponse = new ShareCalendarEntryResponse$Type();
/**
 * @generated ServiceType for protobuf service services.calendar.CalendarService
 */
export const CalendarService = new ServiceType("services.calendar.CalendarService", [
    { name: "ListCalendarEntries", options: {}, I: ListCalendarEntriesRequest, O: ListCalendarEntriesResponse },
    { name: "ListCalendars", options: {}, I: ListCalendarsRequest, O: ListCalendarsResponse },
    { name: "CreateOrUpdateCalendar", options: {}, I: CreateOrUpdateCalendarRequest, O: CreateOrUpdateCalendarResponse },
    { name: "DeleteCalendar", options: {}, I: DeleteCalendarRequest, O: DeleteCalendarResponse },
    { name: "CreateOrUpdateCalendarEntries", options: {}, I: CreateOrUpdateCalendarEntriesRequest, O: CreateOrUpdateCalendarEntriesResponse },
    { name: "DeleteCalendarEntries", options: {}, I: DeleteCalendarEntriesRequest, O: DeleteCalendarEntriesResponse },
    { name: "ShareCalendarEntry", options: {}, I: ShareCalendarEntryRequest, O: ShareCalendarEntryResponse }
]);
