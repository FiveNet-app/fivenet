// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/mailer/mailer.proto" (package "services.mailer", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MailerService } from "./mailer";
import type { DeleteMessageResponse } from "./mailer";
import type { DeleteMessageRequest } from "./mailer";
import type { PostMessageResponse } from "./mailer";
import type { PostMessageRequest } from "./mailer";
import type { GetThreadMessagesResponse } from "./mailer";
import type { GetThreadMessagesRequest } from "./mailer";
import type { LeaveThreadResponse } from "./mailer";
import type { LeaveThreadRequest } from "./mailer";
import type { SetThreadUserStateResponse } from "./mailer";
import type { SetThreadUserStateRequest } from "./mailer";
import type { DeleteThreadResponse } from "./mailer";
import type { DeleteThreadRequest } from "./mailer";
import type { CreateOrUpdateThreadResponse } from "./mailer";
import type { CreateOrUpdateThreadRequest } from "./mailer";
import type { GetThreadResponse } from "./mailer";
import type { GetThreadRequest } from "./mailer";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListThreadsResponse } from "./mailer";
import type { ListThreadsRequest } from "./mailer";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.mailer.MailerService
 */
export interface IMailerServiceClient {
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListThreads(services.mailer.ListThreadsRequest) returns (services.mailer.ListThreadsResponse);
     */
    listThreads(input: ListThreadsRequest, options?: RpcOptions): UnaryCall<ListThreadsRequest, ListThreadsResponse>;
    /**
     * @perm: Name=ListThreads
     *
     * @generated from protobuf rpc: GetThread(services.mailer.GetThreadRequest) returns (services.mailer.GetThreadResponse);
     */
    getThread(input: GetThreadRequest, options?: RpcOptions): UnaryCall<GetThreadRequest, GetThreadResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdateThread(services.mailer.CreateOrUpdateThreadRequest) returns (services.mailer.CreateOrUpdateThreadResponse);
     */
    createOrUpdateThread(input: CreateOrUpdateThreadRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateThreadRequest, CreateOrUpdateThreadResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteThread(services.mailer.DeleteThreadRequest) returns (services.mailer.DeleteThreadResponse);
     */
    deleteThread(input: DeleteThreadRequest, options?: RpcOptions): UnaryCall<DeleteThreadRequest, DeleteThreadResponse>;
    /**
     * @perm: Name=ListThreads
     *
     * @generated from protobuf rpc: SetThreadUserState(services.mailer.SetThreadUserStateRequest) returns (services.mailer.SetThreadUserStateResponse);
     */
    setThreadUserState(input: SetThreadUserStateRequest, options?: RpcOptions): UnaryCall<SetThreadUserStateRequest, SetThreadUserStateResponse>;
    /**
     * @perm: Name=ListThreads
     *
     * @generated from protobuf rpc: LeaveThread(services.mailer.LeaveThreadRequest) returns (services.mailer.LeaveThreadResponse);
     */
    leaveThread(input: LeaveThreadRequest, options?: RpcOptions): UnaryCall<LeaveThreadRequest, LeaveThreadResponse>;
    /**
     * @perm: Name=ListThreads
     *
     * @generated from protobuf rpc: GetThreadMessages(services.mailer.GetThreadMessagesRequest) returns (services.mailer.GetThreadMessagesResponse);
     */
    getThreadMessages(input: GetThreadMessagesRequest, options?: RpcOptions): UnaryCall<GetThreadMessagesRequest, GetThreadMessagesResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: PostMessage(services.mailer.PostMessageRequest) returns (services.mailer.PostMessageResponse);
     */
    postMessage(input: PostMessageRequest, options?: RpcOptions): UnaryCall<PostMessageRequest, PostMessageResponse>;
    /**
     * @perm: Name=SuperUser
     *
     * @generated from protobuf rpc: DeleteMessage(services.mailer.DeleteMessageRequest) returns (services.mailer.DeleteMessageResponse);
     */
    deleteMessage(input: DeleteMessageRequest, options?: RpcOptions): UnaryCall<DeleteMessageRequest, DeleteMessageResponse>;
}
/**
 * @generated from protobuf service services.mailer.MailerService
 */
export class MailerServiceClient implements IMailerServiceClient, ServiceInfo {
    typeName = MailerService.typeName;
    methods = MailerService.methods;
    options = MailerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListThreads(services.mailer.ListThreadsRequest) returns (services.mailer.ListThreadsResponse);
     */
    listThreads(input: ListThreadsRequest, options?: RpcOptions): UnaryCall<ListThreadsRequest, ListThreadsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListThreadsRequest, ListThreadsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListThreads
     *
     * @generated from protobuf rpc: GetThread(services.mailer.GetThreadRequest) returns (services.mailer.GetThreadResponse);
     */
    getThread(input: GetThreadRequest, options?: RpcOptions): UnaryCall<GetThreadRequest, GetThreadResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetThreadRequest, GetThreadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdateThread(services.mailer.CreateOrUpdateThreadRequest) returns (services.mailer.CreateOrUpdateThreadResponse);
     */
    createOrUpdateThread(input: CreateOrUpdateThreadRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateThreadRequest, CreateOrUpdateThreadResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdateThreadRequest, CreateOrUpdateThreadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteThread(services.mailer.DeleteThreadRequest) returns (services.mailer.DeleteThreadResponse);
     */
    deleteThread(input: DeleteThreadRequest, options?: RpcOptions): UnaryCall<DeleteThreadRequest, DeleteThreadResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteThreadRequest, DeleteThreadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListThreads
     *
     * @generated from protobuf rpc: SetThreadUserState(services.mailer.SetThreadUserStateRequest) returns (services.mailer.SetThreadUserStateResponse);
     */
    setThreadUserState(input: SetThreadUserStateRequest, options?: RpcOptions): UnaryCall<SetThreadUserStateRequest, SetThreadUserStateResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetThreadUserStateRequest, SetThreadUserStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListThreads
     *
     * @generated from protobuf rpc: LeaveThread(services.mailer.LeaveThreadRequest) returns (services.mailer.LeaveThreadResponse);
     */
    leaveThread(input: LeaveThreadRequest, options?: RpcOptions): UnaryCall<LeaveThreadRequest, LeaveThreadResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<LeaveThreadRequest, LeaveThreadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListThreads
     *
     * @generated from protobuf rpc: GetThreadMessages(services.mailer.GetThreadMessagesRequest) returns (services.mailer.GetThreadMessagesResponse);
     */
    getThreadMessages(input: GetThreadMessagesRequest, options?: RpcOptions): UnaryCall<GetThreadMessagesRequest, GetThreadMessagesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetThreadMessagesRequest, GetThreadMessagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: PostMessage(services.mailer.PostMessageRequest) returns (services.mailer.PostMessageResponse);
     */
    postMessage(input: PostMessageRequest, options?: RpcOptions): UnaryCall<PostMessageRequest, PostMessageResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostMessageRequest, PostMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=SuperUser
     *
     * @generated from protobuf rpc: DeleteMessage(services.mailer.DeleteMessageRequest) returns (services.mailer.DeleteMessageResponse);
     */
    deleteMessage(input: DeleteMessageRequest, options?: RpcOptions): UnaryCall<DeleteMessageRequest, DeleteMessageResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteMessageRequest, DeleteMessageResponse>("unary", this._transport, method, opt, input);
    }
}
