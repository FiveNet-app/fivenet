// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size,long_type_bigint
// @generated from protobuf file "services/centrum/centrum.proto" (package "services.centrum", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { Dispatch } from "../../resources/dispatch/dispatch.js";
import { Unit } from "../../resources/dispatch/units.js";
import { UNIT_STATUS } from "../../resources/dispatch/units.js";
// Unit Management

/**
 * @generated from protobuf message services.centrum.ListUnitsRequest
 */
export interface ListUnitsRequest {
    /**
     * @generated from protobuf field: repeated resources.dispatch.UNIT_STATUS status = 1;
     */
    status: UNIT_STATUS[];
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
}
/**
 * @generated from protobuf message services.centrum.ListUnitsResponse
 */
export interface ListUnitsResponse {
    /**
     * @generated from protobuf field: repeated resources.dispatch.Unit units = 1;
     */
    units: Unit[];
}
/**
 * @generated from protobuf message services.centrum.CreateOrUpdateUnitRequest
 */
export interface CreateOrUpdateUnitRequest {
    /**
     * @generated from protobuf field: resources.dispatch.Unit unit = 1;
     */
    unit?: Unit;
}
/**
 * @generated from protobuf message services.centrum.CreateOrUpdateUnitResponse
 */
export interface CreateOrUpdateUnitResponse {
    /**
     * @generated from protobuf field: resources.dispatch.Unit unit = 1;
     */
    unit?: Unit;
}
/**
 * @generated from protobuf message services.centrum.DeleteUnitRequest
 */
export interface DeleteUnitRequest {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: bigint;
}
/**
 * @generated from protobuf message services.centrum.DeleteUnitResponse
 */
export interface DeleteUnitResponse {
}
/**
 * @generated from protobuf message services.centrum.AssignUnitRequest
 */
export interface AssignUnitRequest {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: bigint;
    /**
     * @generated from protobuf field: repeated int32 to_add = 2;
     */
    toAdd: number[];
    /**
     * @generated from protobuf field: repeated int32 to_remove = 3;
     */
    toRemove: number[];
}
/**
 * @generated from protobuf message services.centrum.AssignUnitResponse
 */
export interface AssignUnitResponse {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: bigint;
    /**
     * @generated from protobuf field: optional bool self = 2;
     */
    self?: boolean;
    /**
     * @generated from protobuf field: repeated uint64 user_ids = 3;
     */
    userIds: bigint[];
}
/**
 * @generated from protobuf message services.centrum.UpdateUnitStatusRequest
 */
export interface UpdateUnitStatusRequest {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: bigint;
    /**
     * @generated from protobuf field: resources.dispatch.UNIT_STATUS status = 2;
     */
    status: UNIT_STATUS;
    /**
     * @generated from protobuf field: optional string reason = 3;
     */
    reason?: string;
}
/**
 * @generated from protobuf message services.centrum.UpdateUnitStatusResponse
 */
export interface UpdateUnitStatusResponse {
}
/**
 * @generated from protobuf message services.centrum.UnitChanges
 */
export interface UnitChanges {
    /**
     * @generated from protobuf field: repeated services.centrum.UnitChange changes = 1;
     */
    changes: UnitChange[];
}
/**
 * @generated from protobuf message services.centrum.UnitChange
 */
export interface UnitChange {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: repeated int32 added = 2;
     */
    added: number[];
    /**
     * @generated from protobuf field: repeated int32 removed = 3;
     */
    removed: number[];
}
// Dispatch Management

/**
 * @generated from protobuf message services.centrum.CreateDispatchRequest
 */
export interface CreateDispatchRequest {
    /**
     * @generated from protobuf field: resources.dispatch.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.CreateDispatchResponse
 */
export interface CreateDispatchResponse {
    /**
     * @generated from protobuf field: resources.dispatch.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.UpdateDispatchRequest
 */
export interface UpdateDispatchRequest {
    /**
     * @generated from protobuf field: resources.dispatch.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.UpdateDispatchResponse
 */
export interface UpdateDispatchResponse {
    /**
     * @generated from protobuf field: resources.dispatch.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.TakeDispatchRequest
 */
export interface TakeDispatchRequest {
    /**
     * @generated from protobuf field: uint64 dispatch_id = 1;
     */
    dispatchId: bigint;
    /**
     * @generated from protobuf field: services.centrum.TAKE_DISPATCH_RESP resp = 2;
     */
    resp: TAKE_DISPATCH_RESP;
    /**
     * @generated from protobuf field: optional string reason = 3;
     */
    reason?: string;
}
/**
 * @generated from protobuf message services.centrum.TakeDispatchResponse
 */
export interface TakeDispatchResponse {
    /**
     * @generated from protobuf field: resources.dispatch.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.DispatchChanges
 */
export interface DispatchChanges {
    /**
     * @generated from protobuf field: repeated services.centrum.DispatchChange changes = 1;
     */
    changes: DispatchChange[];
}
/**
 * @generated from protobuf message services.centrum.DispatchChange
 */
export interface DispatchChange {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message services.centrum.CentrumStreamRequest
 */
export interface CentrumStreamRequest {
}
/**
 * @generated from protobuf message services.centrum.CentrumStreamResponse
 */
export interface CentrumStreamResponse {
    /**
     * @generated from protobuf field: optional services.centrum.UnitChanges unit_changes = 1;
     */
    unitChanges?: UnitChanges;
    /**
     * @generated from protobuf field: optional services.centrum.DispatchChanges dispatch_changes = 2;
     */
    dispatchChanges?: DispatchChanges;
}
/**
 * @generated from protobuf enum services.centrum.TAKE_DISPATCH_RESP
 */
export enum TAKE_DISPATCH_RESP {
    /**
     * @generated from protobuf enum value: TIMEOUT = 0;
     */
    TIMEOUT = 0,
    /**
     * @generated from protobuf enum value: ACCEPTED = 1;
     */
    ACCEPTED = 1,
    /**
     * @generated from protobuf enum value: DECLINED = 2;
     */
    DECLINED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ListUnitsRequest$Type extends MessageType<ListUnitsRequest> {
    constructor() {
        super("services.centrum.ListUnitsRequest", [
            { no: 1, name: "status", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.dispatch.UNIT_STATUS", UNIT_STATUS] },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListUnitsRequest
 */
export const ListUnitsRequest = new ListUnitsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUnitsResponse$Type extends MessageType<ListUnitsResponse> {
    constructor() {
        super("services.centrum.ListUnitsResponse", [
            { no: 1, name: "units", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Unit }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListUnitsResponse
 */
export const ListUnitsResponse = new ListUnitsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateUnitRequest$Type extends MessageType<CreateOrUpdateUnitRequest> {
    constructor() {
        super("services.centrum.CreateOrUpdateUnitRequest", [
            { no: 1, name: "unit", kind: "message", T: () => Unit, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CreateOrUpdateUnitRequest
 */
export const CreateOrUpdateUnitRequest = new CreateOrUpdateUnitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateUnitResponse$Type extends MessageType<CreateOrUpdateUnitResponse> {
    constructor() {
        super("services.centrum.CreateOrUpdateUnitResponse", [
            { no: 1, name: "unit", kind: "message", T: () => Unit }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CreateOrUpdateUnitResponse
 */
export const CreateOrUpdateUnitResponse = new CreateOrUpdateUnitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUnitRequest$Type extends MessageType<DeleteUnitRequest> {
    constructor() {
        super("services.centrum.DeleteUnitRequest", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.DeleteUnitRequest
 */
export const DeleteUnitRequest = new DeleteUnitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUnitResponse$Type extends MessageType<DeleteUnitResponse> {
    constructor() {
        super("services.centrum.DeleteUnitResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.DeleteUnitResponse
 */
export const DeleteUnitResponse = new DeleteUnitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignUnitRequest$Type extends MessageType<AssignUnitRequest> {
    constructor() {
        super("services.centrum.AssignUnitRequest", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_add", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "to_remove", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.AssignUnitRequest
 */
export const AssignUnitRequest = new AssignUnitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignUnitResponse$Type extends MessageType<AssignUnitResponse> {
    constructor() {
        super("services.centrum.AssignUnitResponse", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "self", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.AssignUnitResponse
 */
export const AssignUnitResponse = new AssignUnitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUnitStatusRequest$Type extends MessageType<UpdateUnitStatusRequest> {
    constructor() {
        super("services.centrum.UpdateUnitStatusRequest", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["resources.dispatch.UNIT_STATUS", UNIT_STATUS] },
            { no: 3, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateUnitStatusRequest
 */
export const UpdateUnitStatusRequest = new UpdateUnitStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUnitStatusResponse$Type extends MessageType<UpdateUnitStatusResponse> {
    constructor() {
        super("services.centrum.UpdateUnitStatusResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateUnitStatusResponse
 */
export const UpdateUnitStatusResponse = new UpdateUnitStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnitChanges$Type extends MessageType<UnitChanges> {
    constructor() {
        super("services.centrum.UnitChanges", [
            { no: 1, name: "changes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitChange }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UnitChanges
 */
export const UnitChanges = new UnitChanges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnitChange$Type extends MessageType<UnitChange> {
    constructor() {
        super("services.centrum.UnitChange", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "added", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "removed", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UnitChange
 */
export const UnitChange = new UnitChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDispatchRequest$Type extends MessageType<CreateDispatchRequest> {
    constructor() {
        super("services.centrum.CreateDispatchRequest", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CreateDispatchRequest
 */
export const CreateDispatchRequest = new CreateDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDispatchResponse$Type extends MessageType<CreateDispatchResponse> {
    constructor() {
        super("services.centrum.CreateDispatchResponse", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CreateDispatchResponse
 */
export const CreateDispatchResponse = new CreateDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDispatchRequest$Type extends MessageType<UpdateDispatchRequest> {
    constructor() {
        super("services.centrum.UpdateDispatchRequest", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateDispatchRequest
 */
export const UpdateDispatchRequest = new UpdateDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDispatchResponse$Type extends MessageType<UpdateDispatchResponse> {
    constructor() {
        super("services.centrum.UpdateDispatchResponse", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateDispatchResponse
 */
export const UpdateDispatchResponse = new UpdateDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeDispatchRequest$Type extends MessageType<TakeDispatchRequest> {
    constructor() {
        super("services.centrum.TakeDispatchRequest", [
            { no: 1, name: "dispatch_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "resp", kind: "enum", T: () => ["services.centrum.TAKE_DISPATCH_RESP", TAKE_DISPATCH_RESP], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.TakeDispatchRequest
 */
export const TakeDispatchRequest = new TakeDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeDispatchResponse$Type extends MessageType<TakeDispatchResponse> {
    constructor() {
        super("services.centrum.TakeDispatchResponse", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.TakeDispatchResponse
 */
export const TakeDispatchResponse = new TakeDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DispatchChanges$Type extends MessageType<DispatchChanges> {
    constructor() {
        super("services.centrum.DispatchChanges", [
            { no: 1, name: "changes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DispatchChange }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.DispatchChanges
 */
export const DispatchChanges = new DispatchChanges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DispatchChange$Type extends MessageType<DispatchChange> {
    constructor() {
        super("services.centrum.DispatchChange", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.DispatchChange
 */
export const DispatchChange = new DispatchChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CentrumStreamRequest$Type extends MessageType<CentrumStreamRequest> {
    constructor() {
        super("services.centrum.CentrumStreamRequest", []);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CentrumStreamRequest
 */
export const CentrumStreamRequest = new CentrumStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CentrumStreamResponse$Type extends MessageType<CentrumStreamResponse> {
    constructor() {
        super("services.centrum.CentrumStreamResponse", [
            { no: 1, name: "unit_changes", kind: "message", T: () => UnitChanges },
            { no: 2, name: "dispatch_changes", kind: "message", T: () => DispatchChanges }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CentrumStreamResponse
 */
export const CentrumStreamResponse = new CentrumStreamResponse$Type();
/**
 * @generated ServiceType for protobuf service services.centrum.CentrumService
 */
export const CentrumService = new ServiceType("services.centrum.CentrumService", [
    { name: "ListUnits", options: {}, I: ListUnitsRequest, O: ListUnitsResponse },
    { name: "CreateOrUpdateUnit", options: {}, I: CreateOrUpdateUnitRequest, O: CreateOrUpdateUnitResponse },
    { name: "DeleteUnit", options: {}, I: DeleteUnitRequest, O: DeleteUnitResponse },
    { name: "AssignUnit", options: {}, I: AssignUnitRequest, O: AssignUnitResponse },
    { name: "UpdateUnitStatus", options: {}, I: UpdateUnitStatusRequest, O: UpdateUnitStatusResponse },
    { name: "CreateDispatch", options: {}, I: CreateDispatchRequest, O: CreateDispatchResponse },
    { name: "UpdateDispatch", options: {}, I: UpdateDispatchRequest, O: UpdateDispatchResponse },
    { name: "TakeDispatch", options: {}, I: TakeDispatchRequest, O: TakeDispatchResponse },
    { name: "Stream", serverStreaming: true, options: {}, I: CentrumStreamRequest, O: CentrumStreamResponse }
]);
