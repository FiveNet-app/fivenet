// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size,long_type_bigint
// @generated from protobuf file "services/centrum/centrum.proto" (package "services.centrum", syntax proto3)
// tslint:disable
import { CentrumService } from "./centrum.js";
import type { CentrumStreamResponse } from "./centrum.js";
import type { CentrumStreamRequest } from "./centrum.js";
import type { CreateActionResponse } from "./centrum.js";
import type { CreateActionRequest } from "./centrum.js";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SquadService } from "./centrum.js";
import type { SquadStreamResponse } from "./centrum.js";
import type { SquadStreamRequest } from "./centrum.js";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { AssignSquadResponse } from "./centrum.js";
import type { AssignSquadRequest } from "./centrum.js";
import type { DeleteSquadResponse } from "./centrum.js";
import type { DeleteSquadRequest } from "./centrum.js";
import type { UpdateSquadResponse } from "./centrum.js";
import type { UpdateSquadRequest } from "./centrum.js";
import type { CreateSquadResponse } from "./centrum.js";
import type { CreateSquadRequest } from "./centrum.js";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListSquadsResponse } from "./centrum.js";
import type { ListSquadsRequest } from "./centrum.js";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Squad Management
 *
 * @generated from protobuf service services.centrum.SquadService
 */
export interface ISquadServiceClient {
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListSquads(services.centrum.ListSquadsRequest) returns (services.centrum.ListSquadsResponse);
     */
    listSquads(input: ListSquadsRequest, options?: RpcOptions): UnaryCall<ListSquadsRequest, ListSquadsResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateSquad(services.centrum.CreateSquadRequest) returns (services.centrum.CreateSquadResponse);
     */
    createSquad(input: CreateSquadRequest, options?: RpcOptions): UnaryCall<CreateSquadRequest, CreateSquadResponse>;
    /**
     * @perm: Name=CreateSquad
     *
     * @generated from protobuf rpc: UpdateSquad(services.centrum.UpdateSquadRequest) returns (services.centrum.UpdateSquadResponse);
     */
    updateSquad(input: UpdateSquadRequest, options?: RpcOptions): UnaryCall<UpdateSquadRequest, UpdateSquadResponse>;
    /**
     * @perm: Name=DeleteSquad
     *
     * @generated from protobuf rpc: DeleteSquad(services.centrum.DeleteSquadRequest) returns (services.centrum.DeleteSquadResponse);
     */
    deleteSquad(input: DeleteSquadRequest, options?: RpcOptions): UnaryCall<DeleteSquadRequest, DeleteSquadResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank"}ยง[]string{"Own"}
     *
     * @generated from protobuf rpc: AssignSquad(services.centrum.AssignSquadRequest) returns (services.centrum.AssignSquadResponse);
     */
    assignSquad(input: AssignSquadRequest, options?: RpcOptions): UnaryCall<AssignSquadRequest, AssignSquadResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: StreamSquads(services.centrum.SquadStreamRequest) returns (stream services.centrum.SquadStreamResponse);
     */
    streamSquads(input: SquadStreamRequest, options?: RpcOptions): ServerStreamingCall<SquadStreamRequest, SquadStreamResponse>;
}
/**
 * Squad Management
 *
 * @generated from protobuf service services.centrum.SquadService
 */
export class SquadServiceClient implements ISquadServiceClient, ServiceInfo {
    typeName = SquadService.typeName;
    methods = SquadService.methods;
    options = SquadService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListSquads(services.centrum.ListSquadsRequest) returns (services.centrum.ListSquadsResponse);
     */
    listSquads(input: ListSquadsRequest, options?: RpcOptions): UnaryCall<ListSquadsRequest, ListSquadsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListSquadsRequest, ListSquadsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateSquad(services.centrum.CreateSquadRequest) returns (services.centrum.CreateSquadResponse);
     */
    createSquad(input: CreateSquadRequest, options?: RpcOptions): UnaryCall<CreateSquadRequest, CreateSquadResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateSquadRequest, CreateSquadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=CreateSquad
     *
     * @generated from protobuf rpc: UpdateSquad(services.centrum.UpdateSquadRequest) returns (services.centrum.UpdateSquadResponse);
     */
    updateSquad(input: UpdateSquadRequest, options?: RpcOptions): UnaryCall<UpdateSquadRequest, UpdateSquadResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateSquadRequest, UpdateSquadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=DeleteSquad
     *
     * @generated from protobuf rpc: DeleteSquad(services.centrum.DeleteSquadRequest) returns (services.centrum.DeleteSquadResponse);
     */
    deleteSquad(input: DeleteSquadRequest, options?: RpcOptions): UnaryCall<DeleteSquadRequest, DeleteSquadResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteSquadRequest, DeleteSquadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank"}ยง[]string{"Own"}
     *
     * @generated from protobuf rpc: AssignSquad(services.centrum.AssignSquadRequest) returns (services.centrum.AssignSquadResponse);
     */
    assignSquad(input: AssignSquadRequest, options?: RpcOptions): UnaryCall<AssignSquadRequest, AssignSquadResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AssignSquadRequest, AssignSquadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: StreamSquads(services.centrum.SquadStreamRequest) returns (stream services.centrum.SquadStreamResponse);
     */
    streamSquads(input: SquadStreamRequest, options?: RpcOptions): ServerStreamingCall<SquadStreamRequest, SquadStreamResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SquadStreamRequest, SquadStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
/**
 * Action + Dispatch Management
 *
 * @generated from protobuf service services.centrum.CentrumService
 */
export interface ICentrumServiceClient {
    /**
     * @perm
     *
     * TODO
     *
     * @generated from protobuf rpc: CreateAction(services.centrum.CreateActionRequest) returns (services.centrum.CreateActionResponse);
     */
    createAction(input: CreateActionRequest, options?: RpcOptions): UnaryCall<CreateActionRequest, CreateActionResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: Stream(services.centrum.CentrumStreamRequest) returns (stream services.centrum.CentrumStreamResponse);
     */
    stream(input: CentrumStreamRequest, options?: RpcOptions): ServerStreamingCall<CentrumStreamRequest, CentrumStreamResponse>;
}
/**
 * Action + Dispatch Management
 *
 * @generated from protobuf service services.centrum.CentrumService
 */
export class CentrumServiceClient implements ICentrumServiceClient, ServiceInfo {
    typeName = CentrumService.typeName;
    methods = CentrumService.methods;
    options = CentrumService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm
     *
     * TODO
     *
     * @generated from protobuf rpc: CreateAction(services.centrum.CreateActionRequest) returns (services.centrum.CreateActionResponse);
     */
    createAction(input: CreateActionRequest, options?: RpcOptions): UnaryCall<CreateActionRequest, CreateActionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateActionRequest, CreateActionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: Stream(services.centrum.CentrumStreamRequest) returns (stream services.centrum.CentrumStreamResponse);
     */
    stream(input: CentrumStreamRequest, options?: RpcOptions): ServerStreamingCall<CentrumStreamRequest, CentrumStreamResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CentrumStreamRequest, CentrumStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
