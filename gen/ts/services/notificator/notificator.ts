// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size,long_type_bigint
// @generated from protobuf file "services/notificator/notificator.proto" (package "services.notificator", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { JobProps } from "../../resources/jobs/jobs.js";
import { User } from "../../resources/users/users.js";
import { Timestamp } from "../../resources/timestamp/timestamp.js";
import { Notification } from "../../resources/notifications/notifications.js";
import { PaginationResponse } from "../../resources/common/database/database.js";
import { PaginationRequest } from "../../resources/common/database/database.js";
/**
 * @generated from protobuf message services.notificator.GetNotificationsRequest
 */
export interface GetNotificationsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: bool include_read = 2;
     */
    includeRead: boolean;
}
/**
 * @generated from protobuf message services.notificator.GetNotificationsResponse
 */
export interface GetNotificationsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.notifications.Notification notifications = 2;
     */
    notifications: Notification[];
}
/**
 * @generated from protobuf message services.notificator.ReadNotificationsRequest
 */
export interface ReadNotificationsRequest {
    /**
     * @generated from protobuf field: repeated uint64 ids = 1;
     */
    ids: bigint[];
}
/**
 * @generated from protobuf message services.notificator.ReadNotificationsResponse
 */
export interface ReadNotificationsResponse {
}
/**
 * @generated from protobuf message services.notificator.StreamRequest
 */
export interface StreamRequest {
    /**
     * @generated from protobuf field: uint64 last_id = 1;
     */
    lastId: bigint;
}
/**
 * @generated from protobuf message services.notificator.StreamResponse
 */
export interface StreamResponse {
    /**
     * @generated from protobuf field: uint64 last_id = 1;
     */
    lastId: bigint;
    /**
     * @generated from protobuf field: bool restart_stream = 2;
     */
    restartStream: boolean;
    /**
     * @generated from protobuf field: repeated resources.notifications.Notification notifications = 3;
     */
    notifications: Notification[];
    /**
     * @generated from protobuf field: optional services.notificator.TokenUpdate token = 4;
     */
    token?: TokenUpdate;
}
/**
 * @generated from protobuf message services.notificator.TokenUpdate
 */
export interface TokenUpdate {
    /**
     * @generated from protobuf field: optional string new_token = 1;
     */
    newToken?: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp expires = 2;
     */
    expires?: Timestamp;
    /**
     * @generated from protobuf field: repeated string permissions = 3;
     */
    permissions: string[];
    /**
     * @generated from protobuf field: optional resources.users.User user_info = 4;
     */
    userInfo?: User;
    /**
     * @generated from protobuf field: optional resources.jobs.JobProps job_props = 5;
     */
    jobProps?: JobProps;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetNotificationsRequest$Type extends MessageType<GetNotificationsRequest> {
    constructor() {
        super("services.notificator.GetNotificationsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "include_read", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.notificator.GetNotificationsRequest
 */
export const GetNotificationsRequest = new GetNotificationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNotificationsResponse$Type extends MessageType<GetNotificationsResponse> {
    constructor() {
        super("services.notificator.GetNotificationsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "notifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Notification }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.notificator.GetNotificationsResponse
 */
export const GetNotificationsResponse = new GetNotificationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadNotificationsRequest$Type extends MessageType<ReadNotificationsRequest> {
    constructor() {
        super("services.notificator.ReadNotificationsRequest", [
            { no: 1, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "20" } } } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.notificator.ReadNotificationsRequest
 */
export const ReadNotificationsRequest = new ReadNotificationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadNotificationsResponse$Type extends MessageType<ReadNotificationsResponse> {
    constructor() {
        super("services.notificator.ReadNotificationsResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message services.notificator.ReadNotificationsResponse
 */
export const ReadNotificationsResponse = new ReadNotificationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequest$Type extends MessageType<StreamRequest> {
    constructor() {
        super("services.notificator.StreamRequest", [
            { no: 1, name: "last_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.notificator.StreamRequest
 */
export const StreamRequest = new StreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamResponse$Type extends MessageType<StreamResponse> {
    constructor() {
        super("services.notificator.StreamResponse", [
            { no: 1, name: "last_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "restart_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "notifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Notification },
            { no: 4, name: "token", kind: "message", T: () => TokenUpdate }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.notificator.StreamResponse
 */
export const StreamResponse = new StreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenUpdate$Type extends MessageType<TokenUpdate> {
    constructor() {
        super("services.notificator.TokenUpdate", [
            { no: 1, name: "new_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "expires", kind: "message", T: () => Timestamp },
            { no: 3, name: "permissions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_info", kind: "message", T: () => User },
            { no: 5, name: "job_props", kind: "message", T: () => JobProps }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message services.notificator.TokenUpdate
 */
export const TokenUpdate = new TokenUpdate$Type();
/**
 * @generated ServiceType for protobuf service services.notificator.NotificatorService
 */
export const NotificatorService = new ServiceType("services.notificator.NotificatorService", [
    { name: "GetNotifications", options: {}, I: GetNotificationsRequest, O: GetNotificationsResponse },
    { name: "ReadNotifications", options: {}, I: ReadNotificationsRequest, O: ReadNotificationsResponse },
    { name: "Stream", serverStreaming: true, options: {}, I: StreamRequest, O: StreamResponse }
]);
