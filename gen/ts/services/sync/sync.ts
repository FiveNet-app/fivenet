// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/sync/sync.proto" (package "services.sync", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DataUserLicenses } from "../../resources/sync/data";
import { DataLicenses } from "../../resources/sync/data";
import { DataVehicles } from "../../resources/sync/data";
import { DataUsers } from "../../resources/sync/data";
import { DataJobs } from "../../resources/sync/data";
import { AddActivity } from "../../resources/sync/activity";
import { DataStatus } from "../../resources/sync/data";
/**
 * @generated from protobuf message services.sync.GetStatusRequest
 */
export interface GetStatusRequest {
}
/**
 * @generated from protobuf message services.sync.GetStatusResponse
 */
export interface GetStatusResponse {
    /**
     * @generated from protobuf field: resources.sync.DataStatus jobs = 1;
     */
    jobs?: DataStatus;
    /**
     * @generated from protobuf field: resources.sync.DataStatus users = 2;
     */
    users?: DataStatus;
    /**
     * @generated from protobuf field: resources.sync.DataStatus vehicles = 3;
     */
    vehicles?: DataStatus;
    /**
     * @generated from protobuf field: resources.sync.DataStatus licenses = 4;
     */
    licenses?: DataStatus;
    /**
     * @generated from protobuf field: resources.sync.DataStatus user_licenses = 5;
     */
    userLicenses?: DataStatus;
}
/**
 * @generated from protobuf message services.sync.AddActivityRequest
 */
export interface AddActivityRequest {
    /**
     * @generated from protobuf field: resources.sync.AddActivity activity = 1;
     */
    activity?: AddActivity;
}
/**
 * @generated from protobuf message services.sync.AddActivityResponse
 */
export interface AddActivityResponse {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message services.sync.SyncDataRequest
 */
export interface SyncDataRequest {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "jobs";
        /**
         * @generated from protobuf field: resources.sync.DataJobs jobs = 1;
         */
        jobs: DataJobs;
    } | {
        oneofKind: "users";
        /**
         * @generated from protobuf field: resources.sync.DataUsers users = 2;
         */
        users: DataUsers;
    } | {
        oneofKind: "vehicles";
        /**
         * @generated from protobuf field: resources.sync.DataVehicles vehicles = 3;
         */
        vehicles: DataVehicles;
    } | {
        oneofKind: "licenses";
        /**
         * @generated from protobuf field: resources.sync.DataLicenses licenses = 4;
         */
        licenses: DataLicenses;
    } | {
        oneofKind: "userLicenses";
        /**
         * @generated from protobuf field: resources.sync.DataUserLicenses user_licenses = 5;
         */
        userLicenses: DataUserLicenses;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message services.sync.SyncDataResponse
 */
export interface SyncDataResponse {
    /**
     * @generated from protobuf field: int64 affected_rows = 1;
     */
    affectedRows: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusRequest$Type extends MessageType<GetStatusRequest> {
    constructor() {
        super("services.sync.GetStatusRequest", []);
    }
    create(value?: PartialMessage<GetStatusRequest>): GetStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusRequest): GetStatusRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.sync.GetStatusRequest
 */
export const GetStatusRequest = new GetStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusResponse$Type extends MessageType<GetStatusResponse> {
    constructor() {
        super("services.sync.GetStatusResponse", [
            { no: 1, name: "jobs", kind: "message", T: () => DataStatus },
            { no: 2, name: "users", kind: "message", T: () => DataStatus },
            { no: 3, name: "vehicles", kind: "message", T: () => DataStatus },
            { no: 4, name: "licenses", kind: "message", T: () => DataStatus },
            { no: 5, name: "user_licenses", kind: "message", T: () => DataStatus }
        ]);
    }
    create(value?: PartialMessage<GetStatusResponse>): GetStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusResponse): GetStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.sync.DataStatus jobs */ 1:
                    message.jobs = DataStatus.internalBinaryRead(reader, reader.uint32(), options, message.jobs);
                    break;
                case /* resources.sync.DataStatus users */ 2:
                    message.users = DataStatus.internalBinaryRead(reader, reader.uint32(), options, message.users);
                    break;
                case /* resources.sync.DataStatus vehicles */ 3:
                    message.vehicles = DataStatus.internalBinaryRead(reader, reader.uint32(), options, message.vehicles);
                    break;
                case /* resources.sync.DataStatus licenses */ 4:
                    message.licenses = DataStatus.internalBinaryRead(reader, reader.uint32(), options, message.licenses);
                    break;
                case /* resources.sync.DataStatus user_licenses */ 5:
                    message.userLicenses = DataStatus.internalBinaryRead(reader, reader.uint32(), options, message.userLicenses);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.sync.DataStatus jobs = 1; */
        if (message.jobs)
            DataStatus.internalBinaryWrite(message.jobs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.sync.DataStatus users = 2; */
        if (message.users)
            DataStatus.internalBinaryWrite(message.users, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.sync.DataStatus vehicles = 3; */
        if (message.vehicles)
            DataStatus.internalBinaryWrite(message.vehicles, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.sync.DataStatus licenses = 4; */
        if (message.licenses)
            DataStatus.internalBinaryWrite(message.licenses, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.sync.DataStatus user_licenses = 5; */
        if (message.userLicenses)
            DataStatus.internalBinaryWrite(message.userLicenses, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.sync.GetStatusResponse
 */
export const GetStatusResponse = new GetStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddActivityRequest$Type extends MessageType<AddActivityRequest> {
    constructor() {
        super("services.sync.AddActivityRequest", [
            { no: 1, name: "activity", kind: "message", T: () => AddActivity, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<AddActivityRequest>): AddActivityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddActivityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddActivityRequest): AddActivityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.sync.AddActivity activity */ 1:
                    message.activity = AddActivity.internalBinaryRead(reader, reader.uint32(), options, message.activity);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddActivityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.sync.AddActivity activity = 1; */
        if (message.activity)
            AddActivity.internalBinaryWrite(message.activity, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.sync.AddActivityRequest
 */
export const AddActivityRequest = new AddActivityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddActivityResponse$Type extends MessageType<AddActivityResponse> {
    constructor() {
        super("services.sync.AddActivityResponse", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddActivityResponse>): AddActivityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<AddActivityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddActivityResponse): AddActivityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddActivityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.sync.AddActivityResponse
 */
export const AddActivityResponse = new AddActivityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SyncDataRequest$Type extends MessageType<SyncDataRequest> {
    constructor() {
        super("services.sync.SyncDataRequest", [
            { no: 1, name: "jobs", kind: "message", oneof: "data", T: () => DataJobs },
            { no: 2, name: "users", kind: "message", oneof: "data", T: () => DataUsers },
            { no: 3, name: "vehicles", kind: "message", oneof: "data", T: () => DataVehicles },
            { no: 4, name: "licenses", kind: "message", oneof: "data", T: () => DataLicenses },
            { no: 5, name: "user_licenses", kind: "message", oneof: "data", T: () => DataUserLicenses }
        ]);
    }
    create(value?: PartialMessage<SyncDataRequest>): SyncDataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SyncDataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncDataRequest): SyncDataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.sync.DataJobs jobs */ 1:
                    message.data = {
                        oneofKind: "jobs",
                        jobs: DataJobs.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).jobs)
                    };
                    break;
                case /* resources.sync.DataUsers users */ 2:
                    message.data = {
                        oneofKind: "users",
                        users: DataUsers.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).users)
                    };
                    break;
                case /* resources.sync.DataVehicles vehicles */ 3:
                    message.data = {
                        oneofKind: "vehicles",
                        vehicles: DataVehicles.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).vehicles)
                    };
                    break;
                case /* resources.sync.DataLicenses licenses */ 4:
                    message.data = {
                        oneofKind: "licenses",
                        licenses: DataLicenses.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).licenses)
                    };
                    break;
                case /* resources.sync.DataUserLicenses user_licenses */ 5:
                    message.data = {
                        oneofKind: "userLicenses",
                        userLicenses: DataUserLicenses.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).userLicenses)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SyncDataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.sync.DataJobs jobs = 1; */
        if (message.data.oneofKind === "jobs")
            DataJobs.internalBinaryWrite(message.data.jobs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.sync.DataUsers users = 2; */
        if (message.data.oneofKind === "users")
            DataUsers.internalBinaryWrite(message.data.users, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.sync.DataVehicles vehicles = 3; */
        if (message.data.oneofKind === "vehicles")
            DataVehicles.internalBinaryWrite(message.data.vehicles, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.sync.DataLicenses licenses = 4; */
        if (message.data.oneofKind === "licenses")
            DataLicenses.internalBinaryWrite(message.data.licenses, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.sync.DataUserLicenses user_licenses = 5; */
        if (message.data.oneofKind === "userLicenses")
            DataUserLicenses.internalBinaryWrite(message.data.userLicenses, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.sync.SyncDataRequest
 */
export const SyncDataRequest = new SyncDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SyncDataResponse$Type extends MessageType<SyncDataResponse> {
    constructor() {
        super("services.sync.SyncDataResponse", [
            { no: 1, name: "affected_rows", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<SyncDataResponse>): SyncDataResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.affectedRows = 0;
        if (value !== undefined)
            reflectionMergePartial<SyncDataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncDataResponse): SyncDataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 affected_rows */ 1:
                    message.affectedRows = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SyncDataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 affected_rows = 1; */
        if (message.affectedRows !== 0)
            writer.tag(1, WireType.Varint).int64(message.affectedRows);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.sync.SyncDataResponse
 */
export const SyncDataResponse = new SyncDataResponse$Type();
/**
 * @generated ServiceType for protobuf service services.sync.SyncService
 */
export const SyncService = new ServiceType("services.sync.SyncService", [
    { name: "GetStatus", options: {}, I: GetStatusRequest, O: GetStatusResponse },
    { name: "AddActivity", options: {}, I: AddActivityRequest, O: AddActivityResponse },
    { name: "SyncData", options: {}, I: SyncDataRequest, O: SyncDataResponse }
]);
