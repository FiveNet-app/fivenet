// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/sync/sync.proto" (package "services.sync", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SyncService } from "./sync";
import type { SyncDataResponse } from "./sync";
import type { SyncDataRequest } from "./sync";
import type { AddActivityResponse } from "./sync";
import type { AddActivityRequest } from "./sync";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetStatusResponse } from "./sync";
import type { GetStatusRequest } from "./sync";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.sync.SyncService
 */
export interface ISyncServiceClient {
    /**
     * @generated from protobuf rpc: GetStatus(services.sync.GetStatusRequest) returns (services.sync.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * @generated from protobuf rpc: AddActivity(services.sync.AddActivityRequest) returns (services.sync.AddActivityResponse);
     */
    addActivity(input: AddActivityRequest, options?: RpcOptions): UnaryCall<AddActivityRequest, AddActivityResponse>;
    /**
     * @generated from protobuf rpc: SyncData(services.sync.SyncDataRequest) returns (services.sync.SyncDataResponse);
     */
    syncData(input: SyncDataRequest, options?: RpcOptions): UnaryCall<SyncDataRequest, SyncDataResponse>;
}
/**
 * @generated from protobuf service services.sync.SyncService
 */
export class SyncServiceClient implements ISyncServiceClient, ServiceInfo {
    typeName = SyncService.typeName;
    methods = SyncService.methods;
    options = SyncService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetStatus(services.sync.GetStatusRequest) returns (services.sync.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddActivity(services.sync.AddActivityRequest) returns (services.sync.AddActivityResponse);
     */
    addActivity(input: AddActivityRequest, options?: RpcOptions): UnaryCall<AddActivityRequest, AddActivityResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddActivityRequest, AddActivityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SyncData(services.sync.SyncDataRequest) returns (services.sync.SyncDataResponse);
     */
    syncData(input: SyncDataRequest, options?: RpcOptions): UnaryCall<SyncDataRequest, SyncDataResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SyncDataRequest, SyncDataResponse>("unary", this._transport, method, opt, input);
    }
}
