/**
 * @fileoverview gRPC-Web generated client stub for services.rector
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: services/rector/rector.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as services_rector_rector_pb from '../../services/rector/rector_pb';


export class RectorServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetRoles = new grpcWeb.MethodDescriptor(
    '/services.rector.RectorService/GetRoles',
    grpcWeb.MethodType.UNARY,
    services_rector_rector_pb.GetRolesRequest,
    services_rector_rector_pb.GetRolesResponse,
    (request: services_rector_rector_pb.GetRolesRequest) => {
      return request.serializeBinary();
    },
    services_rector_rector_pb.GetRolesResponse.deserializeBinary
  );

  getRoles(
    request: services_rector_rector_pb.GetRolesRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_rector_rector_pb.GetRolesResponse>;

  getRoles(
    request: services_rector_rector_pb.GetRolesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_rector_rector_pb.GetRolesResponse) => void): grpcWeb.ClientReadableStream<services_rector_rector_pb.GetRolesResponse>;

  getRoles(
    request: services_rector_rector_pb.GetRolesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_rector_rector_pb.GetRolesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.rector.RectorService/GetRoles',
        request,
        metadata || {},
        this.methodDescriptorGetRoles,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.rector.RectorService/GetRoles',
    request,
    metadata || {},
    this.methodDescriptorGetRoles);
  }

  methodDescriptorUpdateRole = new grpcWeb.MethodDescriptor(
    '/services.rector.RectorService/UpdateRole',
    grpcWeb.MethodType.UNARY,
    services_rector_rector_pb.UpdateRoleRequest,
    services_rector_rector_pb.UpdateRoleResponse,
    (request: services_rector_rector_pb.UpdateRoleRequest) => {
      return request.serializeBinary();
    },
    services_rector_rector_pb.UpdateRoleResponse.deserializeBinary
  );

  updateRole(
    request: services_rector_rector_pb.UpdateRoleRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_rector_rector_pb.UpdateRoleResponse>;

  updateRole(
    request: services_rector_rector_pb.UpdateRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_rector_rector_pb.UpdateRoleResponse) => void): grpcWeb.ClientReadableStream<services_rector_rector_pb.UpdateRoleResponse>;

  updateRole(
    request: services_rector_rector_pb.UpdateRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_rector_rector_pb.UpdateRoleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.rector.RectorService/UpdateRole',
        request,
        metadata || {},
        this.methodDescriptorUpdateRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.rector.RectorService/UpdateRole',
    request,
    metadata || {},
    this.methodDescriptorUpdateRole);
  }

  methodDescriptorDeleteRole = new grpcWeb.MethodDescriptor(
    '/services.rector.RectorService/DeleteRole',
    grpcWeb.MethodType.UNARY,
    services_rector_rector_pb.DeleteRoleRequest,
    services_rector_rector_pb.DeleteRoleResponse,
    (request: services_rector_rector_pb.DeleteRoleRequest) => {
      return request.serializeBinary();
    },
    services_rector_rector_pb.DeleteRoleResponse.deserializeBinary
  );

  deleteRole(
    request: services_rector_rector_pb.DeleteRoleRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_rector_rector_pb.DeleteRoleResponse>;

  deleteRole(
    request: services_rector_rector_pb.DeleteRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_rector_rector_pb.DeleteRoleResponse) => void): grpcWeb.ClientReadableStream<services_rector_rector_pb.DeleteRoleResponse>;

  deleteRole(
    request: services_rector_rector_pb.DeleteRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_rector_rector_pb.DeleteRoleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.rector.RectorService/DeleteRole',
        request,
        metadata || {},
        this.methodDescriptorDeleteRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.rector.RectorService/DeleteRole',
    request,
    metadata || {},
    this.methodDescriptorDeleteRole);
  }

}

