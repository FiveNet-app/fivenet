/**
 * @fileoverview gRPC-Web generated client stub for services.auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: services/auth/auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as services_auth_auth_pb from '../../services/auth/auth_pb';


export class AccountServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/services.auth.AccountService/Login',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.LoginRequest,
    services_auth_auth_pb.LoginResponse,
    (request: services_auth_auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.LoginResponse.deserializeBinary
  );

  login(
    request: services_auth_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.LoginResponse>;

  login(
    request: services_auth_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.LoginResponse>;

  login(
    request: services_auth_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AccountService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AccountService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorGetCharacters = new grpcWeb.MethodDescriptor(
    '/services.auth.AccountService/GetCharacters',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.GetCharactersRequest,
    services_auth_auth_pb.GetCharactersResponse,
    (request: services_auth_auth_pb.GetCharactersRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.GetCharactersResponse.deserializeBinary
  );

  getCharacters(
    request: services_auth_auth_pb.GetCharactersRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.GetCharactersResponse>;

  getCharacters(
    request: services_auth_auth_pb.GetCharactersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.GetCharactersResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.GetCharactersResponse>;

  getCharacters(
    request: services_auth_auth_pb.GetCharactersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.GetCharactersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AccountService/GetCharacters',
        request,
        metadata || {},
        this.methodDescriptorGetCharacters,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AccountService/GetCharacters',
    request,
    metadata || {},
    this.methodDescriptorGetCharacters);
  }

  methodDescriptorChooseCharacter = new grpcWeb.MethodDescriptor(
    '/services.auth.AccountService/ChooseCharacter',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.ChooseCharacterRequest,
    services_auth_auth_pb.ChooseCharacterResponse,
    (request: services_auth_auth_pb.ChooseCharacterRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.ChooseCharacterResponse.deserializeBinary
  );

  chooseCharacter(
    request: services_auth_auth_pb.ChooseCharacterRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.ChooseCharacterResponse>;

  chooseCharacter(
    request: services_auth_auth_pb.ChooseCharacterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.ChooseCharacterResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.ChooseCharacterResponse>;

  chooseCharacter(
    request: services_auth_auth_pb.ChooseCharacterRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.ChooseCharacterResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AccountService/ChooseCharacter',
        request,
        metadata || {},
        this.methodDescriptorChooseCharacter,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AccountService/ChooseCharacter',
    request,
    metadata || {},
    this.methodDescriptorChooseCharacter);
  }

  methodDescriptorLogout = new grpcWeb.MethodDescriptor(
    '/services.auth.AccountService/Logout',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.LogoutRequest,
    services_auth_auth_pb.LogoutResponse,
    (request: services_auth_auth_pb.LogoutRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.LogoutResponse.deserializeBinary
  );

  logout(
    request: services_auth_auth_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.LogoutResponse>;

  logout(
    request: services_auth_auth_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.LogoutResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.LogoutResponse>;

  logout(
    request: services_auth_auth_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.LogoutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AccountService/Logout',
        request,
        metadata || {},
        this.methodDescriptorLogout,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AccountService/Logout',
    request,
    metadata || {},
    this.methodDescriptorLogout);
  }

}

