// source: services/citizenstore/citizenstore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var resources_common_database_database_pb = require('../../resources/common/database/database_pb.js');
goog.object.extend(proto, resources_common_database_database_pb);
var resources_users_users_pb = require('../../resources/users/users_pb.js');
goog.object.extend(proto, resources_users_users_pb);
goog.exportSymbol('proto.services.citizenstore.FindUsersRequest', null, global);
goog.exportSymbol('proto.services.citizenstore.FindUsersResponse', null, global);
goog.exportSymbol('proto.services.citizenstore.GetUserActivityRequest', null, global);
goog.exportSymbol('proto.services.citizenstore.GetUserActivityResponse', null, global);
goog.exportSymbol('proto.services.citizenstore.GetUserRequest', null, global);
goog.exportSymbol('proto.services.citizenstore.GetUserResponse', null, global);
goog.exportSymbol('proto.services.citizenstore.SetUserPropsRequest', null, global);
goog.exportSymbol('proto.services.citizenstore.SetUserPropsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.citizenstore.FindUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.citizenstore.FindUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.citizenstore.FindUsersRequest.displayName = 'proto.services.citizenstore.FindUsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.citizenstore.FindUsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.citizenstore.FindUsersResponse.repeatedFields_, null);
};
goog.inherits(proto.services.citizenstore.FindUsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.citizenstore.FindUsersResponse.displayName = 'proto.services.citizenstore.FindUsersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.citizenstore.GetUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.citizenstore.GetUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.citizenstore.GetUserRequest.displayName = 'proto.services.citizenstore.GetUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.citizenstore.GetUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.citizenstore.GetUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.citizenstore.GetUserResponse.displayName = 'proto.services.citizenstore.GetUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.citizenstore.GetUserActivityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.citizenstore.GetUserActivityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.citizenstore.GetUserActivityRequest.displayName = 'proto.services.citizenstore.GetUserActivityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.citizenstore.GetUserActivityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.citizenstore.GetUserActivityResponse.repeatedFields_, null);
};
goog.inherits(proto.services.citizenstore.GetUserActivityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.citizenstore.GetUserActivityResponse.displayName = 'proto.services.citizenstore.GetUserActivityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.citizenstore.SetUserPropsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.citizenstore.SetUserPropsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.citizenstore.SetUserPropsRequest.displayName = 'proto.services.citizenstore.SetUserPropsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.citizenstore.SetUserPropsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.citizenstore.SetUserPropsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.citizenstore.SetUserPropsResponse.displayName = 'proto.services.citizenstore.SetUserPropsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.citizenstore.FindUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.citizenstore.FindUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.citizenstore.FindUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.FindUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagination: (f = msg.getPagination()) && resources_common_database_database_pb.PaginationRequest.toObject(includeInstance, f),
    searchName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    wanted: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.citizenstore.FindUsersRequest}
 */
proto.services.citizenstore.FindUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.citizenstore.FindUsersRequest;
  return proto.services.citizenstore.FindUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.citizenstore.FindUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.citizenstore.FindUsersRequest}
 */
proto.services.citizenstore.FindUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_common_database_database_pb.PaginationRequest;
      reader.readMessage(value,resources_common_database_database_pb.PaginationRequest.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWanted(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.citizenstore.FindUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.citizenstore.FindUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.citizenstore.FindUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.FindUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      resources_common_database_database_pb.PaginationRequest.serializeBinaryToWriter
    );
  }
  f = message.getSearchName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWanted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional resources.common.database.PaginationRequest pagination = 1;
 * @return {?proto.resources.common.database.PaginationRequest}
 */
proto.services.citizenstore.FindUsersRequest.prototype.getPagination = function() {
  return /** @type{?proto.resources.common.database.PaginationRequest} */ (
    jspb.Message.getWrapperField(this, resources_common_database_database_pb.PaginationRequest, 1));
};


/**
 * @param {?proto.resources.common.database.PaginationRequest|undefined} value
 * @return {!proto.services.citizenstore.FindUsersRequest} returns this
*/
proto.services.citizenstore.FindUsersRequest.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.citizenstore.FindUsersRequest} returns this
 */
proto.services.citizenstore.FindUsersRequest.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.citizenstore.FindUsersRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string search_name = 2;
 * @return {string}
 */
proto.services.citizenstore.FindUsersRequest.prototype.getSearchName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.citizenstore.FindUsersRequest} returns this
 */
proto.services.citizenstore.FindUsersRequest.prototype.setSearchName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool wanted = 3;
 * @return {boolean}
 */
proto.services.citizenstore.FindUsersRequest.prototype.getWanted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.services.citizenstore.FindUsersRequest} returns this
 */
proto.services.citizenstore.FindUsersRequest.prototype.setWanted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string phone_number = 4;
 * @return {string}
 */
proto.services.citizenstore.FindUsersRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.citizenstore.FindUsersRequest} returns this
 */
proto.services.citizenstore.FindUsersRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.citizenstore.FindUsersResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.citizenstore.FindUsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.citizenstore.FindUsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.citizenstore.FindUsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.FindUsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagination: (f = msg.getPagination()) && resources_common_database_database_pb.PaginationResponse.toObject(includeInstance, f),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    resources_users_users_pb.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.citizenstore.FindUsersResponse}
 */
proto.services.citizenstore.FindUsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.citizenstore.FindUsersResponse;
  return proto.services.citizenstore.FindUsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.citizenstore.FindUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.citizenstore.FindUsersResponse}
 */
proto.services.citizenstore.FindUsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_common_database_database_pb.PaginationResponse;
      reader.readMessage(value,resources_common_database_database_pb.PaginationResponse.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 2:
      var value = new resources_users_users_pb.User;
      reader.readMessage(value,resources_users_users_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.citizenstore.FindUsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.citizenstore.FindUsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.citizenstore.FindUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.FindUsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      resources_common_database_database_pb.PaginationResponse.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      resources_users_users_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional resources.common.database.PaginationResponse pagination = 1;
 * @return {?proto.resources.common.database.PaginationResponse}
 */
proto.services.citizenstore.FindUsersResponse.prototype.getPagination = function() {
  return /** @type{?proto.resources.common.database.PaginationResponse} */ (
    jspb.Message.getWrapperField(this, resources_common_database_database_pb.PaginationResponse, 1));
};


/**
 * @param {?proto.resources.common.database.PaginationResponse|undefined} value
 * @return {!proto.services.citizenstore.FindUsersResponse} returns this
*/
proto.services.citizenstore.FindUsersResponse.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.citizenstore.FindUsersResponse} returns this
 */
proto.services.citizenstore.FindUsersResponse.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.citizenstore.FindUsersResponse.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated resources.users.User users = 2;
 * @return {!Array<!proto.resources.users.User>}
 */
proto.services.citizenstore.FindUsersResponse.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.resources.users.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, resources_users_users_pb.User, 2));
};


/**
 * @param {!Array<!proto.resources.users.User>} value
 * @return {!proto.services.citizenstore.FindUsersResponse} returns this
*/
proto.services.citizenstore.FindUsersResponse.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.resources.users.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.resources.users.User}
 */
proto.services.citizenstore.FindUsersResponse.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.resources.users.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.citizenstore.FindUsersResponse} returns this
 */
proto.services.citizenstore.FindUsersResponse.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.citizenstore.GetUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.citizenstore.GetUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.citizenstore.GetUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.GetUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.citizenstore.GetUserRequest}
 */
proto.services.citizenstore.GetUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.citizenstore.GetUserRequest;
  return proto.services.citizenstore.GetUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.citizenstore.GetUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.citizenstore.GetUserRequest}
 */
proto.services.citizenstore.GetUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.citizenstore.GetUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.citizenstore.GetUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.citizenstore.GetUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.GetUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 user_id = 1;
 * @return {number}
 */
proto.services.citizenstore.GetUserRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.citizenstore.GetUserRequest} returns this
 */
proto.services.citizenstore.GetUserRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.citizenstore.GetUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.citizenstore.GetUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.citizenstore.GetUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.GetUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && resources_users_users_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.citizenstore.GetUserResponse}
 */
proto.services.citizenstore.GetUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.citizenstore.GetUserResponse;
  return proto.services.citizenstore.GetUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.citizenstore.GetUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.citizenstore.GetUserResponse}
 */
proto.services.citizenstore.GetUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_users_users_pb.User;
      reader.readMessage(value,resources_users_users_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.citizenstore.GetUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.citizenstore.GetUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.citizenstore.GetUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.GetUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      resources_users_users_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional resources.users.User user = 1;
 * @return {?proto.resources.users.User}
 */
proto.services.citizenstore.GetUserResponse.prototype.getUser = function() {
  return /** @type{?proto.resources.users.User} */ (
    jspb.Message.getWrapperField(this, resources_users_users_pb.User, 1));
};


/**
 * @param {?proto.resources.users.User|undefined} value
 * @return {!proto.services.citizenstore.GetUserResponse} returns this
*/
proto.services.citizenstore.GetUserResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.citizenstore.GetUserResponse} returns this
 */
proto.services.citizenstore.GetUserResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.citizenstore.GetUserResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.citizenstore.GetUserActivityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.citizenstore.GetUserActivityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.citizenstore.GetUserActivityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.GetUserActivityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.citizenstore.GetUserActivityRequest}
 */
proto.services.citizenstore.GetUserActivityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.citizenstore.GetUserActivityRequest;
  return proto.services.citizenstore.GetUserActivityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.citizenstore.GetUserActivityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.citizenstore.GetUserActivityRequest}
 */
proto.services.citizenstore.GetUserActivityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.citizenstore.GetUserActivityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.citizenstore.GetUserActivityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.citizenstore.GetUserActivityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.GetUserActivityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 user_id = 1;
 * @return {number}
 */
proto.services.citizenstore.GetUserActivityRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.citizenstore.GetUserActivityRequest} returns this
 */
proto.services.citizenstore.GetUserActivityRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.citizenstore.GetUserActivityResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.citizenstore.GetUserActivityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.citizenstore.GetUserActivityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.citizenstore.GetUserActivityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.GetUserActivityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityList: jspb.Message.toObjectList(msg.getActivityList(),
    resources_users_users_pb.UserActivity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.citizenstore.GetUserActivityResponse}
 */
proto.services.citizenstore.GetUserActivityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.citizenstore.GetUserActivityResponse;
  return proto.services.citizenstore.GetUserActivityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.citizenstore.GetUserActivityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.citizenstore.GetUserActivityResponse}
 */
proto.services.citizenstore.GetUserActivityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_users_users_pb.UserActivity;
      reader.readMessage(value,resources_users_users_pb.UserActivity.deserializeBinaryFromReader);
      msg.addActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.citizenstore.GetUserActivityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.citizenstore.GetUserActivityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.citizenstore.GetUserActivityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.GetUserActivityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      resources_users_users_pb.UserActivity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated resources.users.UserActivity activity = 1;
 * @return {!Array<!proto.resources.users.UserActivity>}
 */
proto.services.citizenstore.GetUserActivityResponse.prototype.getActivityList = function() {
  return /** @type{!Array<!proto.resources.users.UserActivity>} */ (
    jspb.Message.getRepeatedWrapperField(this, resources_users_users_pb.UserActivity, 1));
};


/**
 * @param {!Array<!proto.resources.users.UserActivity>} value
 * @return {!proto.services.citizenstore.GetUserActivityResponse} returns this
*/
proto.services.citizenstore.GetUserActivityResponse.prototype.setActivityList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.resources.users.UserActivity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.resources.users.UserActivity}
 */
proto.services.citizenstore.GetUserActivityResponse.prototype.addActivity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.resources.users.UserActivity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.citizenstore.GetUserActivityResponse} returns this
 */
proto.services.citizenstore.GetUserActivityResponse.prototype.clearActivityList = function() {
  return this.setActivityList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.citizenstore.SetUserPropsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.citizenstore.SetUserPropsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.citizenstore.SetUserPropsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.SetUserPropsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    props: (f = msg.getProps()) && resources_users_users_pb.UserProps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.citizenstore.SetUserPropsRequest}
 */
proto.services.citizenstore.SetUserPropsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.citizenstore.SetUserPropsRequest;
  return proto.services.citizenstore.SetUserPropsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.citizenstore.SetUserPropsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.citizenstore.SetUserPropsRequest}
 */
proto.services.citizenstore.SetUserPropsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_users_users_pb.UserProps;
      reader.readMessage(value,resources_users_users_pb.UserProps.deserializeBinaryFromReader);
      msg.setProps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.citizenstore.SetUserPropsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.citizenstore.SetUserPropsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.citizenstore.SetUserPropsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.SetUserPropsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProps();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      resources_users_users_pb.UserProps.serializeBinaryToWriter
    );
  }
};


/**
 * optional resources.users.UserProps props = 1;
 * @return {?proto.resources.users.UserProps}
 */
proto.services.citizenstore.SetUserPropsRequest.prototype.getProps = function() {
  return /** @type{?proto.resources.users.UserProps} */ (
    jspb.Message.getWrapperField(this, resources_users_users_pb.UserProps, 1));
};


/**
 * @param {?proto.resources.users.UserProps|undefined} value
 * @return {!proto.services.citizenstore.SetUserPropsRequest} returns this
*/
proto.services.citizenstore.SetUserPropsRequest.prototype.setProps = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.citizenstore.SetUserPropsRequest} returns this
 */
proto.services.citizenstore.SetUserPropsRequest.prototype.clearProps = function() {
  return this.setProps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.citizenstore.SetUserPropsRequest.prototype.hasProps = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.citizenstore.SetUserPropsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.citizenstore.SetUserPropsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.citizenstore.SetUserPropsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.SetUserPropsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    props: (f = msg.getProps()) && resources_users_users_pb.UserProps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.citizenstore.SetUserPropsResponse}
 */
proto.services.citizenstore.SetUserPropsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.citizenstore.SetUserPropsResponse;
  return proto.services.citizenstore.SetUserPropsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.citizenstore.SetUserPropsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.citizenstore.SetUserPropsResponse}
 */
proto.services.citizenstore.SetUserPropsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_users_users_pb.UserProps;
      reader.readMessage(value,resources_users_users_pb.UserProps.deserializeBinaryFromReader);
      msg.setProps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.citizenstore.SetUserPropsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.citizenstore.SetUserPropsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.citizenstore.SetUserPropsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.citizenstore.SetUserPropsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProps();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      resources_users_users_pb.UserProps.serializeBinaryToWriter
    );
  }
};


/**
 * optional resources.users.UserProps props = 1;
 * @return {?proto.resources.users.UserProps}
 */
proto.services.citizenstore.SetUserPropsResponse.prototype.getProps = function() {
  return /** @type{?proto.resources.users.UserProps} */ (
    jspb.Message.getWrapperField(this, resources_users_users_pb.UserProps, 1));
};


/**
 * @param {?proto.resources.users.UserProps|undefined} value
 * @return {!proto.services.citizenstore.SetUserPropsResponse} returns this
*/
proto.services.citizenstore.SetUserPropsResponse.prototype.setProps = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.citizenstore.SetUserPropsResponse} returns this
 */
proto.services.citizenstore.SetUserPropsResponse.prototype.clearProps = function() {
  return this.setProps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.citizenstore.SetUserPropsResponse.prototype.hasProps = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.services.citizenstore);
