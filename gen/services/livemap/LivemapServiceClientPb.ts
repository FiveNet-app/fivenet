/**
 * @fileoverview gRPC-Web generated client stub for services.livemap
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: services/livemap/livemap.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as services_livemap_livemap_pb from '../../services/livemap/livemap_pb';


export class LivemapServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorStream = new grpcWeb.MethodDescriptor(
    '/services.livemap.LivemapService/Stream',
    grpcWeb.MethodType.SERVER_STREAMING,
    services_livemap_livemap_pb.StreamRequest,
    services_livemap_livemap_pb.ServerStreamResponse,
    (request: services_livemap_livemap_pb.StreamRequest) => {
      return request.serializeBinary();
    },
    services_livemap_livemap_pb.ServerStreamResponse.deserializeBinary
  );

  stream(
    request: services_livemap_livemap_pb.StreamRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<services_livemap_livemap_pb.ServerStreamResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/services.livemap.LivemapService/Stream',
      request,
      metadata || {},
      this.methodDescriptorStream);
  }

}

