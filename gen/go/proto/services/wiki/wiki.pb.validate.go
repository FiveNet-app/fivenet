// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/wiki/wiki.proto

package wiki

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListPagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPagesRequestMultiError, or nil if none found.
func (m *ListPagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListPagesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPagesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPagesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPagesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Prefix

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPagesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPagesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPagesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPagesRequestMultiError(errors)
	}

	return nil
}

// ListPagesRequestMultiError is an error wrapping multiple validation errors
// returned by ListPagesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPagesRequestMultiError) AllErrors() []error { return m }

// ListPagesRequestValidationError is the validation error returned by
// ListPagesRequest.Validate if the designated constraints aren't met.
type ListPagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPagesRequestValidationError) ErrorName() string { return "ListPagesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPagesRequestValidationError{}

// Validate checks the field values on ListPagesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPagesResponseMultiError, or nil if none found.
func (m *ListPagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListPagesResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPagesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPagesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPagesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPagesResponseValidationError{
						field:  fmt.Sprintf("Pages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPagesResponseValidationError{
						field:  fmt.Sprintf("Pages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPagesResponseValidationError{
					field:  fmt.Sprintf("Pages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPagesResponseMultiError(errors)
	}

	return nil
}

// ListPagesResponseMultiError is an error wrapping multiple validation errors
// returned by ListPagesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPagesResponseMultiError) AllErrors() []error { return m }

// ListPagesResponseValidationError is the validation error returned by
// ListPagesResponse.Validate if the designated constraints aren't met.
type ListPagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPagesResponseValidationError) ErrorName() string {
	return "ListPagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPagesResponseValidationError{}

// Validate checks the field values on GetPageRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPageRequestMultiError,
// or nil if none found.
func (m *GetPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPageRequestMultiError(errors)
	}

	return nil
}

// GetPageRequestMultiError is an error wrapping multiple validation errors
// returned by GetPageRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPageRequestMultiError) AllErrors() []error { return m }

// GetPageRequestValidationError is the validation error returned by
// GetPageRequest.Validate if the designated constraints aren't met.
type GetPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPageRequestValidationError) ErrorName() string { return "GetPageRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPageRequestValidationError{}

// Validate checks the field values on GetPageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPageResponseMultiError, or nil if none found.
func (m *GetPageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPageResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPageResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPageResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPageResponseMultiError(errors)
	}

	return nil
}

// GetPageResponseMultiError is an error wrapping multiple validation errors
// returned by GetPageResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPageResponseMultiError) AllErrors() []error { return m }

// GetPageResponseValidationError is the validation error returned by
// GetPageResponse.Validate if the designated constraints aren't met.
type GetPageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPageResponseValidationError) ErrorName() string { return "GetPageResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPageResponseValidationError{}

// Validate checks the field values on CreateOrUpdatePageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdatePageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdatePageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdatePageRequestMultiError, or nil if none found.
func (m *CreateOrUpdatePageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdatePageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdatePageRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdatePageRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdatePageRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdatePageRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdatePageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrUpdatePageRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrUpdatePageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdatePageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdatePageRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdatePageRequestValidationError is the validation error returned by
// CreateOrUpdatePageRequest.Validate if the designated constraints aren't met.
type CreateOrUpdatePageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdatePageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdatePageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdatePageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdatePageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdatePageRequestValidationError) ErrorName() string {
	return "CreateOrUpdatePageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdatePageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdatePageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdatePageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdatePageRequestValidationError{}

// Validate checks the field values on CreateOrUpdatePageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdatePageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdatePageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdatePageResponseMultiError, or nil if none found.
func (m *CreateOrUpdatePageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdatePageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdatePageResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdatePageResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdatePageResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdatePageResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdatePageResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdatePageResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdatePageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdatePageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdatePageResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdatePageResponseValidationError is the validation error returned
// by CreateOrUpdatePageResponse.Validate if the designated constraints aren't met.
type CreateOrUpdatePageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdatePageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdatePageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdatePageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdatePageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdatePageResponseValidationError) ErrorName() string {
	return "CreateOrUpdatePageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdatePageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdatePageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdatePageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdatePageResponseValidationError{}

// Validate checks the field values on DeletePageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePageRequestMultiError, or nil if none found.
func (m *DeletePageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePageRequestMultiError(errors)
	}

	return nil
}

// DeletePageRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePageRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePageRequestMultiError) AllErrors() []error { return m }

// DeletePageRequestValidationError is the validation error returned by
// DeletePageRequest.Validate if the designated constraints aren't met.
type DeletePageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePageRequestValidationError) ErrorName() string {
	return "DeletePageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePageRequestValidationError{}

// Validate checks the field values on DeletePageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePageResponseMultiError, or nil if none found.
func (m *DeletePageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePageResponseMultiError(errors)
	}

	return nil
}

// DeletePageResponseMultiError is an error wrapping multiple validation errors
// returned by DeletePageResponse.ValidateAll() if the designated constraints
// aren't met.
type DeletePageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePageResponseMultiError) AllErrors() []error { return m }

// DeletePageResponseValidationError is the validation error returned by
// DeletePageResponse.Validate if the designated constraints aren't met.
type DeletePageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePageResponseValidationError) ErrorName() string {
	return "DeletePageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePageResponseValidationError{}

// Validate checks the field values on GetPageHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPageHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPageHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPageHistoryRequestMultiError, or nil if none found.
func (m *GetPageHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPageHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPageHistoryRequestMultiError(errors)
	}

	return nil
}

// GetPageHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetPageHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPageHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPageHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPageHistoryRequestMultiError) AllErrors() []error { return m }

// GetPageHistoryRequestValidationError is the validation error returned by
// GetPageHistoryRequest.Validate if the designated constraints aren't met.
type GetPageHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPageHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPageHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPageHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPageHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPageHistoryRequestValidationError) ErrorName() string {
	return "GetPageHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPageHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPageHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPageHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPageHistoryRequestValidationError{}

// Validate checks the field values on GetPageHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPageHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPageHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPageHistoryResponseMultiError, or nil if none found.
func (m *GetPageHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPageHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPageHistoryResponseMultiError(errors)
	}

	return nil
}

// GetPageHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetPageHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPageHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPageHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPageHistoryResponseMultiError) AllErrors() []error { return m }

// GetPageHistoryResponseValidationError is the validation error returned by
// GetPageHistoryResponse.Validate if the designated constraints aren't met.
type GetPageHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPageHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPageHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPageHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPageHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPageHistoryResponseValidationError) ErrorName() string {
	return "GetPageHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPageHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPageHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPageHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPageHistoryResponseValidationError{}
