// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services/centrum/centrum.proto

package centrum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentrumServiceClient is the client API for CentrumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentrumServiceClient interface {
	// @perm
	ListUnits(ctx context.Context, in *ListUnitsRequest, opts ...grpc.CallOption) (*ListUnitsResponse, error)
	// @perm
	CreateOrUpdateUnit(ctx context.Context, in *CreateOrUpdateUnitRequest, opts ...grpc.CallOption) (*CreateOrUpdateUnitResponse, error)
	// @perm
	DeleteUnit(ctx context.Context, in *DeleteUnitRequest, opts ...grpc.CallOption) (*DeleteUnitResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank"}ยง[]string{"Own"}
	AssignUnit(ctx context.Context, in *AssignUnitRequest, opts ...grpc.CallOption) (*AssignUnitResponse, error)
	// @perm
	UpdateUnitStatus(ctx context.Context, in *UpdateUnitStatusRequest, opts ...grpc.CallOption) (*UpdateUnitStatusResponse, error)
	// @perm
	CreateDispatch(ctx context.Context, in *CreateDispatchRequest, opts ...grpc.CallOption) (*CreateDispatchResponse, error)
	// @perm
	UpdateDispatch(ctx context.Context, in *UpdateDispatchRequest, opts ...grpc.CallOption) (*UpdateDispatchResponse, error)
	// @perm
	TakeDispatch(ctx context.Context, in *TakeDispatchRequest, opts ...grpc.CallOption) (*TakeDispatchResponse, error)
	// @perm
	Stream(ctx context.Context, in *CentrumStreamRequest, opts ...grpc.CallOption) (CentrumService_StreamClient, error)
}

type centrumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentrumServiceClient(cc grpc.ClientConnInterface) CentrumServiceClient {
	return &centrumServiceClient{cc}
}

func (c *centrumServiceClient) ListUnits(ctx context.Context, in *ListUnitsRequest, opts ...grpc.CallOption) (*ListUnitsResponse, error) {
	out := new(ListUnitsResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/ListUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) CreateOrUpdateUnit(ctx context.Context, in *CreateOrUpdateUnitRequest, opts ...grpc.CallOption) (*CreateOrUpdateUnitResponse, error) {
	out := new(CreateOrUpdateUnitResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/CreateOrUpdateUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) DeleteUnit(ctx context.Context, in *DeleteUnitRequest, opts ...grpc.CallOption) (*DeleteUnitResponse, error) {
	out := new(DeleteUnitResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/DeleteUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) AssignUnit(ctx context.Context, in *AssignUnitRequest, opts ...grpc.CallOption) (*AssignUnitResponse, error) {
	out := new(AssignUnitResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/AssignUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) UpdateUnitStatus(ctx context.Context, in *UpdateUnitStatusRequest, opts ...grpc.CallOption) (*UpdateUnitStatusResponse, error) {
	out := new(UpdateUnitStatusResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/UpdateUnitStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) CreateDispatch(ctx context.Context, in *CreateDispatchRequest, opts ...grpc.CallOption) (*CreateDispatchResponse, error) {
	out := new(CreateDispatchResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/CreateDispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) UpdateDispatch(ctx context.Context, in *UpdateDispatchRequest, opts ...grpc.CallOption) (*UpdateDispatchResponse, error) {
	out := new(UpdateDispatchResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/UpdateDispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) TakeDispatch(ctx context.Context, in *TakeDispatchRequest, opts ...grpc.CallOption) (*TakeDispatchResponse, error) {
	out := new(TakeDispatchResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/TakeDispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) Stream(ctx context.Context, in *CentrumStreamRequest, opts ...grpc.CallOption) (CentrumService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentrumService_ServiceDesc.Streams[0], "/services.centrum.CentrumService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrumServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CentrumService_StreamClient interface {
	Recv() (*CentrumStreamResponse, error)
	grpc.ClientStream
}

type centrumServiceStreamClient struct {
	grpc.ClientStream
}

func (x *centrumServiceStreamClient) Recv() (*CentrumStreamResponse, error) {
	m := new(CentrumStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentrumServiceServer is the server API for CentrumService service.
// All implementations must embed UnimplementedCentrumServiceServer
// for forward compatibility
type CentrumServiceServer interface {
	// @perm
	ListUnits(context.Context, *ListUnitsRequest) (*ListUnitsResponse, error)
	// @perm
	CreateOrUpdateUnit(context.Context, *CreateOrUpdateUnitRequest) (*CreateOrUpdateUnitResponse, error)
	// @perm
	DeleteUnit(context.Context, *DeleteUnitRequest) (*DeleteUnitResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank"}ยง[]string{"Own"}
	AssignUnit(context.Context, *AssignUnitRequest) (*AssignUnitResponse, error)
	// @perm
	UpdateUnitStatus(context.Context, *UpdateUnitStatusRequest) (*UpdateUnitStatusResponse, error)
	// @perm
	CreateDispatch(context.Context, *CreateDispatchRequest) (*CreateDispatchResponse, error)
	// @perm
	UpdateDispatch(context.Context, *UpdateDispatchRequest) (*UpdateDispatchResponse, error)
	// @perm
	TakeDispatch(context.Context, *TakeDispatchRequest) (*TakeDispatchResponse, error)
	// @perm
	Stream(*CentrumStreamRequest, CentrumService_StreamServer) error
	mustEmbedUnimplementedCentrumServiceServer()
}

// UnimplementedCentrumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCentrumServiceServer struct {
}

func (UnimplementedCentrumServiceServer) ListUnits(context.Context, *ListUnitsRequest) (*ListUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnits not implemented")
}
func (UnimplementedCentrumServiceServer) CreateOrUpdateUnit(context.Context, *CreateOrUpdateUnitRequest) (*CreateOrUpdateUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateUnit not implemented")
}
func (UnimplementedCentrumServiceServer) DeleteUnit(context.Context, *DeleteUnitRequest) (*DeleteUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnit not implemented")
}
func (UnimplementedCentrumServiceServer) AssignUnit(context.Context, *AssignUnitRequest) (*AssignUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUnit not implemented")
}
func (UnimplementedCentrumServiceServer) UpdateUnitStatus(context.Context, *UpdateUnitStatusRequest) (*UpdateUnitStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnitStatus not implemented")
}
func (UnimplementedCentrumServiceServer) CreateDispatch(context.Context, *CreateDispatchRequest) (*CreateDispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDispatch not implemented")
}
func (UnimplementedCentrumServiceServer) UpdateDispatch(context.Context, *UpdateDispatchRequest) (*UpdateDispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDispatch not implemented")
}
func (UnimplementedCentrumServiceServer) TakeDispatch(context.Context, *TakeDispatchRequest) (*TakeDispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeDispatch not implemented")
}
func (UnimplementedCentrumServiceServer) Stream(*CentrumStreamRequest, CentrumService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedCentrumServiceServer) mustEmbedUnimplementedCentrumServiceServer() {}

// UnsafeCentrumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentrumServiceServer will
// result in compilation errors.
type UnsafeCentrumServiceServer interface {
	mustEmbedUnimplementedCentrumServiceServer()
}

func RegisterCentrumServiceServer(s grpc.ServiceRegistrar, srv CentrumServiceServer) {
	s.RegisterService(&CentrumService_ServiceDesc, srv)
}

func _CentrumService_ListUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).ListUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/ListUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).ListUnits(ctx, req.(*ListUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_CreateOrUpdateUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).CreateOrUpdateUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/CreateOrUpdateUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).CreateOrUpdateUnit(ctx, req.(*CreateOrUpdateUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_DeleteUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).DeleteUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/DeleteUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).DeleteUnit(ctx, req.(*DeleteUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_AssignUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).AssignUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/AssignUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).AssignUnit(ctx, req.(*AssignUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_UpdateUnitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnitStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).UpdateUnitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/UpdateUnitStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).UpdateUnitStatus(ctx, req.(*UpdateUnitStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_CreateDispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).CreateDispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/CreateDispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).CreateDispatch(ctx, req.(*CreateDispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_UpdateDispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).UpdateDispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/UpdateDispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).UpdateDispatch(ctx, req.(*UpdateDispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_TakeDispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeDispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).TakeDispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/TakeDispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).TakeDispatch(ctx, req.(*TakeDispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CentrumStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CentrumServiceServer).Stream(m, &centrumServiceStreamServer{stream})
}

type CentrumService_StreamServer interface {
	Send(*CentrumStreamResponse) error
	grpc.ServerStream
}

type centrumServiceStreamServer struct {
	grpc.ServerStream
}

func (x *centrumServiceStreamServer) Send(m *CentrumStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CentrumService_ServiceDesc is the grpc.ServiceDesc for CentrumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentrumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.centrum.CentrumService",
	HandlerType: (*CentrumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUnits",
			Handler:    _CentrumService_ListUnits_Handler,
		},
		{
			MethodName: "CreateOrUpdateUnit",
			Handler:    _CentrumService_CreateOrUpdateUnit_Handler,
		},
		{
			MethodName: "DeleteUnit",
			Handler:    _CentrumService_DeleteUnit_Handler,
		},
		{
			MethodName: "AssignUnit",
			Handler:    _CentrumService_AssignUnit_Handler,
		},
		{
			MethodName: "UpdateUnitStatus",
			Handler:    _CentrumService_UpdateUnitStatus_Handler,
		},
		{
			MethodName: "CreateDispatch",
			Handler:    _CentrumService_CreateDispatch_Handler,
		},
		{
			MethodName: "UpdateDispatch",
			Handler:    _CentrumService_UpdateDispatch_Handler,
		},
		{
			MethodName: "TakeDispatch",
			Handler:    _CentrumService_TakeDispatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _CentrumService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/centrum/centrum.proto",
}
