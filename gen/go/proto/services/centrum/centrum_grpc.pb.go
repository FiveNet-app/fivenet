// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services/centrum/centrum.proto

package centrum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SquadServiceClient is the client API for SquadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquadServiceClient interface {
	// @perm
	ListSquads(ctx context.Context, in *ListSquadsRequest, opts ...grpc.CallOption) (*ListSquadsResponse, error)
	// @perm
	CreateSquad(ctx context.Context, in *CreateSquadRequest, opts ...grpc.CallOption) (*CreateSquadResponse, error)
	// @perm: Name=CreateSquad
	UpdateSquad(ctx context.Context, in *UpdateSquadRequest, opts ...grpc.CallOption) (*UpdateSquadResponse, error)
	// @perm: Name=DeleteSquad
	DeleteSquad(ctx context.Context, in *DeleteSquadRequest, opts ...grpc.CallOption) (*DeleteSquadResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank"}ยง[]string{"Own"}
	AssignSquad(ctx context.Context, in *AssignSquadRequest, opts ...grpc.CallOption) (*AssignSquadResponse, error)
	// @perm
	StreamSquads(ctx context.Context, in *SquadStreamRequest, opts ...grpc.CallOption) (SquadService_StreamSquadsClient, error)
}

type squadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSquadServiceClient(cc grpc.ClientConnInterface) SquadServiceClient {
	return &squadServiceClient{cc}
}

func (c *squadServiceClient) ListSquads(ctx context.Context, in *ListSquadsRequest, opts ...grpc.CallOption) (*ListSquadsResponse, error) {
	out := new(ListSquadsResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.SquadService/ListSquads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadServiceClient) CreateSquad(ctx context.Context, in *CreateSquadRequest, opts ...grpc.CallOption) (*CreateSquadResponse, error) {
	out := new(CreateSquadResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.SquadService/CreateSquad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadServiceClient) UpdateSquad(ctx context.Context, in *UpdateSquadRequest, opts ...grpc.CallOption) (*UpdateSquadResponse, error) {
	out := new(UpdateSquadResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.SquadService/UpdateSquad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadServiceClient) DeleteSquad(ctx context.Context, in *DeleteSquadRequest, opts ...grpc.CallOption) (*DeleteSquadResponse, error) {
	out := new(DeleteSquadResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.SquadService/DeleteSquad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadServiceClient) AssignSquad(ctx context.Context, in *AssignSquadRequest, opts ...grpc.CallOption) (*AssignSquadResponse, error) {
	out := new(AssignSquadResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.SquadService/AssignSquad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadServiceClient) StreamSquads(ctx context.Context, in *SquadStreamRequest, opts ...grpc.CallOption) (SquadService_StreamSquadsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SquadService_ServiceDesc.Streams[0], "/services.centrum.SquadService/StreamSquads", opts...)
	if err != nil {
		return nil, err
	}
	x := &squadServiceStreamSquadsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SquadService_StreamSquadsClient interface {
	Recv() (*SquadStreamResponse, error)
	grpc.ClientStream
}

type squadServiceStreamSquadsClient struct {
	grpc.ClientStream
}

func (x *squadServiceStreamSquadsClient) Recv() (*SquadStreamResponse, error) {
	m := new(SquadStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SquadServiceServer is the server API for SquadService service.
// All implementations must embed UnimplementedSquadServiceServer
// for forward compatibility
type SquadServiceServer interface {
	// @perm
	ListSquads(context.Context, *ListSquadsRequest) (*ListSquadsResponse, error)
	// @perm
	CreateSquad(context.Context, *CreateSquadRequest) (*CreateSquadResponse, error)
	// @perm: Name=CreateSquad
	UpdateSquad(context.Context, *UpdateSquadRequest) (*UpdateSquadResponse, error)
	// @perm: Name=DeleteSquad
	DeleteSquad(context.Context, *DeleteSquadRequest) (*DeleteSquadResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank"}ยง[]string{"Own"}
	AssignSquad(context.Context, *AssignSquadRequest) (*AssignSquadResponse, error)
	// @perm
	StreamSquads(*SquadStreamRequest, SquadService_StreamSquadsServer) error
	mustEmbedUnimplementedSquadServiceServer()
}

// UnimplementedSquadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSquadServiceServer struct {
}

func (UnimplementedSquadServiceServer) ListSquads(context.Context, *ListSquadsRequest) (*ListSquadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSquads not implemented")
}
func (UnimplementedSquadServiceServer) CreateSquad(context.Context, *CreateSquadRequest) (*CreateSquadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSquad not implemented")
}
func (UnimplementedSquadServiceServer) UpdateSquad(context.Context, *UpdateSquadRequest) (*UpdateSquadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSquad not implemented")
}
func (UnimplementedSquadServiceServer) DeleteSquad(context.Context, *DeleteSquadRequest) (*DeleteSquadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSquad not implemented")
}
func (UnimplementedSquadServiceServer) AssignSquad(context.Context, *AssignSquadRequest) (*AssignSquadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignSquad not implemented")
}
func (UnimplementedSquadServiceServer) StreamSquads(*SquadStreamRequest, SquadService_StreamSquadsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSquads not implemented")
}
func (UnimplementedSquadServiceServer) mustEmbedUnimplementedSquadServiceServer() {}

// UnsafeSquadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquadServiceServer will
// result in compilation errors.
type UnsafeSquadServiceServer interface {
	mustEmbedUnimplementedSquadServiceServer()
}

func RegisterSquadServiceServer(s grpc.ServiceRegistrar, srv SquadServiceServer) {
	s.RegisterService(&SquadService_ServiceDesc, srv)
}

func _SquadService_ListSquads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSquadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).ListSquads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.SquadService/ListSquads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).ListSquads(ctx, req.(*ListSquadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadService_CreateSquad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSquadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).CreateSquad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.SquadService/CreateSquad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).CreateSquad(ctx, req.(*CreateSquadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadService_UpdateSquad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSquadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).UpdateSquad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.SquadService/UpdateSquad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).UpdateSquad(ctx, req.(*UpdateSquadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadService_DeleteSquad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSquadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).DeleteSquad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.SquadService/DeleteSquad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).DeleteSquad(ctx, req.(*DeleteSquadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadService_AssignSquad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignSquadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).AssignSquad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.SquadService/AssignSquad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).AssignSquad(ctx, req.(*AssignSquadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadService_StreamSquads_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SquadStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SquadServiceServer).StreamSquads(m, &squadServiceStreamSquadsServer{stream})
}

type SquadService_StreamSquadsServer interface {
	Send(*SquadStreamResponse) error
	grpc.ServerStream
}

type squadServiceStreamSquadsServer struct {
	grpc.ServerStream
}

func (x *squadServiceStreamSquadsServer) Send(m *SquadStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SquadService_ServiceDesc is the grpc.ServiceDesc for SquadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SquadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.centrum.SquadService",
	HandlerType: (*SquadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSquads",
			Handler:    _SquadService_ListSquads_Handler,
		},
		{
			MethodName: "CreateSquad",
			Handler:    _SquadService_CreateSquad_Handler,
		},
		{
			MethodName: "UpdateSquad",
			Handler:    _SquadService_UpdateSquad_Handler,
		},
		{
			MethodName: "DeleteSquad",
			Handler:    _SquadService_DeleteSquad_Handler,
		},
		{
			MethodName: "AssignSquad",
			Handler:    _SquadService_AssignSquad_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSquads",
			Handler:       _SquadService_StreamSquads_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/centrum/centrum.proto",
}

// CentrumServiceClient is the client API for CentrumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentrumServiceClient interface {
	// @perm
	CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error)
	// @perm
	Stream(ctx context.Context, in *CentrumStreamRequest, opts ...grpc.CallOption) (CentrumService_StreamClient, error)
}

type centrumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentrumServiceClient(cc grpc.ClientConnInterface) CentrumServiceClient {
	return &centrumServiceClient{cc}
}

func (c *centrumServiceClient) CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error) {
	out := new(CreateActionResponse)
	err := c.cc.Invoke(ctx, "/services.centrum.CentrumService/CreateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrumServiceClient) Stream(ctx context.Context, in *CentrumStreamRequest, opts ...grpc.CallOption) (CentrumService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentrumService_ServiceDesc.Streams[0], "/services.centrum.CentrumService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrumServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CentrumService_StreamClient interface {
	Recv() (*CentrumStreamResponse, error)
	grpc.ClientStream
}

type centrumServiceStreamClient struct {
	grpc.ClientStream
}

func (x *centrumServiceStreamClient) Recv() (*CentrumStreamResponse, error) {
	m := new(CentrumStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentrumServiceServer is the server API for CentrumService service.
// All implementations must embed UnimplementedCentrumServiceServer
// for forward compatibility
type CentrumServiceServer interface {
	// @perm
	CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error)
	// @perm
	Stream(*CentrumStreamRequest, CentrumService_StreamServer) error
	mustEmbedUnimplementedCentrumServiceServer()
}

// UnimplementedCentrumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCentrumServiceServer struct {
}

func (UnimplementedCentrumServiceServer) CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (UnimplementedCentrumServiceServer) Stream(*CentrumStreamRequest, CentrumService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedCentrumServiceServer) mustEmbedUnimplementedCentrumServiceServer() {}

// UnsafeCentrumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentrumServiceServer will
// result in compilation errors.
type UnsafeCentrumServiceServer interface {
	mustEmbedUnimplementedCentrumServiceServer()
}

func RegisterCentrumServiceServer(s grpc.ServiceRegistrar, srv CentrumServiceServer) {
	s.RegisterService(&CentrumService_ServiceDesc, srv)
}

func _CentrumService_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrumServiceServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.centrum.CentrumService/CreateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrumServiceServer).CreateAction(ctx, req.(*CreateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrumService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CentrumStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CentrumServiceServer).Stream(m, &centrumServiceStreamServer{stream})
}

type CentrumService_StreamServer interface {
	Send(*CentrumStreamResponse) error
	grpc.ServerStream
}

type centrumServiceStreamServer struct {
	grpc.ServerStream
}

func (x *centrumServiceStreamServer) Send(m *CentrumStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CentrumService_ServiceDesc is the grpc.ServiceDesc for CentrumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentrumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.centrum.CentrumService",
	HandlerType: (*CentrumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAction",
			Handler:    _CentrumService_CreateAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _CentrumService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/centrum/centrum.proto",
}
