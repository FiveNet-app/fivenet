// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services/notificator/notificator.proto

package notificator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificatorServiceClient is the client API for NotificatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificatorServiceClient interface {
	// @perm: Name=Any
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	// @perm: Name=Any
	ReadNotifications(ctx context.Context, in *ReadNotificationsRequest, opts ...grpc.CallOption) (*ReadNotificationsResponse, error)
	// @perm: Name=Any
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (NotificatorService_StreamClient, error)
}

type notificatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificatorServiceClient(cc grpc.ClientConnInterface) NotificatorServiceClient {
	return &notificatorServiceClient{cc}
}

func (c *notificatorServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, "/services.notificator.NotificatorService/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificatorServiceClient) ReadNotifications(ctx context.Context, in *ReadNotificationsRequest, opts ...grpc.CallOption) (*ReadNotificationsResponse, error) {
	out := new(ReadNotificationsResponse)
	err := c.cc.Invoke(ctx, "/services.notificator.NotificatorService/ReadNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificatorServiceClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (NotificatorService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificatorService_ServiceDesc.Streams[0], "/services.notificator.NotificatorService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificatorServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificatorService_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type notificatorServiceStreamClient struct {
	grpc.ClientStream
}

func (x *notificatorServiceStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificatorServiceServer is the server API for NotificatorService service.
// All implementations must embed UnimplementedNotificatorServiceServer
// for forward compatibility
type NotificatorServiceServer interface {
	// @perm: Name=Any
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	// @perm: Name=Any
	ReadNotifications(context.Context, *ReadNotificationsRequest) (*ReadNotificationsResponse, error)
	// @perm: Name=Any
	Stream(*StreamRequest, NotificatorService_StreamServer) error
	mustEmbedUnimplementedNotificatorServiceServer()
}

// UnimplementedNotificatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificatorServiceServer struct {
}

func (UnimplementedNotificatorServiceServer) GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificatorServiceServer) ReadNotifications(context.Context, *ReadNotificationsRequest) (*ReadNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotifications not implemented")
}
func (UnimplementedNotificatorServiceServer) Stream(*StreamRequest, NotificatorService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedNotificatorServiceServer) mustEmbedUnimplementedNotificatorServiceServer() {}

// UnsafeNotificatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificatorServiceServer will
// result in compilation errors.
type UnsafeNotificatorServiceServer interface {
	mustEmbedUnimplementedNotificatorServiceServer()
}

func RegisterNotificatorServiceServer(s grpc.ServiceRegistrar, srv NotificatorServiceServer) {
	s.RegisterService(&NotificatorService_ServiceDesc, srv)
}

func _NotificatorService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.notificator.NotificatorService/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServiceServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificatorService_ReadNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServiceServer).ReadNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.notificator.NotificatorService/ReadNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServiceServer).ReadNotifications(ctx, req.(*ReadNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificatorService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificatorServiceServer).Stream(m, &notificatorServiceStreamServer{stream})
}

type NotificatorService_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type notificatorServiceStreamServer struct {
	grpc.ServerStream
}

func (x *notificatorServiceStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NotificatorService_ServiceDesc is the grpc.ServiceDesc for NotificatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.notificator.NotificatorService",
	HandlerType: (*NotificatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotifications",
			Handler:    _NotificatorService_GetNotifications_Handler,
		},
		{
			MethodName: "ReadNotifications",
			Handler:    _NotificatorService_ReadNotifications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _NotificatorService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/notificator/notificator.proto",
}
