// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/docstore/docstore.proto

package docstore

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	documents "github.com/galexrt/fivenet/gen/go/proto/resources/documents"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = documents.DOC_RELATION(0)
)

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesRequestMultiError, or nil if none found.
func (m *ListTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesRequestMultiError) AllErrors() []error { return m }

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesResponseMultiError, or nil if none found.
func (m *ListTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesResponseMultiError) AllErrors() []error { return m }

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if m.Data != nil {

		if len(m.GetData()) > 10240 {
			err := GetTemplateRequestValidationError{
				field:  "Data",
				reason: "value length must be at most 10240 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Render != nil {
		// no validation rules for Render
	}

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

// Validate checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateResponseMultiError, or nil if none found.
func (m *GetTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Rendered

	if len(errors) > 0 {
		return GetTemplateResponseMultiError(errors)
	}

	return nil
}

// GetTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateResponseMultiError) AllErrors() []error { return m }

// GetTemplateResponseValidationError is the validation error returned by
// GetTemplateResponse.Validate if the designated constraints aren't met.
type GetTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateResponseValidationError) ErrorName() string {
	return "GetTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateResponseValidationError{}

// Validate checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateRequestMultiError, or nil if none found.
func (m *CreateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTemplate() == nil {
		err := CreateTemplateRequestValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateRequestMultiError) AllErrors() []error { return m }

// CreateTemplateRequestValidationError is the validation error returned by
// CreateTemplateRequest.Validate if the designated constraints aren't met.
type CreateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateRequestValidationError) ErrorName() string {
	return "CreateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateRequestValidationError{}

// Validate checks the field values on CreateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateResponseMultiError, or nil if none found.
func (m *CreateTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateResponseMultiError) AllErrors() []error { return m }

// CreateTemplateResponseValidationError is the validation error returned by
// CreateTemplateResponse.Validate if the designated constraints aren't met.
type CreateTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateResponseValidationError) ErrorName() string {
	return "CreateTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateResponseValidationError{}

// Validate checks the field values on UpdateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateRequestMultiError, or nil if none found.
func (m *UpdateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTemplate() == nil {
		err := UpdateTemplateRequestValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateTemplateRequestValidationError is the validation error returned by
// UpdateTemplateRequest.Validate if the designated constraints aren't met.
type UpdateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateRequestValidationError) ErrorName() string {
	return "UpdateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateRequestValidationError{}

// Validate checks the field values on UpdateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateResponseMultiError, or nil if none found.
func (m *UpdateTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateTemplateResponseValidationError is the validation error returned by
// UpdateTemplateResponse.Validate if the designated constraints aren't met.
type UpdateTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateResponseValidationError) ErrorName() string {
	return "UpdateTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateResponseValidationError{}

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateRequestMultiError, or nil if none found.
func (m *DeleteTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateResponseMultiError, or nil if none found.
func (m *DeleteTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on ListDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentsRequestMultiError, or nil if none found.
func (m *ListDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDocumentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetOrderBy()) > 3 {
		err := ListDocumentsRequestValidationError{
			field:  "OrderBy",
			reason: "value must contain no more than 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOrderBy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentsRequestValidationError{
					field:  fmt.Sprintf("OrderBy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Search != nil {
		// no validation rules for Search
	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.To != nil {

		if all {
			switch v := interface{}(m.GetTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentsRequestMultiError(errors)
	}

	return nil
}

// ListDocumentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentsRequestMultiError) AllErrors() []error { return m }

// ListDocumentsRequestValidationError is the validation error returned by
// ListDocumentsRequest.Validate if the designated constraints aren't met.
type ListDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentsRequestValidationError) ErrorName() string {
	return "ListDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentsRequestValidationError{}

// Validate checks the field values on ListDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentsResponseMultiError, or nil if none found.
func (m *ListDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDocumentsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentsResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentsResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentsResponseValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentsResponseMultiError(errors)
	}

	return nil
}

// ListDocumentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDocumentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentsResponseMultiError) AllErrors() []error { return m }

// ListDocumentsResponseValidationError is the validation error returned by
// ListDocumentsResponse.Validate if the designated constraints aren't met.
type ListDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentsResponseValidationError) ErrorName() string {
	return "ListDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentsResponseValidationError{}

// Validate checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRequestMultiError, or nil if none found.
func (m *GetDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentRequestMultiError(errors)
	}

	return nil
}

// GetDocumentRequestMultiError is an error wrapping multiple validation errors
// returned by GetDocumentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRequestMultiError) AllErrors() []error { return m }

// GetDocumentRequestValidationError is the validation error returned by
// GetDocumentRequest.Validate if the designated constraints aren't met.
type GetDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRequestValidationError) ErrorName() string {
	return "GetDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRequestValidationError{}

// Validate checks the field values on GetDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentResponseMultiError, or nil if none found.
func (m *GetDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentResponseValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentResponseValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentResponseMultiError(errors)
	}

	return nil
}

// GetDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentResponseMultiError) AllErrors() []error { return m }

// GetDocumentResponseValidationError is the validation error returned by
// GetDocumentResponse.Validate if the designated constraints aren't met.
type GetDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentResponseValidationError) ErrorName() string {
	return "GetDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentResponseValidationError{}

// Validate checks the field values on GetDocumentReferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentReferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentReferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentReferencesRequestMultiError, or nil if none found.
func (m *GetDocumentReferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentReferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentReferencesRequestMultiError(errors)
	}

	return nil
}

// GetDocumentReferencesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDocumentReferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentReferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentReferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentReferencesRequestMultiError) AllErrors() []error { return m }

// GetDocumentReferencesRequestValidationError is the validation error returned
// by GetDocumentReferencesRequest.Validate if the designated constraints
// aren't met.
type GetDocumentReferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentReferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentReferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentReferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentReferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentReferencesRequestValidationError) ErrorName() string {
	return "GetDocumentReferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentReferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentReferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentReferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentReferencesRequestValidationError{}

// Validate checks the field values on GetDocumentReferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentReferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentReferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDocumentReferencesResponseMultiError, or nil if none found.
func (m *GetDocumentReferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentReferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentReferencesResponseValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentReferencesResponseValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentReferencesResponseValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentReferencesResponseMultiError(errors)
	}

	return nil
}

// GetDocumentReferencesResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentReferencesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDocumentReferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentReferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentReferencesResponseMultiError) AllErrors() []error { return m }

// GetDocumentReferencesResponseValidationError is the validation error
// returned by GetDocumentReferencesResponse.Validate if the designated
// constraints aren't met.
type GetDocumentReferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentReferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentReferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentReferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentReferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentReferencesResponseValidationError) ErrorName() string {
	return "GetDocumentReferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentReferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentReferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentReferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentReferencesResponseValidationError{}

// Validate checks the field values on GetDocumentRelationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRelationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRelationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRelationsRequestMultiError, or nil if none found.
func (m *GetDocumentRelationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRelationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentRelationsRequestMultiError(errors)
	}

	return nil
}

// GetDocumentRelationsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDocumentRelationsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentRelationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRelationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRelationsRequestMultiError) AllErrors() []error { return m }

// GetDocumentRelationsRequestValidationError is the validation error returned
// by GetDocumentRelationsRequest.Validate if the designated constraints
// aren't met.
type GetDocumentRelationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRelationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRelationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRelationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRelationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRelationsRequestValidationError) ErrorName() string {
	return "GetDocumentRelationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRelationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRelationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRelationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRelationsRequestValidationError{}

// Validate checks the field values on GetDocumentRelationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRelationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRelationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRelationsResponseMultiError, or nil if none found.
func (m *GetDocumentRelationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRelationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentRelationsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentRelationsResponseMultiError(errors)
	}

	return nil
}

// GetDocumentRelationsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentRelationsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentRelationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRelationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRelationsResponseMultiError) AllErrors() []error { return m }

// GetDocumentRelationsResponseValidationError is the validation error returned
// by GetDocumentRelationsResponse.Validate if the designated constraints
// aren't met.
type GetDocumentRelationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRelationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRelationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRelationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRelationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRelationsResponseValidationError) ErrorName() string {
	return "GetDocumentRelationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRelationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRelationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRelationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRelationsResponseValidationError{}

// Validate checks the field values on AddDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentReferenceRequestMultiError, or nil if none found.
func (m *AddDocumentReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReference() == nil {
		err := AddDocumentReferenceRequestValidationError{
			field:  "Reference",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDocumentReferenceRequestValidationError{
					field:  "Reference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDocumentReferenceRequestValidationError{
					field:  "Reference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDocumentReferenceRequestValidationError{
				field:  "Reference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDocumentReferenceRequestMultiError(errors)
	}

	return nil
}

// AddDocumentReferenceRequestMultiError is an error wrapping multiple
// validation errors returned by AddDocumentReferenceRequest.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentReferenceRequestMultiError) AllErrors() []error { return m }

// AddDocumentReferenceRequestValidationError is the validation error returned
// by AddDocumentReferenceRequest.Validate if the designated constraints
// aren't met.
type AddDocumentReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentReferenceRequestValidationError) ErrorName() string {
	return "AddDocumentReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentReferenceRequestValidationError{}

// Validate checks the field values on AddDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentReferenceResponseMultiError, or nil if none found.
func (m *AddDocumentReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddDocumentReferenceResponseMultiError(errors)
	}

	return nil
}

// AddDocumentReferenceResponseMultiError is an error wrapping multiple
// validation errors returned by AddDocumentReferenceResponse.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentReferenceResponseMultiError) AllErrors() []error { return m }

// AddDocumentReferenceResponseValidationError is the validation error returned
// by AddDocumentReferenceResponse.Validate if the designated constraints
// aren't met.
type AddDocumentReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentReferenceResponseValidationError) ErrorName() string {
	return "AddDocumentReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentReferenceResponseValidationError{}

// Validate checks the field values on RemoveDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentReferenceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentReferenceRequestMultiError, or nil if none found.
func (m *RemoveDocumentReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveDocumentReferenceRequestMultiError(errors)
	}

	return nil
}

// RemoveDocumentReferenceRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentReferenceRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentReferenceRequestMultiError) AllErrors() []error { return m }

// RemoveDocumentReferenceRequestValidationError is the validation error
// returned by RemoveDocumentReferenceRequest.Validate if the designated
// constraints aren't met.
type RemoveDocumentReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentReferenceRequestValidationError) ErrorName() string {
	return "RemoveDocumentReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentReferenceRequestValidationError{}

// Validate checks the field values on RemoveDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentReferenceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentReferenceResponseMultiError, or nil if none found.
func (m *RemoveDocumentReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveDocumentReferenceResponseMultiError(errors)
	}

	return nil
}

// RemoveDocumentReferenceResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentReferenceResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentReferenceResponseMultiError) AllErrors() []error { return m }

// RemoveDocumentReferenceResponseValidationError is the validation error
// returned by RemoveDocumentReferenceResponse.Validate if the designated
// constraints aren't met.
type RemoveDocumentReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentReferenceResponseValidationError) ErrorName() string {
	return "RemoveDocumentReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentReferenceResponseValidationError{}

// Validate checks the field values on AddDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentRelationRequestMultiError, or nil if none found.
func (m *AddDocumentRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRelation() == nil {
		err := AddDocumentRelationRequestValidationError{
			field:  "Relation",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDocumentRelationRequestValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDocumentRelationRequestValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDocumentRelationRequestValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDocumentRelationRequestMultiError(errors)
	}

	return nil
}

// AddDocumentRelationRequestMultiError is an error wrapping multiple
// validation errors returned by AddDocumentRelationRequest.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentRelationRequestMultiError) AllErrors() []error { return m }

// AddDocumentRelationRequestValidationError is the validation error returned
// by AddDocumentRelationRequest.Validate if the designated constraints aren't met.
type AddDocumentRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentRelationRequestValidationError) ErrorName() string {
	return "AddDocumentRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentRelationRequestValidationError{}

// Validate checks the field values on AddDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentRelationResponseMultiError, or nil if none found.
func (m *AddDocumentRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddDocumentRelationResponseMultiError(errors)
	}

	return nil
}

// AddDocumentRelationResponseMultiError is an error wrapping multiple
// validation errors returned by AddDocumentRelationResponse.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentRelationResponseMultiError) AllErrors() []error { return m }

// AddDocumentRelationResponseValidationError is the validation error returned
// by AddDocumentRelationResponse.Validate if the designated constraints
// aren't met.
type AddDocumentRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentRelationResponseValidationError) ErrorName() string {
	return "AddDocumentRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentRelationResponseValidationError{}

// Validate checks the field values on RemoveDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentRelationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentRelationRequestMultiError, or nil if none found.
func (m *RemoveDocumentRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveDocumentRelationRequestMultiError(errors)
	}

	return nil
}

// RemoveDocumentRelationRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentRelationRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentRelationRequestMultiError) AllErrors() []error { return m }

// RemoveDocumentRelationRequestValidationError is the validation error
// returned by RemoveDocumentRelationRequest.Validate if the designated
// constraints aren't met.
type RemoveDocumentRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentRelationRequestValidationError) ErrorName() string {
	return "RemoveDocumentRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentRelationRequestValidationError{}

// Validate checks the field values on RemoveDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentRelationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentRelationResponseMultiError, or nil if none found.
func (m *RemoveDocumentRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveDocumentRelationResponseMultiError(errors)
	}

	return nil
}

// RemoveDocumentRelationResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentRelationResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentRelationResponseMultiError) AllErrors() []error { return m }

// RemoveDocumentRelationResponseValidationError is the validation error
// returned by RemoveDocumentRelationResponse.Validate if the designated
// constraints aren't met.
type RemoveDocumentRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentRelationResponseValidationError) ErrorName() string {
	return "RemoveDocumentRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentRelationResponseValidationError{}

// Validate checks the field values on GetDocumentCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentCommentsRequestMultiError, or nil if none found.
func (m *GetDocumentCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := GetDocumentCommentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentCommentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentCommentsRequestMultiError(errors)
	}

	return nil
}

// GetDocumentCommentsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDocumentCommentsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentCommentsRequestMultiError) AllErrors() []error { return m }

// GetDocumentCommentsRequestValidationError is the validation error returned
// by GetDocumentCommentsRequest.Validate if the designated constraints aren't met.
type GetDocumentCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentCommentsRequestValidationError) ErrorName() string {
	return "GetDocumentCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentCommentsRequestValidationError{}

// Validate checks the field values on GetDocumentCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentCommentsResponseMultiError, or nil if none found.
func (m *GetDocumentCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentCommentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentCommentsResponseMultiError(errors)
	}

	return nil
}

// GetDocumentCommentsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentCommentsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentCommentsResponseMultiError) AllErrors() []error { return m }

// GetDocumentCommentsResponseValidationError is the validation error returned
// by GetDocumentCommentsResponse.Validate if the designated constraints
// aren't met.
type GetDocumentCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentCommentsResponseValidationError) ErrorName() string {
	return "GetDocumentCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentCommentsResponseValidationError{}

// Validate checks the field values on PostDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostDocumentCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostDocumentCommentRequestMultiError, or nil if none found.
func (m *PostDocumentCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostDocumentCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostDocumentCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostDocumentCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostDocumentCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostDocumentCommentRequestMultiError(errors)
	}

	return nil
}

// PostDocumentCommentRequestMultiError is an error wrapping multiple
// validation errors returned by PostDocumentCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type PostDocumentCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostDocumentCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostDocumentCommentRequestMultiError) AllErrors() []error { return m }

// PostDocumentCommentRequestValidationError is the validation error returned
// by PostDocumentCommentRequest.Validate if the designated constraints aren't met.
type PostDocumentCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDocumentCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDocumentCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDocumentCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDocumentCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDocumentCommentRequestValidationError) ErrorName() string {
	return "PostDocumentCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostDocumentCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostDocumentCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDocumentCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDocumentCommentRequestValidationError{}

// Validate checks the field values on PostDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostDocumentCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostDocumentCommentResponseMultiError, or nil if none found.
func (m *PostDocumentCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostDocumentCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PostDocumentCommentResponseMultiError(errors)
	}

	return nil
}

// PostDocumentCommentResponseMultiError is an error wrapping multiple
// validation errors returned by PostDocumentCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type PostDocumentCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostDocumentCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostDocumentCommentResponseMultiError) AllErrors() []error { return m }

// PostDocumentCommentResponseValidationError is the validation error returned
// by PostDocumentCommentResponse.Validate if the designated constraints
// aren't met.
type PostDocumentCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDocumentCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDocumentCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDocumentCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDocumentCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDocumentCommentResponseValidationError) ErrorName() string {
	return "PostDocumentCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostDocumentCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostDocumentCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDocumentCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDocumentCommentResponseValidationError{}

// Validate checks the field values on EditDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditDocumentCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditDocumentCommentRequestMultiError, or nil if none found.
func (m *EditDocumentCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditDocumentCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditDocumentCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditDocumentCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditDocumentCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditDocumentCommentRequestMultiError(errors)
	}

	return nil
}

// EditDocumentCommentRequestMultiError is an error wrapping multiple
// validation errors returned by EditDocumentCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type EditDocumentCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditDocumentCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditDocumentCommentRequestMultiError) AllErrors() []error { return m }

// EditDocumentCommentRequestValidationError is the validation error returned
// by EditDocumentCommentRequest.Validate if the designated constraints aren't met.
type EditDocumentCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditDocumentCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditDocumentCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditDocumentCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditDocumentCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditDocumentCommentRequestValidationError) ErrorName() string {
	return "EditDocumentCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditDocumentCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditDocumentCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditDocumentCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditDocumentCommentRequestValidationError{}

// Validate checks the field values on EditDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditDocumentCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditDocumentCommentResponseMultiError, or nil if none found.
func (m *EditDocumentCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditDocumentCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditDocumentCommentResponseMultiError(errors)
	}

	return nil
}

// EditDocumentCommentResponseMultiError is an error wrapping multiple
// validation errors returned by EditDocumentCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type EditDocumentCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditDocumentCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditDocumentCommentResponseMultiError) AllErrors() []error { return m }

// EditDocumentCommentResponseValidationError is the validation error returned
// by EditDocumentCommentResponse.Validate if the designated constraints
// aren't met.
type EditDocumentCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditDocumentCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditDocumentCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditDocumentCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditDocumentCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditDocumentCommentResponseValidationError) ErrorName() string {
	return "EditDocumentCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditDocumentCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditDocumentCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditDocumentCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditDocumentCommentResponseValidationError{}

// Validate checks the field values on DeleteDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentCommentRequestMultiError, or nil if none found.
func (m *DeleteDocumentCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return DeleteDocumentCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteDocumentCommentRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDocumentCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteDocumentCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentCommentRequestMultiError) AllErrors() []error { return m }

// DeleteDocumentCommentRequestValidationError is the validation error returned
// by DeleteDocumentCommentRequest.Validate if the designated constraints
// aren't met.
type DeleteDocumentCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentCommentRequestValidationError) ErrorName() string {
	return "DeleteDocumentCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentCommentRequestValidationError{}

// Validate checks the field values on DeleteDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentCommentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteDocumentCommentResponseMultiError, or nil if none found.
func (m *DeleteDocumentCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDocumentCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteDocumentCommentResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteDocumentCommentResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteDocumentCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentCommentResponseMultiError) AllErrors() []error { return m }

// DeleteDocumentCommentResponseValidationError is the validation error
// returned by DeleteDocumentCommentResponse.Validate if the designated
// constraints aren't met.
type DeleteDocumentCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentCommentResponseValidationError) ErrorName() string {
	return "DeleteDocumentCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentCommentResponseValidationError{}

// Validate checks the field values on CreateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentRequestMultiError, or nil if none found.
func (m *CreateDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 3 {
		err := CreateDocumentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTitle()) > 21845 {
		err := CreateDocumentRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 21845 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 20 {
		err := CreateDocumentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContent()) > 1000000 {
		err := CreateDocumentRequestValidationError{
			field:  "Content",
			reason: "value length must be at most 1000000 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := documents.DOC_CONTENT_TYPE_name[int32(m.GetContentType())]; !ok {
		err := CreateDocumentRequestValidationError{
			field:  "ContentType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) > 24 {
		err := CreateDocumentRequestValidationError{
			field:  "State",
			reason: "value length must be at most 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Closed

	// no validation rules for Public

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.Data != nil {
		// no validation rules for Data
	}

	if m.Access != nil {

		if all {
			switch v := interface{}(m.GetAccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDocumentRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDocumentRequestMultiError(errors)
	}

	return nil
}

// CreateDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentRequestMultiError) AllErrors() []error { return m }

// CreateDocumentRequestValidationError is the validation error returned by
// CreateDocumentRequest.Validate if the designated constraints aren't met.
type CreateDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentRequestValidationError) ErrorName() string {
	return "CreateDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentRequestValidationError{}

// Validate checks the field values on CreateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentResponseMultiError, or nil if none found.
func (m *CreateDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return CreateDocumentResponseMultiError(errors)
	}

	return nil
}

// CreateDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentResponseMultiError) AllErrors() []error { return m }

// CreateDocumentResponseValidationError is the validation error returned by
// CreateDocumentResponse.Validate if the designated constraints aren't met.
type CreateDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentResponseValidationError) ErrorName() string {
	return "CreateDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentResponseValidationError{}

// Validate checks the field values on UpdateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentRequestMultiError, or nil if none found.
func (m *UpdateDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if utf8.RuneCountInString(m.GetTitle()) < 3 {
		err := UpdateDocumentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTitle()) > 21845 {
		err := UpdateDocumentRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 21845 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 20 {
		err := UpdateDocumentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContent()) > 1000000 {
		err := UpdateDocumentRequestValidationError{
			field:  "Content",
			reason: "value length must be at most 1000000 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := documents.DOC_CONTENT_TYPE_name[int32(m.GetContentType())]; !ok {
		err := UpdateDocumentRequestValidationError{
			field:  "ContentType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) > 24 {
		err := UpdateDocumentRequestValidationError{
			field:  "State",
			reason: "value length must be at most 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Closed

	// no validation rules for Public

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.Data != nil {
		// no validation rules for Data
	}

	if m.Access != nil {

		if all {
			switch v := interface{}(m.GetAccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDocumentRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDocumentRequestMultiError(errors)
	}

	return nil
}

// UpdateDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentRequestMultiError) AllErrors() []error { return m }

// UpdateDocumentRequestValidationError is the validation error returned by
// UpdateDocumentRequest.Validate if the designated constraints aren't met.
type UpdateDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentRequestValidationError) ErrorName() string {
	return "UpdateDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentRequestValidationError{}

// Validate checks the field values on UpdateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentResponseMultiError, or nil if none found.
func (m *UpdateDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return UpdateDocumentResponseMultiError(errors)
	}

	return nil
}

// UpdateDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentResponseMultiError) AllErrors() []error { return m }

// UpdateDocumentResponseValidationError is the validation error returned by
// UpdateDocumentResponse.Validate if the designated constraints aren't met.
type UpdateDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentResponseValidationError) ErrorName() string {
	return "UpdateDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentResponseValidationError{}

// Validate checks the field values on DeleteDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentRequestMultiError, or nil if none found.
func (m *DeleteDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return DeleteDocumentRequestMultiError(errors)
	}

	return nil
}

// DeleteDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentRequestMultiError) AllErrors() []error { return m }

// DeleteDocumentRequestValidationError is the validation error returned by
// DeleteDocumentRequest.Validate if the designated constraints aren't met.
type DeleteDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentRequestValidationError) ErrorName() string {
	return "DeleteDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentRequestValidationError{}

// Validate checks the field values on DeleteDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentResponseMultiError, or nil if none found.
func (m *DeleteDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDocumentResponseMultiError(errors)
	}

	return nil
}

// DeleteDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentResponseMultiError) AllErrors() []error { return m }

// DeleteDocumentResponseValidationError is the validation error returned by
// DeleteDocumentResponse.Validate if the designated constraints aren't met.
type DeleteDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentResponseValidationError) ErrorName() string {
	return "DeleteDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentResponseValidationError{}

// Validate checks the field values on ToggleDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleDocumentRequestMultiError, or nil if none found.
func (m *ToggleDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for Closed

	if len(errors) > 0 {
		return ToggleDocumentRequestMultiError(errors)
	}

	return nil
}

// ToggleDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by ToggleDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type ToggleDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleDocumentRequestMultiError) AllErrors() []error { return m }

// ToggleDocumentRequestValidationError is the validation error returned by
// ToggleDocumentRequest.Validate if the designated constraints aren't met.
type ToggleDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleDocumentRequestValidationError) ErrorName() string {
	return "ToggleDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleDocumentRequestValidationError{}

// Validate checks the field values on ToggleDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleDocumentResponseMultiError, or nil if none found.
func (m *ToggleDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ToggleDocumentResponseMultiError(errors)
	}

	return nil
}

// ToggleDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by ToggleDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type ToggleDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleDocumentResponseMultiError) AllErrors() []error { return m }

// ToggleDocumentResponseValidationError is the validation error returned by
// ToggleDocumentResponse.Validate if the designated constraints aren't met.
type ToggleDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleDocumentResponseValidationError) ErrorName() string {
	return "ToggleDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleDocumentResponseValidationError{}

// Validate checks the field values on GetDocumentAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentAccessRequestMultiError, or nil if none found.
func (m *GetDocumentAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentAccessRequestMultiError(errors)
	}

	return nil
}

// GetDocumentAccessRequestMultiError is an error wrapping multiple validation
// errors returned by GetDocumentAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDocumentAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentAccessRequestMultiError) AllErrors() []error { return m }

// GetDocumentAccessRequestValidationError is the validation error returned by
// GetDocumentAccessRequest.Validate if the designated constraints aren't met.
type GetDocumentAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentAccessRequestValidationError) ErrorName() string {
	return "GetDocumentAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentAccessRequestValidationError{}

// Validate checks the field values on GetDocumentAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentAccessResponseMultiError, or nil if none found.
func (m *GetDocumentAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccess() == nil {
		err := GetDocumentAccessResponseValidationError{
			field:  "Access",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentAccessResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentAccessResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentAccessResponseValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentAccessResponseMultiError(errors)
	}

	return nil
}

// GetDocumentAccessResponseMultiError is an error wrapping multiple validation
// errors returned by GetDocumentAccessResponse.ValidateAll() if the
// designated constraints aren't met.
type GetDocumentAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentAccessResponseMultiError) AllErrors() []error { return m }

// GetDocumentAccessResponseValidationError is the validation error returned by
// GetDocumentAccessResponse.Validate if the designated constraints aren't met.
type GetDocumentAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentAccessResponseValidationError) ErrorName() string {
	return "GetDocumentAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentAccessResponseValidationError{}

// Validate checks the field values on SetDocumentAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentAccessRequestMultiError, or nil if none found.
func (m *SetDocumentAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if _, ok := ACCESS_LEVEL_UPDATE_MODE_name[int32(m.GetMode())]; !ok {
		err := SetDocumentAccessRequestValidationError{
			field:  "Mode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDocumentAccessRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDocumentAccessRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDocumentAccessRequestValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetDocumentAccessRequestMultiError(errors)
	}

	return nil
}

// SetDocumentAccessRequestMultiError is an error wrapping multiple validation
// errors returned by SetDocumentAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDocumentAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentAccessRequestMultiError) AllErrors() []error { return m }

// SetDocumentAccessRequestValidationError is the validation error returned by
// SetDocumentAccessRequest.Validate if the designated constraints aren't met.
type SetDocumentAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentAccessRequestValidationError) ErrorName() string {
	return "SetDocumentAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentAccessRequestValidationError{}

// Validate checks the field values on SetDocumentAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentAccessResponseMultiError, or nil if none found.
func (m *SetDocumentAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDocumentAccessResponseMultiError(errors)
	}

	return nil
}

// SetDocumentAccessResponseMultiError is an error wrapping multiple validation
// errors returned by SetDocumentAccessResponse.ValidateAll() if the
// designated constraints aren't met.
type SetDocumentAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentAccessResponseMultiError) AllErrors() []error { return m }

// SetDocumentAccessResponseValidationError is the validation error returned by
// SetDocumentAccessResponse.Validate if the designated constraints aren't met.
type SetDocumentAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentAccessResponseValidationError) ErrorName() string {
	return "SetDocumentAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentAccessResponseValidationError{}

// Validate checks the field values on ListUserDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDocumentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDocumentsRequestMultiError, or nil if none found.
func (m *ListUserDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListUserDocumentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserDocumentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := ListUserDocumentsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRelations()) > 3 {
		err := ListUserDocumentsRequestValidationError{
			field:  "Relations",
			reason: "value must contain no more than 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserDocumentsRequestMultiError(errors)
	}

	return nil
}

// ListUserDocumentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDocumentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDocumentsRequestMultiError) AllErrors() []error { return m }

// ListUserDocumentsRequestValidationError is the validation error returned by
// ListUserDocumentsRequest.Validate if the designated constraints aren't met.
type ListUserDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDocumentsRequestValidationError) ErrorName() string {
	return "ListUserDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDocumentsRequestValidationError{}

// Validate checks the field values on ListUserDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDocumentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDocumentsResponseMultiError, or nil if none found.
func (m *ListUserDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserDocumentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserDocumentsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserDocumentsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserDocumentsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserDocumentsResponseMultiError(errors)
	}

	return nil
}

// ListUserDocumentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserDocumentsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListUserDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDocumentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDocumentsResponseMultiError) AllErrors() []error { return m }

// ListUserDocumentsResponseValidationError is the validation error returned by
// ListUserDocumentsResponse.Validate if the designated constraints aren't met.
type ListUserDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDocumentsResponseValidationError) ErrorName() string {
	return "ListUserDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDocumentsResponseValidationError{}

// Validate checks the field values on ListDocumentCategoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentCategoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDocumentCategoriesRequestMultiError, or nil if none found.
func (m *ListDocumentCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDocumentCategoriesRequestMultiError(errors)
	}

	return nil
}

// ListDocumentCategoriesRequestMultiError is an error wrapping multiple
// validation errors returned by ListDocumentCategoriesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListDocumentCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentCategoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentCategoriesRequestMultiError) AllErrors() []error { return m }

// ListDocumentCategoriesRequestValidationError is the validation error
// returned by ListDocumentCategoriesRequest.Validate if the designated
// constraints aren't met.
type ListDocumentCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentCategoriesRequestValidationError) ErrorName() string {
	return "ListDocumentCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentCategoriesRequestValidationError{}

// Validate checks the field values on ListDocumentCategoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentCategoriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDocumentCategoriesResponseMultiError, or nil if none found.
func (m *ListDocumentCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentCategoriesResponseValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentCategoriesResponseValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentCategoriesResponseValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentCategoriesResponseMultiError(errors)
	}

	return nil
}

// ListDocumentCategoriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListDocumentCategoriesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListDocumentCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentCategoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentCategoriesResponseMultiError) AllErrors() []error { return m }

// ListDocumentCategoriesResponseValidationError is the validation error
// returned by ListDocumentCategoriesResponse.Validate if the designated
// constraints aren't met.
type ListDocumentCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentCategoriesResponseValidationError) ErrorName() string {
	return "ListDocumentCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentCategoriesResponseValidationError{}

// Validate checks the field values on CreateDocumentCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDocumentCategoryRequestMultiError, or nil if none found.
func (m *CreateDocumentCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := CreateDocumentCategoryRequestValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDocumentCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDocumentCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentCategoryRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDocumentCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateDocumentCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDocumentCategoryRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateDocumentCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentCategoryRequestMultiError) AllErrors() []error { return m }

// CreateDocumentCategoryRequestValidationError is the validation error
// returned by CreateDocumentCategoryRequest.Validate if the designated
// constraints aren't met.
type CreateDocumentCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentCategoryRequestValidationError) ErrorName() string {
	return "CreateDocumentCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentCategoryRequestValidationError{}

// Validate checks the field values on CreateDocumentCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDocumentCategoryResponseMultiError, or nil if none found.
func (m *CreateDocumentCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDocumentCategoryResponseMultiError(errors)
	}

	return nil
}

// CreateDocumentCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDocumentCategoryResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateDocumentCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentCategoryResponseMultiError) AllErrors() []error { return m }

// CreateDocumentCategoryResponseValidationError is the validation error
// returned by CreateDocumentCategoryResponse.Validate if the designated
// constraints aren't met.
type CreateDocumentCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentCategoryResponseValidationError) ErrorName() string {
	return "CreateDocumentCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentCategoryResponseValidationError{}

// Validate checks the field values on UpdateDocumentCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDocumentCategoryRequestMultiError, or nil if none found.
func (m *UpdateDocumentCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := UpdateDocumentCategoryRequestValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDocumentCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDocumentCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDocumentCategoryRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDocumentCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateDocumentCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDocumentCategoryRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDocumentCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateDocumentCategoryRequestValidationError is the validation error
// returned by UpdateDocumentCategoryRequest.Validate if the designated
// constraints aren't met.
type UpdateDocumentCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentCategoryRequestValidationError) ErrorName() string {
	return "UpdateDocumentCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentCategoryRequestValidationError{}

// Validate checks the field values on UpdateDocumentCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDocumentCategoryResponseMultiError, or nil if none found.
func (m *UpdateDocumentCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDocumentCategoryResponseMultiError(errors)
	}

	return nil
}

// UpdateDocumentCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDocumentCategoryResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateDocumentCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateDocumentCategoryResponseValidationError is the validation error
// returned by UpdateDocumentCategoryResponse.Validate if the designated
// constraints aren't met.
type UpdateDocumentCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentCategoryResponseValidationError) ErrorName() string {
	return "UpdateDocumentCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentCategoryResponseValidationError{}

// Validate checks the field values on DeleteDocumentCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteDocumentCategoryRequestMultiError, or nil if none found.
func (m *DeleteDocumentCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDocumentCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteDocumentCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDocumentCategoryRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteDocumentCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteDocumentCategoryRequestValidationError is the validation error
// returned by DeleteDocumentCategoryRequest.Validate if the designated
// constraints aren't met.
type DeleteDocumentCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentCategoryRequestValidationError) ErrorName() string {
	return "DeleteDocumentCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentCategoryRequestValidationError{}

// Validate checks the field values on DeleteDocumentCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteDocumentCategoryResponseMultiError, or nil if none found.
func (m *DeleteDocumentCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDocumentCategoryResponseMultiError(errors)
	}

	return nil
}

// DeleteDocumentCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteDocumentCategoryResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteDocumentCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentCategoryResponseMultiError) AllErrors() []error { return m }

// DeleteDocumentCategoryResponseValidationError is the validation error
// returned by DeleteDocumentCategoryResponse.Validate if the designated
// constraints aren't met.
type DeleteDocumentCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentCategoryResponseValidationError) ErrorName() string {
	return "DeleteDocumentCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentCategoryResponseValidationError{}
