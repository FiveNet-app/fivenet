// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: services/dmv/vehicles.proto

package dmv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DMVServiceClient is the client API for DMVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DMVServiceClient interface {
	// @perm
	ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error)
}

type dMVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDMVServiceClient(cc grpc.ClientConnInterface) DMVServiceClient {
	return &dMVServiceClient{cc}
}

func (c *dMVServiceClient) ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error) {
	out := new(ListVehiclesResponse)
	err := c.cc.Invoke(ctx, "/services.dmv.DMVService/ListVehicles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMVServiceServer is the server API for DMVService service.
// All implementations must embed UnimplementedDMVServiceServer
// for forward compatibility
type DMVServiceServer interface {
	// @perm
	ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error)
	mustEmbedUnimplementedDMVServiceServer()
}

// UnimplementedDMVServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDMVServiceServer struct {
}

func (UnimplementedDMVServiceServer) ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicles not implemented")
}
func (UnimplementedDMVServiceServer) mustEmbedUnimplementedDMVServiceServer() {}

// UnsafeDMVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DMVServiceServer will
// result in compilation errors.
type UnsafeDMVServiceServer interface {
	mustEmbedUnimplementedDMVServiceServer()
}

func RegisterDMVServiceServer(s grpc.ServiceRegistrar, srv DMVServiceServer) {
	s.RegisterService(&DMVService_ServiceDesc, srv)
}

func _DMVService_ListVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMVServiceServer).ListVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.dmv.DMVService/ListVehicles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMVServiceServer).ListVehicles(ctx, req.(*ListVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DMVService_ServiceDesc is the grpc.ServiceDesc for DMVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DMVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.dmv.DMVService",
	HandlerType: (*DMVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVehicles",
			Handler:    _DMVService_ListVehicles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/dmv/vehicles.proto",
}
