// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/jobs/timeclock.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListTimeclockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTimeclockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTimeclockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTimeclockRequestMultiError, or nil if none found.
func (m *ListTimeclockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTimeclockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListTimeclockRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTimeclockRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTimeclockRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTimeclockRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.To != nil {

		if all {
			switch v := interface{}(m.GetTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PerDay != nil {
		// no validation rules for PerDay
	}

	if len(errors) > 0 {
		return ListTimeclockRequestMultiError(errors)
	}

	return nil
}

// ListTimeclockRequestMultiError is an error wrapping multiple validation
// errors returned by ListTimeclockRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTimeclockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTimeclockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTimeclockRequestMultiError) AllErrors() []error { return m }

// ListTimeclockRequestValidationError is the validation error returned by
// ListTimeclockRequest.Validate if the designated constraints aren't met.
type ListTimeclockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTimeclockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTimeclockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTimeclockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTimeclockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTimeclockRequestValidationError) ErrorName() string {
	return "ListTimeclockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTimeclockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTimeclockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTimeclockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTimeclockRequestValidationError{}

// Validate checks the field values on ListTimeclockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTimeclockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTimeclockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTimeclockResponseMultiError, or nil if none found.
func (m *ListTimeclockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTimeclockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTimeclockResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTimeclockResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTimeclockResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTimeclockResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTimeclockResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTimeclockResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWeekly() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  fmt.Sprintf("Weekly[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  fmt.Sprintf("Weekly[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockResponseValidationError{
					field:  fmt.Sprintf("Weekly[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTimeclockResponseMultiError(errors)
	}

	return nil
}

// ListTimeclockResponseMultiError is an error wrapping multiple validation
// errors returned by ListTimeclockResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTimeclockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTimeclockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTimeclockResponseMultiError) AllErrors() []error { return m }

// ListTimeclockResponseValidationError is the validation error returned by
// ListTimeclockResponse.Validate if the designated constraints aren't met.
type ListTimeclockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTimeclockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTimeclockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTimeclockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTimeclockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTimeclockResponseValidationError) ErrorName() string {
	return "ListTimeclockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTimeclockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTimeclockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTimeclockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTimeclockResponseValidationError{}

// Validate checks the field values on GetTimeclockStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTimeclockStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTimeclockStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTimeclockStatsRequestMultiError, or nil if none found.
func (m *GetTimeclockStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeclockStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if len(errors) > 0 {
		return GetTimeclockStatsRequestMultiError(errors)
	}

	return nil
}

// GetTimeclockStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTimeclockStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTimeclockStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeclockStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeclockStatsRequestMultiError) AllErrors() []error { return m }

// GetTimeclockStatsRequestValidationError is the validation error returned by
// GetTimeclockStatsRequest.Validate if the designated constraints aren't met.
type GetTimeclockStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeclockStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeclockStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeclockStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeclockStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeclockStatsRequestValidationError) ErrorName() string {
	return "GetTimeclockStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeclockStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeclockStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeclockStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeclockStatsRequestValidationError{}

// Validate checks the field values on GetTimeclockStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTimeclockStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTimeclockStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTimeclockStatsResponseMultiError, or nil if none found.
func (m *GetTimeclockStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeclockStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTimeclockStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTimeclockStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTimeclockStatsResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWeekly() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTimeclockStatsResponseValidationError{
						field:  fmt.Sprintf("Weekly[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTimeclockStatsResponseValidationError{
						field:  fmt.Sprintf("Weekly[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTimeclockStatsResponseValidationError{
					field:  fmt.Sprintf("Weekly[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTimeclockStatsResponseMultiError(errors)
	}

	return nil
}

// GetTimeclockStatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTimeclockStatsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetTimeclockStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeclockStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeclockStatsResponseMultiError) AllErrors() []error { return m }

// GetTimeclockStatsResponseValidationError is the validation error returned by
// GetTimeclockStatsResponse.Validate if the designated constraints aren't met.
type GetTimeclockStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeclockStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeclockStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeclockStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeclockStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeclockStatsResponseValidationError) ErrorName() string {
	return "GetTimeclockStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeclockStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeclockStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeclockStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeclockStatsResponseValidationError{}
