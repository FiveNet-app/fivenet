// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/jobs/requests.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRequestsRequestMultiError, or nil if none found.
func (m *ListRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListRequestsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRequestsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRequestsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRequestsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRequestsRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRequestsRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRequestsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.To != nil {

		if all {
			switch v := interface{}(m.GetTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRequestsRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRequestsRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRequestsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 50 {
			err := ListRequestsRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListRequestsRequestMultiError(errors)
	}

	return nil
}

// ListRequestsRequestMultiError is an error wrapping multiple validation
// errors returned by ListRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestsRequestMultiError) AllErrors() []error { return m }

// ListRequestsRequestValidationError is the validation error returned by
// ListRequestsRequest.Validate if the designated constraints aren't met.
type ListRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestsRequestValidationError) ErrorName() string {
	return "ListRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestsRequestValidationError{}

// Validate checks the field values on ListRequestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRequestsResponseMultiError, or nil if none found.
func (m *ListRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRequestsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRequestsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRequestsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRequestsResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRequestsResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRequestsResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRequestsResponseMultiError(errors)
	}

	return nil
}

// ListRequestsResponseMultiError is an error wrapping multiple validation
// errors returned by ListRequestsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestsResponseMultiError) AllErrors() []error { return m }

// ListRequestsResponseValidationError is the validation error returned by
// ListRequestsResponse.Validate if the designated constraints aren't met.
type ListRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestsResponseValidationError) ErrorName() string {
	return "ListRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestsResponseValidationError{}

// Validate checks the field values on CreateRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRequestRequestMultiError, or nil if none found.
func (m *CreateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := CreateRequestRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestRequestMultiError(errors)
	}

	return nil
}

// CreateRequestRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestRequestMultiError) AllErrors() []error { return m }

// CreateRequestRequestValidationError is the validation error returned by
// CreateRequestRequest.Validate if the designated constraints aren't met.
type CreateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestRequestValidationError) ErrorName() string {
	return "CreateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestRequestValidationError{}

// Validate checks the field values on CreateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRequestResponseMultiError, or nil if none found.
func (m *CreateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestResponseMultiError(errors)
	}

	return nil
}

// CreateRequestResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestResponseMultiError) AllErrors() []error { return m }

// CreateRequestResponseValidationError is the validation error returned by
// CreateRequestResponse.Validate if the designated constraints aren't met.
type CreateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestResponseValidationError) ErrorName() string {
	return "CreateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestResponseValidationError{}

// Validate checks the field values on UpdateRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRequestRequestMultiError, or nil if none found.
func (m *UpdateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := UpdateRequestRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRequestRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestRequestMultiError) AllErrors() []error { return m }

// UpdateRequestRequestValidationError is the validation error returned by
// UpdateRequestRequest.Validate if the designated constraints aren't met.
type UpdateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestRequestValidationError) ErrorName() string {
	return "UpdateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestRequestValidationError{}

// Validate checks the field values on UpdateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRequestResponseMultiError, or nil if none found.
func (m *UpdateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRequestResponseMultiError(errors)
	}

	return nil
}

// UpdateRequestResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestResponseMultiError) AllErrors() []error { return m }

// UpdateRequestResponseValidationError is the validation error returned by
// UpdateRequestResponse.Validate if the designated constraints aren't met.
type UpdateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestResponseValidationError) ErrorName() string {
	return "UpdateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestResponseValidationError{}

// Validate checks the field values on DeleteRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRequestRequestMultiError, or nil if none found.
func (m *DeleteRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestRequestMultiError) AllErrors() []error { return m }

// DeleteRequestRequestValidationError is the validation error returned by
// DeleteRequestRequest.Validate if the designated constraints aren't met.
type DeleteRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestRequestValidationError) ErrorName() string {
	return "DeleteRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestRequestValidationError{}

// Validate checks the field values on DeleteRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRequestResponseMultiError, or nil if none found.
func (m *DeleteRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRequestResponseMultiError(errors)
	}

	return nil
}

// DeleteRequestResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestResponseMultiError) AllErrors() []error { return m }

// DeleteRequestResponseValidationError is the validation error returned by
// DeleteRequestResponse.Validate if the designated constraints aren't met.
type DeleteRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestResponseValidationError) ErrorName() string {
	return "DeleteRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestResponseValidationError{}

// Validate checks the field values on ApproveRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveRequestRequestMultiError, or nil if none found.
func (m *ApproveRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Approve

	if len(errors) > 0 {
		return ApproveRequestRequestMultiError(errors)
	}

	return nil
}

// ApproveRequestRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveRequestRequestMultiError) AllErrors() []error { return m }

// ApproveRequestRequestValidationError is the validation error returned by
// ApproveRequestRequest.Validate if the designated constraints aren't met.
type ApproveRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveRequestRequestValidationError) ErrorName() string {
	return "ApproveRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveRequestRequestValidationError{}

// Validate checks the field values on ApproveRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveRequestResponseMultiError, or nil if none found.
func (m *ApproveRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveRequestResponseMultiError(errors)
	}

	return nil
}

// ApproveRequestResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveRequestResponseMultiError) AllErrors() []error { return m }

// ApproveRequestResponseValidationError is the validation error returned by
// ApproveRequestResponse.Validate if the designated constraints aren't met.
type ApproveRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveRequestResponseValidationError) ErrorName() string {
	return "ApproveRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveRequestResponseValidationError{}

// Validate checks the field values on RequestsCloseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsCloseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsCloseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsCloseRequestMultiError, or nil if none found.
func (m *RequestsCloseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsCloseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Close

	if len(errors) > 0 {
		return RequestsCloseRequestMultiError(errors)
	}

	return nil
}

// RequestsCloseRequestMultiError is an error wrapping multiple validation
// errors returned by RequestsCloseRequest.ValidateAll() if the designated
// constraints aren't met.
type RequestsCloseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsCloseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsCloseRequestMultiError) AllErrors() []error { return m }

// RequestsCloseRequestValidationError is the validation error returned by
// RequestsCloseRequest.Validate if the designated constraints aren't met.
type RequestsCloseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsCloseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsCloseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsCloseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsCloseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsCloseRequestValidationError) ErrorName() string {
	return "RequestsCloseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsCloseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsCloseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsCloseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsCloseRequestValidationError{}

// Validate checks the field values on RequestsCloseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsCloseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsCloseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsCloseResponseMultiError, or nil if none found.
func (m *RequestsCloseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsCloseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestsCloseResponseMultiError(errors)
	}

	return nil
}

// RequestsCloseResponseMultiError is an error wrapping multiple validation
// errors returned by RequestsCloseResponse.ValidateAll() if the designated
// constraints aren't met.
type RequestsCloseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsCloseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsCloseResponseMultiError) AllErrors() []error { return m }

// RequestsCloseResponseValidationError is the validation error returned by
// RequestsCloseResponse.Validate if the designated constraints aren't met.
type RequestsCloseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsCloseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsCloseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsCloseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsCloseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsCloseResponseValidationError) ErrorName() string {
	return "RequestsCloseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsCloseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsCloseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsCloseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsCloseResponseValidationError{}

// Validate checks the field values on ListRequestTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRequestTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequestTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRequestTypesRequestMultiError, or nil if none found.
func (m *ListRequestTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequestTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRequestTypesRequestMultiError(errors)
	}

	return nil
}

// ListRequestTypesRequestMultiError is an error wrapping multiple validation
// errors returned by ListRequestTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRequestTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestTypesRequestMultiError) AllErrors() []error { return m }

// ListRequestTypesRequestValidationError is the validation error returned by
// ListRequestTypesRequest.Validate if the designated constraints aren't met.
type ListRequestTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestTypesRequestValidationError) ErrorName() string {
	return "ListRequestTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRequestTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequestTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestTypesRequestValidationError{}

// Validate checks the field values on ListRequestTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRequestTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequestTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRequestTypesResponseMultiError, or nil if none found.
func (m *ListRequestTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequestTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRequestTypesResponseValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRequestTypesResponseValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRequestTypesResponseValidationError{
					field:  fmt.Sprintf("Types[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRequestTypesResponseMultiError(errors)
	}

	return nil
}

// ListRequestTypesResponseMultiError is an error wrapping multiple validation
// errors returned by ListRequestTypesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRequestTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestTypesResponseMultiError) AllErrors() []error { return m }

// ListRequestTypesResponseValidationError is the validation error returned by
// ListRequestTypesResponse.Validate if the designated constraints aren't met.
type ListRequestTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestTypesResponseValidationError) ErrorName() string {
	return "ListRequestTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRequestTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequestTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestTypesResponseValidationError{}

// Validate checks the field values on CreateOrUpdateRequestTypeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrUpdateRequestTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateRequestTypeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateRequestTypeRequestMultiError, or nil if none found.
func (m *CreateOrUpdateRequestTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateRequestTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateRequestTypeRequestValidationError{
					field:  "RequestType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateRequestTypeRequestValidationError{
					field:  "RequestType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateRequestTypeRequestValidationError{
				field:  "RequestType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateRequestTypeRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateRequestTypeRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateRequestTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateRequestTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateRequestTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateRequestTypeRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateRequestTypeRequestValidationError is the validation error
// returned by CreateOrUpdateRequestTypeRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateRequestTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateRequestTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateRequestTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateRequestTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateRequestTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateRequestTypeRequestValidationError) ErrorName() string {
	return "CreateOrUpdateRequestTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateRequestTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateRequestTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateRequestTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateRequestTypeRequestValidationError{}

// Validate checks the field values on CreateOrUpdateRequestTypeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrUpdateRequestTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateRequestTypeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateRequestTypeResponseMultiError, or nil if none found.
func (m *CreateOrUpdateRequestTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateRequestTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateRequestTypeResponseValidationError{
					field:  "RequestType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateRequestTypeResponseValidationError{
					field:  "RequestType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateRequestTypeResponseValidationError{
				field:  "RequestType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateRequestTypeResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateRequestTypeResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateRequestTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateRequestTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateRequestTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateRequestTypeResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateRequestTypeResponseValidationError is the validation error
// returned by CreateOrUpdateRequestTypeResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdateRequestTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateRequestTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateRequestTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateRequestTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateRequestTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateRequestTypeResponseValidationError) ErrorName() string {
	return "CreateOrUpdateRequestTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateRequestTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateRequestTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateRequestTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateRequestTypeResponseValidationError{}

// Validate checks the field values on DeleteRequestTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRequestTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequestTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRequestTypeRequestMultiError, or nil if none found.
func (m *DeleteRequestTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequestTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestTypeRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestTypeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRequestTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRequestTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestTypeRequestMultiError) AllErrors() []error { return m }

// DeleteRequestTypeRequestValidationError is the validation error returned by
// DeleteRequestTypeRequest.Validate if the designated constraints aren't met.
type DeleteRequestTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestTypeRequestValidationError) ErrorName() string {
	return "DeleteRequestTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRequestTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequestTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestTypeRequestValidationError{}

// Validate checks the field values on DeleteRequestTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRequestTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequestTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRequestTypeResponseMultiError, or nil if none found.
func (m *DeleteRequestTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequestTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRequestTypeResponseMultiError(errors)
	}

	return nil
}

// DeleteRequestTypeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRequestTypeResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteRequestTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestTypeResponseMultiError) AllErrors() []error { return m }

// DeleteRequestTypeResponseValidationError is the validation error returned by
// DeleteRequestTypeResponse.Validate if the designated constraints aren't met.
type DeleteRequestTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestTypeResponseValidationError) ErrorName() string {
	return "DeleteRequestTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRequestTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequestTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestTypeResponseValidationError{}

// Validate checks the field values on ListRequestCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRequestCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequestCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRequestCommentsRequestMultiError, or nil if none found.
func (m *ListRequestCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequestCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListRequestCommentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRequestCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRequestCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRequestCommentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestId

	if len(errors) > 0 {
		return ListRequestCommentsRequestMultiError(errors)
	}

	return nil
}

// ListRequestCommentsRequestMultiError is an error wrapping multiple
// validation errors returned by ListRequestCommentsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListRequestCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestCommentsRequestMultiError) AllErrors() []error { return m }

// ListRequestCommentsRequestValidationError is the validation error returned
// by ListRequestCommentsRequest.Validate if the designated constraints aren't met.
type ListRequestCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestCommentsRequestValidationError) ErrorName() string {
	return "ListRequestCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRequestCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequestCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestCommentsRequestValidationError{}

// Validate checks the field values on ListRequestCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRequestCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequestCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRequestCommentsResponseMultiError, or nil if none found.
func (m *ListRequestCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequestCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRequestCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRequestCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRequestCommentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRequestCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRequestCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRequestCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRequestCommentsResponseMultiError(errors)
	}

	return nil
}

// ListRequestCommentsResponseMultiError is an error wrapping multiple
// validation errors returned by ListRequestCommentsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListRequestCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestCommentsResponseMultiError) AllErrors() []error { return m }

// ListRequestCommentsResponseValidationError is the validation error returned
// by ListRequestCommentsResponse.Validate if the designated constraints
// aren't met.
type ListRequestCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestCommentsResponseValidationError) ErrorName() string {
	return "ListRequestCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRequestCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequestCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestCommentsResponseValidationError{}

// Validate checks the field values on PostRequestCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostRequestCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostRequestCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostRequestCommentRequestMultiError, or nil if none found.
func (m *PostRequestCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostRequestCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := PostRequestCommentRequestValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostRequestCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostRequestCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostRequestCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostRequestCommentRequestMultiError(errors)
	}

	return nil
}

// PostRequestCommentRequestMultiError is an error wrapping multiple validation
// errors returned by PostRequestCommentRequest.ValidateAll() if the
// designated constraints aren't met.
type PostRequestCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostRequestCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostRequestCommentRequestMultiError) AllErrors() []error { return m }

// PostRequestCommentRequestValidationError is the validation error returned by
// PostRequestCommentRequest.Validate if the designated constraints aren't met.
type PostRequestCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostRequestCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostRequestCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostRequestCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostRequestCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostRequestCommentRequestValidationError) ErrorName() string {
	return "PostRequestCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostRequestCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostRequestCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostRequestCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostRequestCommentRequestValidationError{}

// Validate checks the field values on PostRequestCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostRequestCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostRequestCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostRequestCommentResponseMultiError, or nil if none found.
func (m *PostRequestCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostRequestCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := PostRequestCommentResponseValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostRequestCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostRequestCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostRequestCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostRequestCommentResponseMultiError(errors)
	}

	return nil
}

// PostRequestCommentResponseMultiError is an error wrapping multiple
// validation errors returned by PostRequestCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type PostRequestCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostRequestCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostRequestCommentResponseMultiError) AllErrors() []error { return m }

// PostRequestCommentResponseValidationError is the validation error returned
// by PostRequestCommentResponse.Validate if the designated constraints aren't met.
type PostRequestCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostRequestCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostRequestCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostRequestCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostRequestCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostRequestCommentResponseValidationError) ErrorName() string {
	return "PostRequestCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostRequestCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostRequestCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostRequestCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostRequestCommentResponseValidationError{}

// Validate checks the field values on DeleteRequestCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRequestCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequestCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRequestCommentRequestMultiError, or nil if none found.
func (m *DeleteRequestCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequestCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestCommentRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteRequestCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteRequestCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestCommentRequestMultiError) AllErrors() []error { return m }

// DeleteRequestCommentRequestValidationError is the validation error returned
// by DeleteRequestCommentRequest.Validate if the designated constraints
// aren't met.
type DeleteRequestCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestCommentRequestValidationError) ErrorName() string {
	return "DeleteRequestCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRequestCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequestCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestCommentRequestValidationError{}

// Validate checks the field values on DeleteRequestCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRequestCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequestCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRequestCommentResponseMultiError, or nil if none found.
func (m *DeleteRequestCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequestCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRequestCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteRequestCommentResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteRequestCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteRequestCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestCommentResponseMultiError) AllErrors() []error { return m }

// DeleteRequestCommentResponseValidationError is the validation error returned
// by DeleteRequestCommentResponse.Validate if the designated constraints
// aren't met.
type DeleteRequestCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestCommentResponseValidationError) ErrorName() string {
	return "DeleteRequestCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRequestCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequestCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestCommentResponseValidationError{}
