// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: services/jobs/requests.proto

package jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobsRequestsService_ListRequests_FullMethodName              = "/services.jobs.JobsRequestsService/ListRequests"
	JobsRequestsService_CreateRequest_FullMethodName             = "/services.jobs.JobsRequestsService/CreateRequest"
	JobsRequestsService_UpdateRequest_FullMethodName             = "/services.jobs.JobsRequestsService/UpdateRequest"
	JobsRequestsService_DeleteRequest_FullMethodName             = "/services.jobs.JobsRequestsService/DeleteRequest"
	JobsRequestsService_ListRequestTypes_FullMethodName          = "/services.jobs.JobsRequestsService/ListRequestTypes"
	JobsRequestsService_CreateOrUpdateRequestType_FullMethodName = "/services.jobs.JobsRequestsService/CreateOrUpdateRequestType"
	JobsRequestsService_DeleteRequestType_FullMethodName         = "/services.jobs.JobsRequestsService/DeleteRequestType"
	JobsRequestsService_ListRequestComments_FullMethodName       = "/services.jobs.JobsRequestsService/ListRequestComments"
	JobsRequestsService_PostRequestComment_FullMethodName        = "/services.jobs.JobsRequestsService/PostRequestComment"
	JobsRequestsService_DeleteRequestComment_FullMethodName      = "/services.jobs.JobsRequestsService/DeleteRequestComment"
)

// JobsRequestsServiceClient is the client API for JobsRequestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobsRequestsServiceClient interface {
	// @perm: Attrs=Access/StringList:[]string{"Own", "All"}ยง[]string{"Own"}
	ListRequests(ctx context.Context, in *ListRequestsRequest, opts ...grpc.CallOption) (*ListRequestsResponse, error)
	// @perm
	CreateRequest(ctx context.Context, in *CreateRequestRequest, opts ...grpc.CallOption) (*CreateRequestResponse, error)
	// @perm
	UpdateRequest(ctx context.Context, in *UpdateRequestRequest, opts ...grpc.CallOption) (*UpdateRequestResponse, error)
	// @perm
	DeleteRequest(ctx context.Context, in *DeleteRequestRequest, opts ...grpc.CallOption) (*DeleteRequestResponse, error)
	// @perm: Name=ListRequests
	ListRequestTypes(ctx context.Context, in *ListRequestTypesRequest, opts ...grpc.CallOption) (*ListRequestTypesResponse, error)
	// @perm
	CreateOrUpdateRequestType(ctx context.Context, in *CreateOrUpdateRequestTypeRequest, opts ...grpc.CallOption) (*CreateOrUpdateRequestTypeResponse, error)
	// @perm
	DeleteRequestType(ctx context.Context, in *DeleteRequestTypeRequest, opts ...grpc.CallOption) (*DeleteRequestTypeResponse, error)
	// @perm: Name=ListRequests
	ListRequestComments(ctx context.Context, in *ListRequestCommentsRequest, opts ...grpc.CallOption) (*ListRequestCommentsResponse, error)
	// @perm: Name=CreateRequest
	PostRequestComment(ctx context.Context, in *PostRequestCommentRequest, opts ...grpc.CallOption) (*PostRequestCommentResponse, error)
	// @perm
	DeleteRequestComment(ctx context.Context, in *DeleteRequestCommentRequest, opts ...grpc.CallOption) (*DeleteRequestCommentResponse, error)
}

type jobsRequestsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsRequestsServiceClient(cc grpc.ClientConnInterface) JobsRequestsServiceClient {
	return &jobsRequestsServiceClient{cc}
}

func (c *jobsRequestsServiceClient) ListRequests(ctx context.Context, in *ListRequestsRequest, opts ...grpc.CallOption) (*ListRequestsResponse, error) {
	out := new(ListRequestsResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_ListRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) CreateRequest(ctx context.Context, in *CreateRequestRequest, opts ...grpc.CallOption) (*CreateRequestResponse, error) {
	out := new(CreateRequestResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_CreateRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) UpdateRequest(ctx context.Context, in *UpdateRequestRequest, opts ...grpc.CallOption) (*UpdateRequestResponse, error) {
	out := new(UpdateRequestResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_UpdateRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) DeleteRequest(ctx context.Context, in *DeleteRequestRequest, opts ...grpc.CallOption) (*DeleteRequestResponse, error) {
	out := new(DeleteRequestResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_DeleteRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) ListRequestTypes(ctx context.Context, in *ListRequestTypesRequest, opts ...grpc.CallOption) (*ListRequestTypesResponse, error) {
	out := new(ListRequestTypesResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_ListRequestTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) CreateOrUpdateRequestType(ctx context.Context, in *CreateOrUpdateRequestTypeRequest, opts ...grpc.CallOption) (*CreateOrUpdateRequestTypeResponse, error) {
	out := new(CreateOrUpdateRequestTypeResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_CreateOrUpdateRequestType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) DeleteRequestType(ctx context.Context, in *DeleteRequestTypeRequest, opts ...grpc.CallOption) (*DeleteRequestTypeResponse, error) {
	out := new(DeleteRequestTypeResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_DeleteRequestType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) ListRequestComments(ctx context.Context, in *ListRequestCommentsRequest, opts ...grpc.CallOption) (*ListRequestCommentsResponse, error) {
	out := new(ListRequestCommentsResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_ListRequestComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) PostRequestComment(ctx context.Context, in *PostRequestCommentRequest, opts ...grpc.CallOption) (*PostRequestCommentResponse, error) {
	out := new(PostRequestCommentResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_PostRequestComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsRequestsServiceClient) DeleteRequestComment(ctx context.Context, in *DeleteRequestCommentRequest, opts ...grpc.CallOption) (*DeleteRequestCommentResponse, error) {
	out := new(DeleteRequestCommentResponse)
	err := c.cc.Invoke(ctx, JobsRequestsService_DeleteRequestComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsRequestsServiceServer is the server API for JobsRequestsService service.
// All implementations must embed UnimplementedJobsRequestsServiceServer
// for forward compatibility
type JobsRequestsServiceServer interface {
	// @perm: Attrs=Access/StringList:[]string{"Own", "All"}ยง[]string{"Own"}
	ListRequests(context.Context, *ListRequestsRequest) (*ListRequestsResponse, error)
	// @perm
	CreateRequest(context.Context, *CreateRequestRequest) (*CreateRequestResponse, error)
	// @perm
	UpdateRequest(context.Context, *UpdateRequestRequest) (*UpdateRequestResponse, error)
	// @perm
	DeleteRequest(context.Context, *DeleteRequestRequest) (*DeleteRequestResponse, error)
	// @perm: Name=ListRequests
	ListRequestTypes(context.Context, *ListRequestTypesRequest) (*ListRequestTypesResponse, error)
	// @perm
	CreateOrUpdateRequestType(context.Context, *CreateOrUpdateRequestTypeRequest) (*CreateOrUpdateRequestTypeResponse, error)
	// @perm
	DeleteRequestType(context.Context, *DeleteRequestTypeRequest) (*DeleteRequestTypeResponse, error)
	// @perm: Name=ListRequests
	ListRequestComments(context.Context, *ListRequestCommentsRequest) (*ListRequestCommentsResponse, error)
	// @perm: Name=CreateRequest
	PostRequestComment(context.Context, *PostRequestCommentRequest) (*PostRequestCommentResponse, error)
	// @perm
	DeleteRequestComment(context.Context, *DeleteRequestCommentRequest) (*DeleteRequestCommentResponse, error)
	mustEmbedUnimplementedJobsRequestsServiceServer()
}

// UnimplementedJobsRequestsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobsRequestsServiceServer struct {
}

func (UnimplementedJobsRequestsServiceServer) ListRequests(context.Context, *ListRequestsRequest) (*ListRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequests not implemented")
}
func (UnimplementedJobsRequestsServiceServer) CreateRequest(context.Context, *CreateRequestRequest) (*CreateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequest not implemented")
}
func (UnimplementedJobsRequestsServiceServer) UpdateRequest(context.Context, *UpdateRequestRequest) (*UpdateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequest not implemented")
}
func (UnimplementedJobsRequestsServiceServer) DeleteRequest(context.Context, *DeleteRequestRequest) (*DeleteRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRequest not implemented")
}
func (UnimplementedJobsRequestsServiceServer) ListRequestTypes(context.Context, *ListRequestTypesRequest) (*ListRequestTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequestTypes not implemented")
}
func (UnimplementedJobsRequestsServiceServer) CreateOrUpdateRequestType(context.Context, *CreateOrUpdateRequestTypeRequest) (*CreateOrUpdateRequestTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateRequestType not implemented")
}
func (UnimplementedJobsRequestsServiceServer) DeleteRequestType(context.Context, *DeleteRequestTypeRequest) (*DeleteRequestTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRequestType not implemented")
}
func (UnimplementedJobsRequestsServiceServer) ListRequestComments(context.Context, *ListRequestCommentsRequest) (*ListRequestCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequestComments not implemented")
}
func (UnimplementedJobsRequestsServiceServer) PostRequestComment(context.Context, *PostRequestCommentRequest) (*PostRequestCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRequestComment not implemented")
}
func (UnimplementedJobsRequestsServiceServer) DeleteRequestComment(context.Context, *DeleteRequestCommentRequest) (*DeleteRequestCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRequestComment not implemented")
}
func (UnimplementedJobsRequestsServiceServer) mustEmbedUnimplementedJobsRequestsServiceServer() {}

// UnsafeJobsRequestsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsRequestsServiceServer will
// result in compilation errors.
type UnsafeJobsRequestsServiceServer interface {
	mustEmbedUnimplementedJobsRequestsServiceServer()
}

func RegisterJobsRequestsServiceServer(s grpc.ServiceRegistrar, srv JobsRequestsServiceServer) {
	s.RegisterService(&JobsRequestsService_ServiceDesc, srv)
}

func _JobsRequestsService_ListRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).ListRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_ListRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).ListRequests(ctx, req.(*ListRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_CreateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).CreateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_CreateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).CreateRequest(ctx, req.(*CreateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_UpdateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).UpdateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_UpdateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).UpdateRequest(ctx, req.(*UpdateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_DeleteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).DeleteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_DeleteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).DeleteRequest(ctx, req.(*DeleteRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_ListRequestTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).ListRequestTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_ListRequestTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).ListRequestTypes(ctx, req.(*ListRequestTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_CreateOrUpdateRequestType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateRequestTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).CreateOrUpdateRequestType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_CreateOrUpdateRequestType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).CreateOrUpdateRequestType(ctx, req.(*CreateOrUpdateRequestTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_DeleteRequestType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).DeleteRequestType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_DeleteRequestType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).DeleteRequestType(ctx, req.(*DeleteRequestTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_ListRequestComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).ListRequestComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_ListRequestComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).ListRequestComments(ctx, req.(*ListRequestCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_PostRequestComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).PostRequestComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_PostRequestComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).PostRequestComment(ctx, req.(*PostRequestCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsRequestsService_DeleteRequestComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsRequestsServiceServer).DeleteRequestComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsRequestsService_DeleteRequestComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsRequestsServiceServer).DeleteRequestComment(ctx, req.(*DeleteRequestCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobsRequestsService_ServiceDesc is the grpc.ServiceDesc for JobsRequestsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobsRequestsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.jobs.JobsRequestsService",
	HandlerType: (*JobsRequestsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRequests",
			Handler:    _JobsRequestsService_ListRequests_Handler,
		},
		{
			MethodName: "CreateRequest",
			Handler:    _JobsRequestsService_CreateRequest_Handler,
		},
		{
			MethodName: "UpdateRequest",
			Handler:    _JobsRequestsService_UpdateRequest_Handler,
		},
		{
			MethodName: "DeleteRequest",
			Handler:    _JobsRequestsService_DeleteRequest_Handler,
		},
		{
			MethodName: "ListRequestTypes",
			Handler:    _JobsRequestsService_ListRequestTypes_Handler,
		},
		{
			MethodName: "CreateOrUpdateRequestType",
			Handler:    _JobsRequestsService_CreateOrUpdateRequestType_Handler,
		},
		{
			MethodName: "DeleteRequestType",
			Handler:    _JobsRequestsService_DeleteRequestType_Handler,
		},
		{
			MethodName: "ListRequestComments",
			Handler:    _JobsRequestsService_ListRequestComments_Handler,
		},
		{
			MethodName: "PostRequestComment",
			Handler:    _JobsRequestsService_PostRequestComment_Handler,
		},
		{
			MethodName: "DeleteRequestComment",
			Handler:    _JobsRequestsService_DeleteRequestComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/jobs/requests.proto",
}
