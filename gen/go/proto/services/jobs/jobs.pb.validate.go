// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/jobs/jobs.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	jobs "github.com/galexrt/fivenet/gen/go/proto/resources/jobs"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = jobs.ConductType(0)
)

// Validate checks the field values on ColleaguesListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ColleaguesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColleaguesListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColleaguesListRequestMultiError, or nil if none found.
func (m *ColleaguesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ColleaguesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ColleaguesListRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ColleaguesListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ColleaguesListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ColleaguesListRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSearchName()) > 50 {
		err := ColleaguesListRequestValidationError{
			field:  "SearchName",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ColleaguesListRequestMultiError(errors)
	}

	return nil
}

// ColleaguesListRequestMultiError is an error wrapping multiple validation
// errors returned by ColleaguesListRequest.ValidateAll() if the designated
// constraints aren't met.
type ColleaguesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColleaguesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColleaguesListRequestMultiError) AllErrors() []error { return m }

// ColleaguesListRequestValidationError is the validation error returned by
// ColleaguesListRequest.Validate if the designated constraints aren't met.
type ColleaguesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColleaguesListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColleaguesListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColleaguesListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColleaguesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColleaguesListRequestValidationError) ErrorName() string {
	return "ColleaguesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ColleaguesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColleaguesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColleaguesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColleaguesListRequestValidationError{}

// Validate checks the field values on ColleaguesListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ColleaguesListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColleaguesListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColleaguesListResponseMultiError, or nil if none found.
func (m *ColleaguesListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ColleaguesListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ColleaguesListResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ColleaguesListResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ColleaguesListResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ColleaguesListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ColleaguesListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ColleaguesListResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ColleaguesListResponseMultiError(errors)
	}

	return nil
}

// ColleaguesListResponseMultiError is an error wrapping multiple validation
// errors returned by ColleaguesListResponse.ValidateAll() if the designated
// constraints aren't met.
type ColleaguesListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColleaguesListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColleaguesListResponseMultiError) AllErrors() []error { return m }

// ColleaguesListResponseValidationError is the validation error returned by
// ColleaguesListResponse.Validate if the designated constraints aren't met.
type ColleaguesListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColleaguesListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColleaguesListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColleaguesListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColleaguesListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColleaguesListResponseValidationError) ErrorName() string {
	return "ColleaguesListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ColleaguesListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColleaguesListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColleaguesListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColleaguesListResponseValidationError{}

// Validate checks the field values on ConductListEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConductListEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConductListEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConductListEntriesRequestMultiError, or nil if none found.
func (m *ConductListEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConductListEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ConductListEntriesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConductListEntriesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConductListEntriesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConductListEntriesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ShowExpired != nil {
		// no validation rules for ShowExpired
	}

	if len(errors) > 0 {
		return ConductListEntriesRequestMultiError(errors)
	}

	return nil
}

// ConductListEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by ConductListEntriesRequest.ValidateAll() if the
// designated constraints aren't met.
type ConductListEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConductListEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConductListEntriesRequestMultiError) AllErrors() []error { return m }

// ConductListEntriesRequestValidationError is the validation error returned by
// ConductListEntriesRequest.Validate if the designated constraints aren't met.
type ConductListEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductListEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductListEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductListEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductListEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductListEntriesRequestValidationError) ErrorName() string {
	return "ConductListEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConductListEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductListEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductListEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductListEntriesRequestValidationError{}

// Validate checks the field values on ConductListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConductListEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConductListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConductListEntriesResponseMultiError, or nil if none found.
func (m *ConductListEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConductListEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConductListEntriesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConductListEntriesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConductListEntriesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConductListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConductListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConductListEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConductListEntriesResponseMultiError(errors)
	}

	return nil
}

// ConductListEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by ConductListEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type ConductListEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConductListEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConductListEntriesResponseMultiError) AllErrors() []error { return m }

// ConductListEntriesResponseValidationError is the validation error returned
// by ConductListEntriesResponse.Validate if the designated constraints aren't met.
type ConductListEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductListEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductListEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductListEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductListEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductListEntriesResponseValidationError) ErrorName() string {
	return "ConductListEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConductListEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductListEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductListEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductListEntriesResponseValidationError{}

// Validate checks the field values on ConductCreateEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConductCreateEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConductCreateEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConductCreateEntryRequestMultiError, or nil if none found.
func (m *ConductCreateEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConductCreateEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := ConductCreateEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConductCreateEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConductCreateEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConductCreateEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConductCreateEntryRequestMultiError(errors)
	}

	return nil
}

// ConductCreateEntryRequestMultiError is an error wrapping multiple validation
// errors returned by ConductCreateEntryRequest.ValidateAll() if the
// designated constraints aren't met.
type ConductCreateEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConductCreateEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConductCreateEntryRequestMultiError) AllErrors() []error { return m }

// ConductCreateEntryRequestValidationError is the validation error returned by
// ConductCreateEntryRequest.Validate if the designated constraints aren't met.
type ConductCreateEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductCreateEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductCreateEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductCreateEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductCreateEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductCreateEntryRequestValidationError) ErrorName() string {
	return "ConductCreateEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConductCreateEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductCreateEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductCreateEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductCreateEntryRequestValidationError{}

// Validate checks the field values on ConductCreateEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConductCreateEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConductCreateEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConductCreateEntryResponseMultiError, or nil if none found.
func (m *ConductCreateEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConductCreateEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConductCreateEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConductCreateEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConductCreateEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConductCreateEntryResponseMultiError(errors)
	}

	return nil
}

// ConductCreateEntryResponseMultiError is an error wrapping multiple
// validation errors returned by ConductCreateEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type ConductCreateEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConductCreateEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConductCreateEntryResponseMultiError) AllErrors() []error { return m }

// ConductCreateEntryResponseValidationError is the validation error returned
// by ConductCreateEntryResponse.Validate if the designated constraints aren't met.
type ConductCreateEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductCreateEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductCreateEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductCreateEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductCreateEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductCreateEntryResponseValidationError) ErrorName() string {
	return "ConductCreateEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConductCreateEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductCreateEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductCreateEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductCreateEntryResponseValidationError{}

// Validate checks the field values on ConductUpdateEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConductUpdateEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConductUpdateEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConductUpdateEntryRequestMultiError, or nil if none found.
func (m *ConductUpdateEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConductUpdateEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := ConductUpdateEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConductUpdateEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConductUpdateEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConductUpdateEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConductUpdateEntryRequestMultiError(errors)
	}

	return nil
}

// ConductUpdateEntryRequestMultiError is an error wrapping multiple validation
// errors returned by ConductUpdateEntryRequest.ValidateAll() if the
// designated constraints aren't met.
type ConductUpdateEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConductUpdateEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConductUpdateEntryRequestMultiError) AllErrors() []error { return m }

// ConductUpdateEntryRequestValidationError is the validation error returned by
// ConductUpdateEntryRequest.Validate if the designated constraints aren't met.
type ConductUpdateEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductUpdateEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductUpdateEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductUpdateEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductUpdateEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductUpdateEntryRequestValidationError) ErrorName() string {
	return "ConductUpdateEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConductUpdateEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductUpdateEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductUpdateEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductUpdateEntryRequestValidationError{}

// Validate checks the field values on ConductUpdateEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConductUpdateEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConductUpdateEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConductUpdateEntryResponseMultiError, or nil if none found.
func (m *ConductUpdateEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConductUpdateEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := ConductUpdateEntryResponseValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConductUpdateEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConductUpdateEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConductUpdateEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConductUpdateEntryResponseMultiError(errors)
	}

	return nil
}

// ConductUpdateEntryResponseMultiError is an error wrapping multiple
// validation errors returned by ConductUpdateEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type ConductUpdateEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConductUpdateEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConductUpdateEntryResponseMultiError) AllErrors() []error { return m }

// ConductUpdateEntryResponseValidationError is the validation error returned
// by ConductUpdateEntryResponse.Validate if the designated constraints aren't met.
type ConductUpdateEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductUpdateEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductUpdateEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductUpdateEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductUpdateEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductUpdateEntryResponseValidationError) ErrorName() string {
	return "ConductUpdateEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConductUpdateEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductUpdateEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductUpdateEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductUpdateEntryResponseValidationError{}

// Validate checks the field values on ConductDeleteEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConductDeleteEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConductDeleteEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConductDeleteEntryRequestMultiError, or nil if none found.
func (m *ConductDeleteEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConductDeleteEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ConductDeleteEntryRequestMultiError(errors)
	}

	return nil
}

// ConductDeleteEntryRequestMultiError is an error wrapping multiple validation
// errors returned by ConductDeleteEntryRequest.ValidateAll() if the
// designated constraints aren't met.
type ConductDeleteEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConductDeleteEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConductDeleteEntryRequestMultiError) AllErrors() []error { return m }

// ConductDeleteEntryRequestValidationError is the validation error returned by
// ConductDeleteEntryRequest.Validate if the designated constraints aren't met.
type ConductDeleteEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductDeleteEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductDeleteEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductDeleteEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductDeleteEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductDeleteEntryRequestValidationError) ErrorName() string {
	return "ConductDeleteEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConductDeleteEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductDeleteEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductDeleteEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductDeleteEntryRequestValidationError{}

// Validate checks the field values on ConductDeleteEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConductDeleteEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConductDeleteEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConductDeleteEntryResponseMultiError, or nil if none found.
func (m *ConductDeleteEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConductDeleteEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConductDeleteEntryResponseMultiError(errors)
	}

	return nil
}

// ConductDeleteEntryResponseMultiError is an error wrapping multiple
// validation errors returned by ConductDeleteEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type ConductDeleteEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConductDeleteEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConductDeleteEntryResponseMultiError) AllErrors() []error { return m }

// ConductDeleteEntryResponseValidationError is the validation error returned
// by ConductDeleteEntryResponse.Validate if the designated constraints aren't met.
type ConductDeleteEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductDeleteEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductDeleteEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductDeleteEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductDeleteEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductDeleteEntryResponseValidationError) ErrorName() string {
	return "ConductDeleteEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConductDeleteEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductDeleteEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductDeleteEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductDeleteEntryResponseValidationError{}

// Validate checks the field values on TimeclockListEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeclockListEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockListEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeclockListEntriesRequestMultiError, or nil if none found.
func (m *TimeclockListEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockListEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := TimeclockListEntriesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeclockListEntriesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeclockListEntriesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeclockListEntriesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockListEntriesRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockListEntriesRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockListEntriesRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.To != nil {

		if all {
			switch v := interface{}(m.GetTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockListEntriesRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockListEntriesRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockListEntriesRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TimeclockListEntriesRequestMultiError(errors)
	}

	return nil
}

// TimeclockListEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by TimeclockListEntriesRequest.ValidateAll() if
// the designated constraints aren't met.
type TimeclockListEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockListEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockListEntriesRequestMultiError) AllErrors() []error { return m }

// TimeclockListEntriesRequestValidationError is the validation error returned
// by TimeclockListEntriesRequest.Validate if the designated constraints
// aren't met.
type TimeclockListEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockListEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockListEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockListEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockListEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockListEntriesRequestValidationError) ErrorName() string {
	return "TimeclockListEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TimeclockListEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockListEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockListEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockListEntriesRequestValidationError{}

// Validate checks the field values on TimeclockListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeclockListEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeclockListEntriesResponseMultiError, or nil if none found.
func (m *TimeclockListEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockListEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeclockListEntriesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeclockListEntriesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeclockListEntriesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockListEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeclockListEntriesResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeclockListEntriesResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeclockListEntriesResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimeclockListEntriesResponseMultiError(errors)
	}

	return nil
}

// TimeclockListEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by TimeclockListEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type TimeclockListEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockListEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockListEntriesResponseMultiError) AllErrors() []error { return m }

// TimeclockListEntriesResponseValidationError is the validation error returned
// by TimeclockListEntriesResponse.Validate if the designated constraints
// aren't met.
type TimeclockListEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockListEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockListEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockListEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockListEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockListEntriesResponseValidationError) ErrorName() string {
	return "TimeclockListEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TimeclockListEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockListEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockListEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockListEntriesResponseValidationError{}

// Validate checks the field values on TimeclockStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeclockStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeclockStatsRequestMultiError, or nil if none found.
func (m *TimeclockStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TimeclockStatsRequestMultiError(errors)
	}

	return nil
}

// TimeclockStatsRequestMultiError is an error wrapping multiple validation
// errors returned by TimeclockStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type TimeclockStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockStatsRequestMultiError) AllErrors() []error { return m }

// TimeclockStatsRequestValidationError is the validation error returned by
// TimeclockStatsRequest.Validate if the designated constraints aren't met.
type TimeclockStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockStatsRequestValidationError) ErrorName() string {
	return "TimeclockStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TimeclockStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockStatsRequestValidationError{}

// Validate checks the field values on TimeclockStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeclockStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeclockStatsResponseMultiError, or nil if none found.
func (m *TimeclockStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeclockStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeclockStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeclockStatsResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimeclockStatsResponseMultiError(errors)
	}

	return nil
}

// TimeclockStatsResponseMultiError is an error wrapping multiple validation
// errors returned by TimeclockStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type TimeclockStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockStatsResponseMultiError) AllErrors() []error { return m }

// TimeclockStatsResponseValidationError is the validation error returned by
// TimeclockStatsResponse.Validate if the designated constraints aren't met.
type TimeclockStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockStatsResponseValidationError) ErrorName() string {
	return "TimeclockStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TimeclockStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockStatsResponseValidationError{}

// Validate checks the field values on RequestsListEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsListEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsListEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsListEntriesRequestMultiError, or nil if none found.
func (m *RequestsListEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsListEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := RequestsListEntriesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsListEntriesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsListEntriesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsListEntriesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequestsListEntriesRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequestsListEntriesRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestsListEntriesRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.To != nil {

		if all {
			switch v := interface{}(m.GetTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequestsListEntriesRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequestsListEntriesRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestsListEntriesRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 50 {
			err := RequestsListEntriesRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RequestsListEntriesRequestMultiError(errors)
	}

	return nil
}

// RequestsListEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by RequestsListEntriesRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestsListEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsListEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsListEntriesRequestMultiError) AllErrors() []error { return m }

// RequestsListEntriesRequestValidationError is the validation error returned
// by RequestsListEntriesRequest.Validate if the designated constraints aren't met.
type RequestsListEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsListEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsListEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsListEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsListEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsListEntriesRequestValidationError) ErrorName() string {
	return "RequestsListEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsListEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsListEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsListEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsListEntriesRequestValidationError{}

// Validate checks the field values on RequestsListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsListEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsListEntriesResponseMultiError, or nil if none found.
func (m *RequestsListEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsListEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsListEntriesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsListEntriesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsListEntriesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequestsListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequestsListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestsListEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RequestsListEntriesResponseMultiError(errors)
	}

	return nil
}

// RequestsListEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by RequestsListEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestsListEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsListEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsListEntriesResponseMultiError) AllErrors() []error { return m }

// RequestsListEntriesResponseValidationError is the validation error returned
// by RequestsListEntriesResponse.Validate if the designated constraints
// aren't met.
type RequestsListEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsListEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsListEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsListEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsListEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsListEntriesResponseValidationError) ErrorName() string {
	return "RequestsListEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsListEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsListEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsListEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsListEntriesResponseValidationError{}

// Validate checks the field values on RequestsCreateEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsCreateEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsCreateEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsCreateEntryRequestMultiError, or nil if none found.
func (m *RequestsCreateEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsCreateEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := RequestsCreateEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsCreateEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsCreateEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsCreateEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestsCreateEntryRequestMultiError(errors)
	}

	return nil
}

// RequestsCreateEntryRequestMultiError is an error wrapping multiple
// validation errors returned by RequestsCreateEntryRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestsCreateEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsCreateEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsCreateEntryRequestMultiError) AllErrors() []error { return m }

// RequestsCreateEntryRequestValidationError is the validation error returned
// by RequestsCreateEntryRequest.Validate if the designated constraints aren't met.
type RequestsCreateEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsCreateEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsCreateEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsCreateEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsCreateEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsCreateEntryRequestValidationError) ErrorName() string {
	return "RequestsCreateEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsCreateEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsCreateEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsCreateEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsCreateEntryRequestValidationError{}

// Validate checks the field values on RequestsCreateEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsCreateEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsCreateEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsCreateEntryResponseMultiError, or nil if none found.
func (m *RequestsCreateEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsCreateEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsCreateEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsCreateEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsCreateEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestsCreateEntryResponseMultiError(errors)
	}

	return nil
}

// RequestsCreateEntryResponseMultiError is an error wrapping multiple
// validation errors returned by RequestsCreateEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestsCreateEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsCreateEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsCreateEntryResponseMultiError) AllErrors() []error { return m }

// RequestsCreateEntryResponseValidationError is the validation error returned
// by RequestsCreateEntryResponse.Validate if the designated constraints
// aren't met.
type RequestsCreateEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsCreateEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsCreateEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsCreateEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsCreateEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsCreateEntryResponseValidationError) ErrorName() string {
	return "RequestsCreateEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsCreateEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsCreateEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsCreateEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsCreateEntryResponseValidationError{}

// Validate checks the field values on RequestsUpdateEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsUpdateEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsUpdateEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsUpdateEntryRequestMultiError, or nil if none found.
func (m *RequestsUpdateEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsUpdateEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := RequestsUpdateEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsUpdateEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsUpdateEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsUpdateEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestsUpdateEntryRequestMultiError(errors)
	}

	return nil
}

// RequestsUpdateEntryRequestMultiError is an error wrapping multiple
// validation errors returned by RequestsUpdateEntryRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestsUpdateEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsUpdateEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsUpdateEntryRequestMultiError) AllErrors() []error { return m }

// RequestsUpdateEntryRequestValidationError is the validation error returned
// by RequestsUpdateEntryRequest.Validate if the designated constraints aren't met.
type RequestsUpdateEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsUpdateEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsUpdateEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsUpdateEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsUpdateEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsUpdateEntryRequestValidationError) ErrorName() string {
	return "RequestsUpdateEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsUpdateEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsUpdateEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsUpdateEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsUpdateEntryRequestValidationError{}

// Validate checks the field values on RequestsUpdateEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsUpdateEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsUpdateEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsUpdateEntryResponseMultiError, or nil if none found.
func (m *RequestsUpdateEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsUpdateEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsUpdateEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsUpdateEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsUpdateEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestsUpdateEntryResponseMultiError(errors)
	}

	return nil
}

// RequestsUpdateEntryResponseMultiError is an error wrapping multiple
// validation errors returned by RequestsUpdateEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestsUpdateEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsUpdateEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsUpdateEntryResponseMultiError) AllErrors() []error { return m }

// RequestsUpdateEntryResponseValidationError is the validation error returned
// by RequestsUpdateEntryResponse.Validate if the designated constraints
// aren't met.
type RequestsUpdateEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsUpdateEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsUpdateEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsUpdateEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsUpdateEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsUpdateEntryResponseValidationError) ErrorName() string {
	return "RequestsUpdateEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsUpdateEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsUpdateEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsUpdateEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsUpdateEntryResponseValidationError{}

// Validate checks the field values on RequestsDeleteEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsDeleteEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsDeleteEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsDeleteEntryRequestMultiError, or nil if none found.
func (m *RequestsDeleteEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsDeleteEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RequestsDeleteEntryRequestMultiError(errors)
	}

	return nil
}

// RequestsDeleteEntryRequestMultiError is an error wrapping multiple
// validation errors returned by RequestsDeleteEntryRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestsDeleteEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsDeleteEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsDeleteEntryRequestMultiError) AllErrors() []error { return m }

// RequestsDeleteEntryRequestValidationError is the validation error returned
// by RequestsDeleteEntryRequest.Validate if the designated constraints aren't met.
type RequestsDeleteEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsDeleteEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsDeleteEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsDeleteEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsDeleteEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsDeleteEntryRequestValidationError) ErrorName() string {
	return "RequestsDeleteEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsDeleteEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsDeleteEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsDeleteEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsDeleteEntryRequestValidationError{}

// Validate checks the field values on RequestsDeleteEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsDeleteEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsDeleteEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsDeleteEntryResponseMultiError, or nil if none found.
func (m *RequestsDeleteEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsDeleteEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestsDeleteEntryResponseMultiError(errors)
	}

	return nil
}

// RequestsDeleteEntryResponseMultiError is an error wrapping multiple
// validation errors returned by RequestsDeleteEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestsDeleteEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsDeleteEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsDeleteEntryResponseMultiError) AllErrors() []error { return m }

// RequestsDeleteEntryResponseValidationError is the validation error returned
// by RequestsDeleteEntryResponse.Validate if the designated constraints
// aren't met.
type RequestsDeleteEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsDeleteEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsDeleteEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsDeleteEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsDeleteEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsDeleteEntryResponseValidationError) ErrorName() string {
	return "RequestsDeleteEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsDeleteEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsDeleteEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsDeleteEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsDeleteEntryResponseValidationError{}

// Validate checks the field values on RequestsListTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsListTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsListTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsListTypesRequestMultiError, or nil if none found.
func (m *RequestsListTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsListTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestsListTypesRequestMultiError(errors)
	}

	return nil
}

// RequestsListTypesRequestMultiError is an error wrapping multiple validation
// errors returned by RequestsListTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type RequestsListTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsListTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsListTypesRequestMultiError) AllErrors() []error { return m }

// RequestsListTypesRequestValidationError is the validation error returned by
// RequestsListTypesRequest.Validate if the designated constraints aren't met.
type RequestsListTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsListTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsListTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsListTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsListTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsListTypesRequestValidationError) ErrorName() string {
	return "RequestsListTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsListTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsListTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsListTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsListTypesRequestValidationError{}

// Validate checks the field values on RequestsListTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsListTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsListTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsListTypesResponseMultiError, or nil if none found.
func (m *RequestsListTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsListTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequestsListTypesResponseValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequestsListTypesResponseValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestsListTypesResponseValidationError{
					field:  fmt.Sprintf("Types[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RequestsListTypesResponseMultiError(errors)
	}

	return nil
}

// RequestsListTypesResponseMultiError is an error wrapping multiple validation
// errors returned by RequestsListTypesResponse.ValidateAll() if the
// designated constraints aren't met.
type RequestsListTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsListTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsListTypesResponseMultiError) AllErrors() []error { return m }

// RequestsListTypesResponseValidationError is the validation error returned by
// RequestsListTypesResponse.Validate if the designated constraints aren't met.
type RequestsListTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsListTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsListTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsListTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsListTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsListTypesResponseValidationError) ErrorName() string {
	return "RequestsListTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsListTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsListTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsListTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsListTypesResponseValidationError{}

// Validate checks the field values on RequestsCreateOrUpdateTypeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RequestsCreateOrUpdateTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsCreateOrUpdateTypeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RequestsCreateOrUpdateTypeRequestMultiError, or nil if none found.
func (m *RequestsCreateOrUpdateTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsCreateOrUpdateTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsCreateOrUpdateTypeRequestValidationError{
					field:  "RequestType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsCreateOrUpdateTypeRequestValidationError{
					field:  "RequestType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsCreateOrUpdateTypeRequestValidationError{
				field:  "RequestType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestsCreateOrUpdateTypeRequestMultiError(errors)
	}

	return nil
}

// RequestsCreateOrUpdateTypeRequestMultiError is an error wrapping multiple
// validation errors returned by
// RequestsCreateOrUpdateTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type RequestsCreateOrUpdateTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsCreateOrUpdateTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsCreateOrUpdateTypeRequestMultiError) AllErrors() []error { return m }

// RequestsCreateOrUpdateTypeRequestValidationError is the validation error
// returned by RequestsCreateOrUpdateTypeRequest.Validate if the designated
// constraints aren't met.
type RequestsCreateOrUpdateTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsCreateOrUpdateTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsCreateOrUpdateTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsCreateOrUpdateTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsCreateOrUpdateTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsCreateOrUpdateTypeRequestValidationError) ErrorName() string {
	return "RequestsCreateOrUpdateTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsCreateOrUpdateTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsCreateOrUpdateTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsCreateOrUpdateTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsCreateOrUpdateTypeRequestValidationError{}

// Validate checks the field values on RequestsCreateOrUpdateTypeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RequestsCreateOrUpdateTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsCreateOrUpdateTypeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RequestsCreateOrUpdateTypeResponseMultiError, or nil if none found.
func (m *RequestsCreateOrUpdateTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsCreateOrUpdateTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsCreateOrUpdateTypeResponseValidationError{
					field:  "RequestType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsCreateOrUpdateTypeResponseValidationError{
					field:  "RequestType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsCreateOrUpdateTypeResponseValidationError{
				field:  "RequestType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestsCreateOrUpdateTypeResponseMultiError(errors)
	}

	return nil
}

// RequestsCreateOrUpdateTypeResponseMultiError is an error wrapping multiple
// validation errors returned by
// RequestsCreateOrUpdateTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type RequestsCreateOrUpdateTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsCreateOrUpdateTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsCreateOrUpdateTypeResponseMultiError) AllErrors() []error { return m }

// RequestsCreateOrUpdateTypeResponseValidationError is the validation error
// returned by RequestsCreateOrUpdateTypeResponse.Validate if the designated
// constraints aren't met.
type RequestsCreateOrUpdateTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsCreateOrUpdateTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsCreateOrUpdateTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsCreateOrUpdateTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsCreateOrUpdateTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsCreateOrUpdateTypeResponseValidationError) ErrorName() string {
	return "RequestsCreateOrUpdateTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsCreateOrUpdateTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsCreateOrUpdateTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsCreateOrUpdateTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsCreateOrUpdateTypeResponseValidationError{}

// Validate checks the field values on RequestsDeleteTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsDeleteTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsDeleteTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsDeleteTypeRequestMultiError, or nil if none found.
func (m *RequestsDeleteTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsDeleteTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RequestsDeleteTypeRequestMultiError(errors)
	}

	return nil
}

// RequestsDeleteTypeRequestMultiError is an error wrapping multiple validation
// errors returned by RequestsDeleteTypeRequest.ValidateAll() if the
// designated constraints aren't met.
type RequestsDeleteTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsDeleteTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsDeleteTypeRequestMultiError) AllErrors() []error { return m }

// RequestsDeleteTypeRequestValidationError is the validation error returned by
// RequestsDeleteTypeRequest.Validate if the designated constraints aren't met.
type RequestsDeleteTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsDeleteTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsDeleteTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsDeleteTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsDeleteTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsDeleteTypeRequestValidationError) ErrorName() string {
	return "RequestsDeleteTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsDeleteTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsDeleteTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsDeleteTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsDeleteTypeRequestValidationError{}

// Validate checks the field values on RequestsDeleteTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsDeleteTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsDeleteTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsDeleteTypeResponseMultiError, or nil if none found.
func (m *RequestsDeleteTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsDeleteTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestsDeleteTypeResponseMultiError(errors)
	}

	return nil
}

// RequestsDeleteTypeResponseMultiError is an error wrapping multiple
// validation errors returned by RequestsDeleteTypeResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestsDeleteTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsDeleteTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsDeleteTypeResponseMultiError) AllErrors() []error { return m }

// RequestsDeleteTypeResponseValidationError is the validation error returned
// by RequestsDeleteTypeResponse.Validate if the designated constraints aren't met.
type RequestsDeleteTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsDeleteTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsDeleteTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsDeleteTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsDeleteTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsDeleteTypeResponseValidationError) ErrorName() string {
	return "RequestsDeleteTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsDeleteTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsDeleteTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsDeleteTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsDeleteTypeResponseValidationError{}

// Validate checks the field values on RequestsListCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsListCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsListCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsListCommentsRequestMultiError, or nil if none found.
func (m *RequestsListCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsListCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := RequestsListCommentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsListCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsListCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsListCommentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestId

	if len(errors) > 0 {
		return RequestsListCommentsRequestMultiError(errors)
	}

	return nil
}

// RequestsListCommentsRequestMultiError is an error wrapping multiple
// validation errors returned by RequestsListCommentsRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestsListCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsListCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsListCommentsRequestMultiError) AllErrors() []error { return m }

// RequestsListCommentsRequestValidationError is the validation error returned
// by RequestsListCommentsRequest.Validate if the designated constraints
// aren't met.
type RequestsListCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsListCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsListCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsListCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsListCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsListCommentsRequestValidationError) ErrorName() string {
	return "RequestsListCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsListCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsListCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsListCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsListCommentsRequestValidationError{}

// Validate checks the field values on RequestsListCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsListCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsListCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsListCommentsResponseMultiError, or nil if none found.
func (m *RequestsListCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsListCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsListCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsListCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsListCommentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequestsListCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequestsListCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestsListCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RequestsListCommentsResponseMultiError(errors)
	}

	return nil
}

// RequestsListCommentsResponseMultiError is an error wrapping multiple
// validation errors returned by RequestsListCommentsResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestsListCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsListCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsListCommentsResponseMultiError) AllErrors() []error { return m }

// RequestsListCommentsResponseValidationError is the validation error returned
// by RequestsListCommentsResponse.Validate if the designated constraints
// aren't met.
type RequestsListCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsListCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsListCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsListCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsListCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsListCommentsResponseValidationError) ErrorName() string {
	return "RequestsListCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsListCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsListCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsListCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsListCommentsResponseValidationError{}

// Validate checks the field values on RequestsPostCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsPostCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsPostCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsPostCommentRequestMultiError, or nil if none found.
func (m *RequestsPostCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsPostCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := RequestsPostCommentRequestValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsPostCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsPostCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsPostCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestsPostCommentRequestMultiError(errors)
	}

	return nil
}

// RequestsPostCommentRequestMultiError is an error wrapping multiple
// validation errors returned by RequestsPostCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestsPostCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsPostCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsPostCommentRequestMultiError) AllErrors() []error { return m }

// RequestsPostCommentRequestValidationError is the validation error returned
// by RequestsPostCommentRequest.Validate if the designated constraints aren't met.
type RequestsPostCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsPostCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsPostCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsPostCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsPostCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsPostCommentRequestValidationError) ErrorName() string {
	return "RequestsPostCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsPostCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsPostCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsPostCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsPostCommentRequestValidationError{}

// Validate checks the field values on RequestsPostCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsPostCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsPostCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsPostCommentResponseMultiError, or nil if none found.
func (m *RequestsPostCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsPostCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := RequestsPostCommentResponseValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestsPostCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestsPostCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestsPostCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestsPostCommentResponseMultiError(errors)
	}

	return nil
}

// RequestsPostCommentResponseMultiError is an error wrapping multiple
// validation errors returned by RequestsPostCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestsPostCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsPostCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsPostCommentResponseMultiError) AllErrors() []error { return m }

// RequestsPostCommentResponseValidationError is the validation error returned
// by RequestsPostCommentResponse.Validate if the designated constraints
// aren't met.
type RequestsPostCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsPostCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsPostCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsPostCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsPostCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsPostCommentResponseValidationError) ErrorName() string {
	return "RequestsPostCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsPostCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsPostCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsPostCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsPostCommentResponseValidationError{}

// Validate checks the field values on RequestsDeleteCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsDeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsDeleteCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestsDeleteCommentRequestMultiError, or nil if none found.
func (m *RequestsDeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsDeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RequestsDeleteCommentRequestMultiError(errors)
	}

	return nil
}

// RequestsDeleteCommentRequestMultiError is an error wrapping multiple
// validation errors returned by RequestsDeleteCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestsDeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsDeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsDeleteCommentRequestMultiError) AllErrors() []error { return m }

// RequestsDeleteCommentRequestValidationError is the validation error returned
// by RequestsDeleteCommentRequest.Validate if the designated constraints
// aren't met.
type RequestsDeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsDeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsDeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsDeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsDeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsDeleteCommentRequestValidationError) ErrorName() string {
	return "RequestsDeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsDeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsDeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsDeleteCommentRequestValidationError{}

// Validate checks the field values on RequestsDeleteCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestsDeleteCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestsDeleteCommentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestsDeleteCommentResponseMultiError, or nil if none found.
func (m *RequestsDeleteCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestsDeleteCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestsDeleteCommentResponseMultiError(errors)
	}

	return nil
}

// RequestsDeleteCommentResponseMultiError is an error wrapping multiple
// validation errors returned by RequestsDeleteCommentResponse.ValidateAll()
// if the designated constraints aren't met.
type RequestsDeleteCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestsDeleteCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestsDeleteCommentResponseMultiError) AllErrors() []error { return m }

// RequestsDeleteCommentResponseValidationError is the validation error
// returned by RequestsDeleteCommentResponse.Validate if the designated
// constraints aren't met.
type RequestsDeleteCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestsDeleteCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestsDeleteCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestsDeleteCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestsDeleteCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestsDeleteCommentResponseValidationError) ErrorName() string {
	return "RequestsDeleteCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestsDeleteCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestsDeleteCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestsDeleteCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestsDeleteCommentResponseValidationError{}
