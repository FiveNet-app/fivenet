// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/sync/sync.proto

package sync

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusRequestMultiError, or nil if none found.
func (m *GetStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetStatusRequestMultiError(errors)
	}

	return nil
}

// GetStatusRequestMultiError is an error wrapping multiple validation errors
// returned by GetStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusRequestMultiError) AllErrors() []error { return m }

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

// Validate checks the field values on GetStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusResponseMultiError, or nil if none found.
func (m *GetStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Jobs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Jobs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Jobs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Users",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVehicles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Vehicles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Vehicles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVehicles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Vehicles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLicenses()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Licenses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Licenses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLicenses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Licenses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserLicenses()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "UserLicenses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "UserLicenses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserLicenses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "UserLicenses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStatusResponseMultiError(errors)
	}

	return nil
}

// GetStatusResponseMultiError is an error wrapping multiple validation errors
// returned by GetStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusResponseMultiError) AllErrors() []error { return m }

// GetStatusResponseValidationError is the validation error returned by
// GetStatusResponse.Validate if the designated constraints aren't met.
type GetStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusResponseValidationError) ErrorName() string {
	return "GetStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusResponseValidationError{}

// Validate checks the field values on AddActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActivityRequestMultiError, or nil if none found.
func (m *AddActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetActivity() == nil {
		err := AddActivityRequestValidationError{
			field:  "Activity",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddActivityRequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddActivityRequestValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddActivityRequestValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddActivityRequestMultiError(errors)
	}

	return nil
}

// AddActivityRequestMultiError is an error wrapping multiple validation errors
// returned by AddActivityRequest.ValidateAll() if the designated constraints
// aren't met.
type AddActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActivityRequestMultiError) AllErrors() []error { return m }

// AddActivityRequestValidationError is the validation error returned by
// AddActivityRequest.Validate if the designated constraints aren't met.
type AddActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityRequestValidationError) ErrorName() string {
	return "AddActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityRequestValidationError{}

// Validate checks the field values on AddActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActivityResponseMultiError, or nil if none found.
func (m *AddActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddActivityResponseMultiError(errors)
	}

	return nil
}

// AddActivityResponseMultiError is an error wrapping multiple validation
// errors returned by AddActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type AddActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActivityResponseMultiError) AllErrors() []error { return m }

// AddActivityResponseValidationError is the validation error returned by
// AddActivityResponse.Validate if the designated constraints aren't met.
type AddActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityResponseValidationError) ErrorName() string {
	return "AddActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityResponseValidationError{}

// Validate checks the field values on SyncDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncDataRequestMultiError, or nil if none found.
func (m *SyncDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *SyncDataRequest_Jobs:
		if v == nil {
			err := SyncDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJobs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "Jobs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "Jobs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncDataRequestValidationError{
					field:  "Jobs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SyncDataRequest_Users:
		if v == nil {
			err := SyncDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUsers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "Users",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "Users",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUsers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncDataRequestValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SyncDataRequest_Vehicles:
		if v == nil {
			err := SyncDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVehicles()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "Vehicles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "Vehicles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVehicles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncDataRequestValidationError{
					field:  "Vehicles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SyncDataRequest_Licenses:
		if v == nil {
			err := SyncDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLicenses()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "Licenses",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "Licenses",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLicenses()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncDataRequestValidationError{
					field:  "Licenses",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SyncDataRequest_UserLicenses:
		if v == nil {
			err := SyncDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserLicenses()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "UserLicenses",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncDataRequestValidationError{
						field:  "UserLicenses",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserLicenses()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncDataRequestValidationError{
					field:  "UserLicenses",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SyncDataRequestMultiError(errors)
	}

	return nil
}

// SyncDataRequestMultiError is an error wrapping multiple validation errors
// returned by SyncDataRequest.ValidateAll() if the designated constraints
// aren't met.
type SyncDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncDataRequestMultiError) AllErrors() []error { return m }

// SyncDataRequestValidationError is the validation error returned by
// SyncDataRequest.Validate if the designated constraints aren't met.
type SyncDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncDataRequestValidationError) ErrorName() string { return "SyncDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e SyncDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncDataRequestValidationError{}

// Validate checks the field values on SyncDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncDataResponseMultiError, or nil if none found.
func (m *SyncDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffectedRows

	if len(errors) > 0 {
		return SyncDataResponseMultiError(errors)
	}

	return nil
}

// SyncDataResponseMultiError is an error wrapping multiple validation errors
// returned by SyncDataResponse.ValidateAll() if the designated constraints
// aren't met.
type SyncDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncDataResponseMultiError) AllErrors() []error { return m }

// SyncDataResponseValidationError is the validation error returned by
// SyncDataResponse.Validate if the designated constraints aren't met.
type SyncDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncDataResponseValidationError) ErrorName() string { return "SyncDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e SyncDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncDataResponseValidationError{}
