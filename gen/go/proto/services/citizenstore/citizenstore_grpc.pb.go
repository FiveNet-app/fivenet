// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: services/citizenstore/citizenstore.proto

package citizenstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CitizenStoreService_ListCitizens_FullMethodName            = "/services.citizenstore.CitizenStoreService/ListCitizens"
	CitizenStoreService_GetUser_FullMethodName                 = "/services.citizenstore.CitizenStoreService/GetUser"
	CitizenStoreService_ListUserActivity_FullMethodName        = "/services.citizenstore.CitizenStoreService/ListUserActivity"
	CitizenStoreService_SetUserProps_FullMethodName            = "/services.citizenstore.CitizenStoreService/SetUserProps"
	CitizenStoreService_SetProfilePicture_FullMethodName       = "/services.citizenstore.CitizenStoreService/SetProfilePicture"
	CitizenStoreService_ManageCitizenAttributes_FullMethodName = "/services.citizenstore.CitizenStoreService/ManageCitizenAttributes"
)

// CitizenStoreServiceClient is the client API for CitizenStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitizenStoreServiceClient interface {
	// @perm: Attrs=Fields/StringList:[]string{"PhoneNumber", "Licenses", "UserProps.Wanted", "UserProps.Job", "UserProps.TrafficInfractionPoints", "UserProps.OpenFines", "UserProps.BloodType", "UserProps.MugShot", "UserProps.Attributes"}
	ListCitizens(ctx context.Context, in *ListCitizensRequest, opts ...grpc.CallOption) (*ListCitizensResponse, error)
	// @perm: Attrs=Jobs/JobGradeList
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"SourceUser", "Own"}
	ListUserActivity(ctx context.Context, in *ListUserActivityRequest, opts ...grpc.CallOption) (*ListUserActivityResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"Wanted", "Job", "TrafficInfractionPoints", "MugShot", "Attributes"}
	SetUserProps(ctx context.Context, in *SetUserPropsRequest, opts ...grpc.CallOption) (*SetUserPropsResponse, error)
	// @perm: Name=Any
	SetProfilePicture(ctx context.Context, in *SetProfilePictureRequest, opts ...grpc.CallOption) (*SetProfilePictureResponse, error)
	// @perm
	ManageCitizenAttributes(ctx context.Context, in *ManageCitizenAttributesRequest, opts ...grpc.CallOption) (*ManageCitizenAttributesResponse, error)
}

type citizenStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCitizenStoreServiceClient(cc grpc.ClientConnInterface) CitizenStoreServiceClient {
	return &citizenStoreServiceClient{cc}
}

func (c *citizenStoreServiceClient) ListCitizens(ctx context.Context, in *ListCitizensRequest, opts ...grpc.CallOption) (*ListCitizensResponse, error) {
	out := new(ListCitizensResponse)
	err := c.cc.Invoke(ctx, CitizenStoreService_ListCitizens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenStoreServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, CitizenStoreService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenStoreServiceClient) ListUserActivity(ctx context.Context, in *ListUserActivityRequest, opts ...grpc.CallOption) (*ListUserActivityResponse, error) {
	out := new(ListUserActivityResponse)
	err := c.cc.Invoke(ctx, CitizenStoreService_ListUserActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenStoreServiceClient) SetUserProps(ctx context.Context, in *SetUserPropsRequest, opts ...grpc.CallOption) (*SetUserPropsResponse, error) {
	out := new(SetUserPropsResponse)
	err := c.cc.Invoke(ctx, CitizenStoreService_SetUserProps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenStoreServiceClient) SetProfilePicture(ctx context.Context, in *SetProfilePictureRequest, opts ...grpc.CallOption) (*SetProfilePictureResponse, error) {
	out := new(SetProfilePictureResponse)
	err := c.cc.Invoke(ctx, CitizenStoreService_SetProfilePicture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenStoreServiceClient) ManageCitizenAttributes(ctx context.Context, in *ManageCitizenAttributesRequest, opts ...grpc.CallOption) (*ManageCitizenAttributesResponse, error) {
	out := new(ManageCitizenAttributesResponse)
	err := c.cc.Invoke(ctx, CitizenStoreService_ManageCitizenAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitizenStoreServiceServer is the server API for CitizenStoreService service.
// All implementations must embed UnimplementedCitizenStoreServiceServer
// for forward compatibility
type CitizenStoreServiceServer interface {
	// @perm: Attrs=Fields/StringList:[]string{"PhoneNumber", "Licenses", "UserProps.Wanted", "UserProps.Job", "UserProps.TrafficInfractionPoints", "UserProps.OpenFines", "UserProps.BloodType", "UserProps.MugShot", "UserProps.Attributes"}
	ListCitizens(context.Context, *ListCitizensRequest) (*ListCitizensResponse, error)
	// @perm: Attrs=Jobs/JobGradeList
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"SourceUser", "Own"}
	ListUserActivity(context.Context, *ListUserActivityRequest) (*ListUserActivityResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"Wanted", "Job", "TrafficInfractionPoints", "MugShot", "Attributes"}
	SetUserProps(context.Context, *SetUserPropsRequest) (*SetUserPropsResponse, error)
	// @perm: Name=Any
	SetProfilePicture(context.Context, *SetProfilePictureRequest) (*SetProfilePictureResponse, error)
	// @perm
	ManageCitizenAttributes(context.Context, *ManageCitizenAttributesRequest) (*ManageCitizenAttributesResponse, error)
	mustEmbedUnimplementedCitizenStoreServiceServer()
}

// UnimplementedCitizenStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCitizenStoreServiceServer struct {
}

func (UnimplementedCitizenStoreServiceServer) ListCitizens(context.Context, *ListCitizensRequest) (*ListCitizensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCitizens not implemented")
}
func (UnimplementedCitizenStoreServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCitizenStoreServiceServer) ListUserActivity(context.Context, *ListUserActivityRequest) (*ListUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserActivity not implemented")
}
func (UnimplementedCitizenStoreServiceServer) SetUserProps(context.Context, *SetUserPropsRequest) (*SetUserPropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserProps not implemented")
}
func (UnimplementedCitizenStoreServiceServer) SetProfilePicture(context.Context, *SetProfilePictureRequest) (*SetProfilePictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfilePicture not implemented")
}
func (UnimplementedCitizenStoreServiceServer) ManageCitizenAttributes(context.Context, *ManageCitizenAttributesRequest) (*ManageCitizenAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageCitizenAttributes not implemented")
}
func (UnimplementedCitizenStoreServiceServer) mustEmbedUnimplementedCitizenStoreServiceServer() {}

// UnsafeCitizenStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitizenStoreServiceServer will
// result in compilation errors.
type UnsafeCitizenStoreServiceServer interface {
	mustEmbedUnimplementedCitizenStoreServiceServer()
}

func RegisterCitizenStoreServiceServer(s grpc.ServiceRegistrar, srv CitizenStoreServiceServer) {
	s.RegisterService(&CitizenStoreService_ServiceDesc, srv)
}

func _CitizenStoreService_ListCitizens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCitizensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenStoreServiceServer).ListCitizens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenStoreService_ListCitizens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenStoreServiceServer).ListCitizens(ctx, req.(*ListCitizensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenStoreService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenStoreServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenStoreService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenStoreServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenStoreService_ListUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenStoreServiceServer).ListUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenStoreService_ListUserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenStoreServiceServer).ListUserActivity(ctx, req.(*ListUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenStoreService_SetUserProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenStoreServiceServer).SetUserProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenStoreService_SetUserProps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenStoreServiceServer).SetUserProps(ctx, req.(*SetUserPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenStoreService_SetProfilePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfilePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenStoreServiceServer).SetProfilePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenStoreService_SetProfilePicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenStoreServiceServer).SetProfilePicture(ctx, req.(*SetProfilePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenStoreService_ManageCitizenAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageCitizenAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenStoreServiceServer).ManageCitizenAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenStoreService_ManageCitizenAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenStoreServiceServer).ManageCitizenAttributes(ctx, req.(*ManageCitizenAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CitizenStoreService_ServiceDesc is the grpc.ServiceDesc for CitizenStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CitizenStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.citizenstore.CitizenStoreService",
	HandlerType: (*CitizenStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCitizens",
			Handler:    _CitizenStoreService_ListCitizens_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CitizenStoreService_GetUser_Handler,
		},
		{
			MethodName: "ListUserActivity",
			Handler:    _CitizenStoreService_ListUserActivity_Handler,
		},
		{
			MethodName: "SetUserProps",
			Handler:    _CitizenStoreService_SetUserProps_Handler,
		},
		{
			MethodName: "SetProfilePicture",
			Handler:    _CitizenStoreService_SetProfilePicture_Handler,
		},
		{
			MethodName: "ManageCitizenAttributes",
			Handler:    _CitizenStoreService_ManageCitizenAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/citizenstore/citizenstore.proto",
}
