// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/mailer/mailer.proto

package mailer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThreadsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThreadsRequestMultiError, or nil if none found.
func (m *ListThreadsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThreadsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListThreadsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThreadsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThreadsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThreadsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.After != nil {

		if all {
			switch v := interface{}(m.GetAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThreadsRequestValidationError{
						field:  "After",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThreadsRequestValidationError{
						field:  "After",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThreadsRequestValidationError{
					field:  "After",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListThreadsRequestMultiError(errors)
	}

	return nil
}

// ListThreadsRequestMultiError is an error wrapping multiple validation errors
// returned by ListThreadsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListThreadsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThreadsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThreadsRequestMultiError) AllErrors() []error { return m }

// ListThreadsRequestValidationError is the validation error returned by
// ListThreadsRequest.Validate if the designated constraints aren't met.
type ListThreadsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThreadsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThreadsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThreadsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThreadsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThreadsRequestValidationError) ErrorName() string {
	return "ListThreadsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThreadsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThreadsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThreadsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThreadsRequestValidationError{}

// Validate checks the field values on ListThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThreadsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThreadsResponseMultiError, or nil if none found.
func (m *ListThreadsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThreadsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListThreadsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThreadsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThreadsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThreadsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetThreads() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThreadsResponseValidationError{
						field:  fmt.Sprintf("Threads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThreadsResponseValidationError{
						field:  fmt.Sprintf("Threads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThreadsResponseValidationError{
					field:  fmt.Sprintf("Threads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListThreadsResponseMultiError(errors)
	}

	return nil
}

// ListThreadsResponseMultiError is an error wrapping multiple validation
// errors returned by ListThreadsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListThreadsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThreadsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThreadsResponseMultiError) AllErrors() []error { return m }

// ListThreadsResponseValidationError is the validation error returned by
// ListThreadsResponse.Validate if the designated constraints aren't met.
type ListThreadsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThreadsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThreadsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThreadsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThreadsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThreadsResponseValidationError) ErrorName() string {
	return "ListThreadsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThreadsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThreadsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThreadsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThreadsResponseValidationError{}

// Validate checks the field values on GetThreadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadRequestMultiError, or nil if none found.
func (m *GetThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return GetThreadRequestMultiError(errors)
	}

	return nil
}

// GetThreadRequestMultiError is an error wrapping multiple validation errors
// returned by GetThreadRequest.ValidateAll() if the designated constraints
// aren't met.
type GetThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadRequestMultiError) AllErrors() []error { return m }

// GetThreadRequestValidationError is the validation error returned by
// GetThreadRequest.Validate if the designated constraints aren't met.
type GetThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadRequestValidationError) ErrorName() string { return "GetThreadRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadRequestValidationError{}

// Validate checks the field values on GetThreadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadResponseMultiError, or nil if none found.
func (m *GetThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThreadResponseValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetThreadResponseMultiError(errors)
	}

	return nil
}

// GetThreadResponseMultiError is an error wrapping multiple validation errors
// returned by GetThreadResponse.ValidateAll() if the designated constraints
// aren't met.
type GetThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadResponseMultiError) AllErrors() []error { return m }

// GetThreadResponseValidationError is the validation error returned by
// GetThreadResponse.Validate if the designated constraints aren't met.
type GetThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadResponseValidationError) ErrorName() string {
	return "GetThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadResponseValidationError{}

// Validate checks the field values on CreateOrUpdateThreadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateThreadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateThreadRequestMultiError, or nil if none found.
func (m *CreateOrUpdateThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetThread() == nil {
		err := CreateOrUpdateThreadRequestValidationError{
			field:  "Thread",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateThreadRequestValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateThreadRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateThreadRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateThreadRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateThreadRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateThreadRequestValidationError is the validation error returned
// by CreateOrUpdateThreadRequest.Validate if the designated constraints
// aren't met.
type CreateOrUpdateThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateThreadRequestValidationError) ErrorName() string {
	return "CreateOrUpdateThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateThreadRequestValidationError{}

// Validate checks the field values on CreateOrUpdateThreadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateThreadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateThreadResponseMultiError, or nil if none found.
func (m *CreateOrUpdateThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateThreadResponseValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateThreadResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateThreadResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateThreadResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateThreadResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateThreadResponseValidationError is the validation error returned
// by CreateOrUpdateThreadResponse.Validate if the designated constraints
// aren't met.
type CreateOrUpdateThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateThreadResponseValidationError) ErrorName() string {
	return "CreateOrUpdateThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateThreadResponseValidationError{}

// Validate checks the field values on DeleteThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThreadRequestMultiError, or nil if none found.
func (m *DeleteThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return DeleteThreadRequestMultiError(errors)
	}

	return nil
}

// DeleteThreadRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThreadRequestMultiError) AllErrors() []error { return m }

// DeleteThreadRequestValidationError is the validation error returned by
// DeleteThreadRequest.Validate if the designated constraints aren't met.
type DeleteThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThreadRequestValidationError) ErrorName() string {
	return "DeleteThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThreadRequestValidationError{}

// Validate checks the field values on DeleteThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThreadResponseMultiError, or nil if none found.
func (m *DeleteThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteThreadResponseMultiError(errors)
	}

	return nil
}

// DeleteThreadResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteThreadResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThreadResponseMultiError) AllErrors() []error { return m }

// DeleteThreadResponseValidationError is the validation error returned by
// DeleteThreadResponse.Validate if the designated constraints aren't met.
type DeleteThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThreadResponseValidationError) ErrorName() string {
	return "DeleteThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThreadResponseValidationError{}

// Validate checks the field values on SetThreadUserStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetThreadUserStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThreadUserStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetThreadUserStateRequestMultiError, or nil if none found.
func (m *SetThreadUserStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThreadUserStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetState() == nil {
		err := SetThreadUserStateRequestValidationError{
			field:  "State",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetThreadUserStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetThreadUserStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetThreadUserStateRequestValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetThreadUserStateRequestMultiError(errors)
	}

	return nil
}

// SetThreadUserStateRequestMultiError is an error wrapping multiple validation
// errors returned by SetThreadUserStateRequest.ValidateAll() if the
// designated constraints aren't met.
type SetThreadUserStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThreadUserStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThreadUserStateRequestMultiError) AllErrors() []error { return m }

// SetThreadUserStateRequestValidationError is the validation error returned by
// SetThreadUserStateRequest.Validate if the designated constraints aren't met.
type SetThreadUserStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThreadUserStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThreadUserStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThreadUserStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetThreadUserStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThreadUserStateRequestValidationError) ErrorName() string {
	return "SetThreadUserStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetThreadUserStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThreadUserStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThreadUserStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetThreadUserStateRequestValidationError{}

// Validate checks the field values on SetThreadUserStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetThreadUserStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThreadUserStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetThreadUserStateResponseMultiError, or nil if none found.
func (m *SetThreadUserStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThreadUserStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetThreadUserStateResponseMultiError(errors)
	}

	return nil
}

// SetThreadUserStateResponseMultiError is an error wrapping multiple
// validation errors returned by SetThreadUserStateResponse.ValidateAll() if
// the designated constraints aren't met.
type SetThreadUserStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThreadUserStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThreadUserStateResponseMultiError) AllErrors() []error { return m }

// SetThreadUserStateResponseValidationError is the validation error returned
// by SetThreadUserStateResponse.Validate if the designated constraints aren't met.
type SetThreadUserStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThreadUserStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThreadUserStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThreadUserStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetThreadUserStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThreadUserStateResponseValidationError) ErrorName() string {
	return "SetThreadUserStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetThreadUserStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThreadUserStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThreadUserStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetThreadUserStateResponseValidationError{}

// Validate checks the field values on LeaveThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveThreadRequestMultiError, or nil if none found.
func (m *LeaveThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return LeaveThreadRequestMultiError(errors)
	}

	return nil
}

// LeaveThreadRequestMultiError is an error wrapping multiple validation errors
// returned by LeaveThreadRequest.ValidateAll() if the designated constraints
// aren't met.
type LeaveThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveThreadRequestMultiError) AllErrors() []error { return m }

// LeaveThreadRequestValidationError is the validation error returned by
// LeaveThreadRequest.Validate if the designated constraints aren't met.
type LeaveThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveThreadRequestValidationError) ErrorName() string {
	return "LeaveThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveThreadRequestValidationError{}

// Validate checks the field values on LeaveThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveThreadResponseMultiError, or nil if none found.
func (m *LeaveThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveThreadResponseMultiError(errors)
	}

	return nil
}

// LeaveThreadResponseMultiError is an error wrapping multiple validation
// errors returned by LeaveThreadResponse.ValidateAll() if the designated
// constraints aren't met.
type LeaveThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveThreadResponseMultiError) AllErrors() []error { return m }

// LeaveThreadResponseValidationError is the validation error returned by
// LeaveThreadResponse.Validate if the designated constraints aren't met.
type LeaveThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveThreadResponseValidationError) ErrorName() string {
	return "LeaveThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveThreadResponseValidationError{}

// Validate checks the field values on GetThreadMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThreadMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadMessagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadMessagesRequestMultiError, or nil if none found.
func (m *GetThreadMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if all {
		switch v := interface{}(m.GetAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThreadMessagesRequestValidationError{
					field:  "After",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThreadMessagesRequestValidationError{
					field:  "After",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThreadMessagesRequestValidationError{
				field:  "After",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetThreadMessagesRequestMultiError(errors)
	}

	return nil
}

// GetThreadMessagesRequestMultiError is an error wrapping multiple validation
// errors returned by GetThreadMessagesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetThreadMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadMessagesRequestMultiError) AllErrors() []error { return m }

// GetThreadMessagesRequestValidationError is the validation error returned by
// GetThreadMessagesRequest.Validate if the designated constraints aren't met.
type GetThreadMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadMessagesRequestValidationError) ErrorName() string {
	return "GetThreadMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadMessagesRequestValidationError{}

// Validate checks the field values on GetThreadMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThreadMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadMessagesResponseMultiError, or nil if none found.
func (m *GetThreadMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetThreadMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetThreadMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetThreadMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetThreadMessagesResponseMultiError(errors)
	}

	return nil
}

// GetThreadMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by GetThreadMessagesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetThreadMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadMessagesResponseMultiError) AllErrors() []error { return m }

// GetThreadMessagesResponseValidationError is the validation error returned by
// GetThreadMessagesResponse.Validate if the designated constraints aren't met.
type GetThreadMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadMessagesResponseValidationError) ErrorName() string {
	return "GetThreadMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadMessagesResponseValidationError{}

// Validate checks the field values on PostMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostMessageRequestMultiError, or nil if none found.
func (m *PostMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMessage() == nil {
		err := PostMessageRequestValidationError{
			field:  "Message",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostMessageRequestMultiError(errors)
	}

	return nil
}

// PostMessageRequestMultiError is an error wrapping multiple validation errors
// returned by PostMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type PostMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMessageRequestMultiError) AllErrors() []error { return m }

// PostMessageRequestValidationError is the validation error returned by
// PostMessageRequest.Validate if the designated constraints aren't met.
type PostMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostMessageRequestValidationError) ErrorName() string {
	return "PostMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostMessageRequestValidationError{}

// Validate checks the field values on PostMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostMessageResponseMultiError, or nil if none found.
func (m *PostMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostMessageResponseMultiError(errors)
	}

	return nil
}

// PostMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PostMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PostMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMessageResponseMultiError) AllErrors() []error { return m }

// PostMessageResponseValidationError is the validation error returned by
// PostMessageResponse.Validate if the designated constraints aren't met.
type PostMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostMessageResponseValidationError) ErrorName() string {
	return "PostMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostMessageResponseValidationError{}

// Validate checks the field values on DeleteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMessageRequestMultiError, or nil if none found.
func (m *DeleteMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	// no validation rules for MessageId

	if len(errors) > 0 {
		return DeleteMessageRequestMultiError(errors)
	}

	return nil
}

// DeleteMessageRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMessageRequestMultiError) AllErrors() []error { return m }

// DeleteMessageRequestValidationError is the validation error returned by
// DeleteMessageRequest.Validate if the designated constraints aren't met.
type DeleteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageRequestValidationError) ErrorName() string {
	return "DeleteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageRequestValidationError{}

// Validate checks the field values on DeleteMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMessageResponseMultiError, or nil if none found.
func (m *DeleteMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMessageResponseMultiError(errors)
	}

	return nil
}

// DeleteMessageResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMessageResponseMultiError) AllErrors() []error { return m }

// DeleteMessageResponseValidationError is the validation error returned by
// DeleteMessageResponse.Validate if the designated constraints aren't met.
type DeleteMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageResponseValidationError) ErrorName() string {
	return "DeleteMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageResponseValidationError{}
