// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/mailer/mailer.proto

package mailer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListEmailsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEmailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmailsRequestMultiError, or nil if none found.
func (m *ListEmailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListEmailsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEmailsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEmailsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmailsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.All != nil {
		// no validation rules for All
	}

	if len(errors) > 0 {
		return ListEmailsRequestMultiError(errors)
	}

	return nil
}

// ListEmailsRequestMultiError is an error wrapping multiple validation errors
// returned by ListEmailsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEmailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmailsRequestMultiError) AllErrors() []error { return m }

// ListEmailsRequestValidationError is the validation error returned by
// ListEmailsRequest.Validate if the designated constraints aren't met.
type ListEmailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmailsRequestValidationError) ErrorName() string {
	return "ListEmailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmailsRequestValidationError{}

// Validate checks the field values on ListEmailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmailsResponseMultiError, or nil if none found.
func (m *ListEmailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListEmailsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEmailsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEmailsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmailsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEmails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEmailsResponseValidationError{
						field:  fmt.Sprintf("Emails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEmailsResponseValidationError{
						field:  fmt.Sprintf("Emails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEmailsResponseValidationError{
					field:  fmt.Sprintf("Emails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEmailsResponseMultiError(errors)
	}

	return nil
}

// ListEmailsResponseMultiError is an error wrapping multiple validation errors
// returned by ListEmailsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListEmailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmailsResponseMultiError) AllErrors() []error { return m }

// ListEmailsResponseValidationError is the validation error returned by
// ListEmailsResponse.Validate if the designated constraints aren't met.
type ListEmailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmailsResponseValidationError) ErrorName() string {
	return "ListEmailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmailsResponseValidationError{}

// Validate checks the field values on GetEmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailRequestMultiError, or nil if none found.
func (m *GetEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetEmailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEmailRequestMultiError(errors)
	}

	return nil
}

// GetEmailRequestMultiError is an error wrapping multiple validation errors
// returned by GetEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailRequestMultiError) AllErrors() []error { return m }

// GetEmailRequestValidationError is the validation error returned by
// GetEmailRequest.Validate if the designated constraints aren't met.
type GetEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailRequestValidationError) ErrorName() string { return "GetEmailRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailRequestValidationError{}

// Validate checks the field values on GetEmailResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailResponseMultiError, or nil if none found.
func (m *GetEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmail() == nil {
		err := GetEmailResponseValidationError{
			field:  "Email",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEmailResponseValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEmailResponseValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEmailResponseValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEmailResponseMultiError(errors)
	}

	return nil
}

// GetEmailResponseMultiError is an error wrapping multiple validation errors
// returned by GetEmailResponse.ValidateAll() if the designated constraints
// aren't met.
type GetEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailResponseMultiError) AllErrors() []error { return m }

// GetEmailResponseValidationError is the validation error returned by
// GetEmailResponse.Validate if the designated constraints aren't met.
type GetEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailResponseValidationError) ErrorName() string { return "GetEmailResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailResponseValidationError{}

// Validate checks the field values on CreateOrUpdateEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateEmailRequestMultiError, or nil if none found.
func (m *CreateOrUpdateEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmail() == nil {
		err := CreateOrUpdateEmailRequestValidationError{
			field:  "Email",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateEmailRequestValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateEmailRequestValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateEmailRequestValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateEmailRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateEmailRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateEmailRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateEmailRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateEmailRequestValidationError is the validation error returned
// by CreateOrUpdateEmailRequest.Validate if the designated constraints aren't met.
type CreateOrUpdateEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateEmailRequestValidationError) ErrorName() string {
	return "CreateOrUpdateEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateEmailRequestValidationError{}

// Validate checks the field values on CreateOrUpdateEmailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateEmailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateEmailResponseMultiError, or nil if none found.
func (m *CreateOrUpdateEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateEmailResponseValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateEmailResponseValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateEmailResponseValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateEmailResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateEmailResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateEmailResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateEmailResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateEmailResponseValidationError is the validation error returned
// by CreateOrUpdateEmailResponse.Validate if the designated constraints
// aren't met.
type CreateOrUpdateEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateEmailResponseValidationError) ErrorName() string {
	return "CreateOrUpdateEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateEmailResponseValidationError{}

// Validate checks the field values on DeleteEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEmailRequestMultiError, or nil if none found.
func (m *DeleteEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteEmailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEmailRequestMultiError(errors)
	}

	return nil
}

// DeleteEmailRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmailRequestMultiError) AllErrors() []error { return m }

// DeleteEmailRequestValidationError is the validation error returned by
// DeleteEmailRequest.Validate if the designated constraints aren't met.
type DeleteEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmailRequestValidationError) ErrorName() string {
	return "DeleteEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmailRequestValidationError{}

// Validate checks the field values on DeleteEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEmailResponseMultiError, or nil if none found.
func (m *DeleteEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEmailResponseMultiError(errors)
	}

	return nil
}

// DeleteEmailResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmailResponseMultiError) AllErrors() []error { return m }

// DeleteEmailResponseValidationError is the validation error returned by
// DeleteEmailResponse.Validate if the designated constraints aren't met.
type DeleteEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmailResponseValidationError) ErrorName() string {
	return "DeleteEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmailResponseValidationError{}

// Validate checks the field values on GetEmailProposalsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailProposalsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailProposalsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailProposalsRequestMultiError, or nil if none found.
func (m *GetEmailProposalsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailProposalsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetInput()) > 40 {
		err := GetEmailProposalsRequestValidationError{
			field:  "Input",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Job != nil {
		// no validation rules for Job
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if len(errors) > 0 {
		return GetEmailProposalsRequestMultiError(errors)
	}

	return nil
}

// GetEmailProposalsRequestMultiError is an error wrapping multiple validation
// errors returned by GetEmailProposalsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEmailProposalsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailProposalsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailProposalsRequestMultiError) AllErrors() []error { return m }

// GetEmailProposalsRequestValidationError is the validation error returned by
// GetEmailProposalsRequest.Validate if the designated constraints aren't met.
type GetEmailProposalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailProposalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailProposalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailProposalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailProposalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailProposalsRequestValidationError) ErrorName() string {
	return "GetEmailProposalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailProposalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailProposalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailProposalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailProposalsRequestValidationError{}

// Validate checks the field values on GetEmailProposalsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailProposalsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailProposalsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailProposalsResponseMultiError, or nil if none found.
func (m *GetEmailProposalsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailProposalsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetEmailProposalsResponseMultiError(errors)
	}

	return nil
}

// GetEmailProposalsResponseMultiError is an error wrapping multiple validation
// errors returned by GetEmailProposalsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetEmailProposalsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailProposalsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailProposalsResponseMultiError) AllErrors() []error { return m }

// GetEmailProposalsResponseValidationError is the validation error returned by
// GetEmailProposalsResponse.Validate if the designated constraints aren't met.
type GetEmailProposalsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailProposalsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailProposalsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailProposalsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailProposalsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailProposalsResponseValidationError) ErrorName() string {
	return "GetEmailProposalsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailProposalsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailProposalsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailProposalsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailProposalsResponseValidationError{}

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesRequestMultiError, or nil if none found.
func (m *ListTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmailId() <= 0 {
		err := ListTemplatesRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesRequestMultiError) AllErrors() []error { return m }

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesResponseMultiError, or nil if none found.
func (m *ListTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesResponseMultiError) AllErrors() []error { return m }

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmailId() <= 0 {
		err := GetTemplateRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTemplateId() <= 0 {
		err := GetTemplateRequestValidationError{
			field:  "TemplateId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

// Validate checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateResponseMultiError, or nil if none found.
func (m *GetTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTemplate() == nil {
		err := GetTemplateResponseValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTemplateResponseMultiError(errors)
	}

	return nil
}

// GetTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateResponseMultiError) AllErrors() []error { return m }

// GetTemplateResponseValidationError is the validation error returned by
// GetTemplateResponse.Validate if the designated constraints aren't met.
type GetTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateResponseValidationError) ErrorName() string {
	return "GetTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateResponseValidationError{}

// Validate checks the field values on CreateOrUpdateTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateTemplateRequestMultiError, or nil if none found.
func (m *CreateOrUpdateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTemplate() == nil {
		err := CreateOrUpdateTemplateRequestValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateTemplateRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateTemplateRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateTemplateRequestValidationError is the validation error
// returned by CreateOrUpdateTemplateRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateTemplateRequestValidationError) ErrorName() string {
	return "CreateOrUpdateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateTemplateRequestValidationError{}

// Validate checks the field values on CreateOrUpdateTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateTemplateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateTemplateResponseMultiError, or nil if none found.
func (m *CreateOrUpdateTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTemplate() == nil {
		err := CreateOrUpdateTemplateResponseValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateTemplateResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdateTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateTemplateResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateTemplateResponseValidationError is the validation error
// returned by CreateOrUpdateTemplateResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdateTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateTemplateResponseValidationError) ErrorName() string {
	return "CreateOrUpdateTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateTemplateResponseValidationError{}

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateRequestMultiError, or nil if none found.
func (m *DeleteTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmailId() <= 0 {
		err := DeleteTemplateRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := DeleteTemplateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateResponseMultiError, or nil if none found.
func (m *DeleteTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on ListThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThreadsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThreadsRequestMultiError, or nil if none found.
func (m *ListThreadsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThreadsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListThreadsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThreadsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThreadsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThreadsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetEmailIds()); l < 1 || l > 10 {
		err := ListThreadsRequestValidationError{
			field:  "EmailIds",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetEmailIds() {
		_, _ = idx, item

		if item <= 0 {
			err := ListThreadsRequestValidationError{
				field:  fmt.Sprintf("EmailIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Unread != nil {
		// no validation rules for Unread
	}

	if m.Archived != nil {
		// no validation rules for Archived
	}

	if len(errors) > 0 {
		return ListThreadsRequestMultiError(errors)
	}

	return nil
}

// ListThreadsRequestMultiError is an error wrapping multiple validation errors
// returned by ListThreadsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListThreadsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThreadsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThreadsRequestMultiError) AllErrors() []error { return m }

// ListThreadsRequestValidationError is the validation error returned by
// ListThreadsRequest.Validate if the designated constraints aren't met.
type ListThreadsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThreadsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThreadsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThreadsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThreadsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThreadsRequestValidationError) ErrorName() string {
	return "ListThreadsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThreadsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThreadsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThreadsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThreadsRequestValidationError{}

// Validate checks the field values on ListThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThreadsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThreadsResponseMultiError, or nil if none found.
func (m *ListThreadsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThreadsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListThreadsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThreadsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThreadsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThreadsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetThreads() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThreadsResponseValidationError{
						field:  fmt.Sprintf("Threads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThreadsResponseValidationError{
						field:  fmt.Sprintf("Threads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThreadsResponseValidationError{
					field:  fmt.Sprintf("Threads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListThreadsResponseMultiError(errors)
	}

	return nil
}

// ListThreadsResponseMultiError is an error wrapping multiple validation
// errors returned by ListThreadsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListThreadsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThreadsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThreadsResponseMultiError) AllErrors() []error { return m }

// ListThreadsResponseValidationError is the validation error returned by
// ListThreadsResponse.Validate if the designated constraints aren't met.
type ListThreadsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThreadsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThreadsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThreadsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThreadsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThreadsResponseValidationError) ErrorName() string {
	return "ListThreadsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThreadsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThreadsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThreadsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThreadsResponseValidationError{}

// Validate checks the field values on GetThreadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadRequestMultiError, or nil if none found.
func (m *GetThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmailId() <= 0 {
		err := GetThreadRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetThreadId() <= 0 {
		err := GetThreadRequestValidationError{
			field:  "ThreadId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetThreadRequestMultiError(errors)
	}

	return nil
}

// GetThreadRequestMultiError is an error wrapping multiple validation errors
// returned by GetThreadRequest.ValidateAll() if the designated constraints
// aren't met.
type GetThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadRequestMultiError) AllErrors() []error { return m }

// GetThreadRequestValidationError is the validation error returned by
// GetThreadRequest.Validate if the designated constraints aren't met.
type GetThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadRequestValidationError) ErrorName() string { return "GetThreadRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadRequestValidationError{}

// Validate checks the field values on GetThreadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadResponseMultiError, or nil if none found.
func (m *GetThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThreadResponseValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetThreadResponseMultiError(errors)
	}

	return nil
}

// GetThreadResponseMultiError is an error wrapping multiple validation errors
// returned by GetThreadResponse.ValidateAll() if the designated constraints
// aren't met.
type GetThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadResponseMultiError) AllErrors() []error { return m }

// GetThreadResponseValidationError is the validation error returned by
// GetThreadResponse.Validate if the designated constraints aren't met.
type GetThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadResponseValidationError) ErrorName() string {
	return "GetThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadResponseValidationError{}

// Validate checks the field values on CreateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThreadRequestMultiError, or nil if none found.
func (m *CreateThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetThread() == nil {
		err := CreateThreadRequestValidationError{
			field:  "Thread",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateThreadRequestValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMessage() == nil {
		err := CreateThreadRequestValidationError{
			field:  "Message",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateThreadRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetRecipients()); l < 1 || l > 15 {
		err := CreateThreadRequestValidationError{
			field:  "Recipients",
			reason: "value must contain between 1 and 15 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRecipients() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 6 || l > 80 {
			err := CreateThreadRequestValidationError{
				field:  fmt.Sprintf("Recipients[%v]", idx),
				reason: "value length must be between 6 and 80 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateThreadRequestMultiError(errors)
	}

	return nil
}

// CreateThreadRequestMultiError is an error wrapping multiple validation
// errors returned by CreateThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThreadRequestMultiError) AllErrors() []error { return m }

// CreateThreadRequestValidationError is the validation error returned by
// CreateThreadRequest.Validate if the designated constraints aren't met.
type CreateThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThreadRequestValidationError) ErrorName() string {
	return "CreateThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThreadRequestValidationError{}

// Validate checks the field values on CreateThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThreadResponseMultiError, or nil if none found.
func (m *CreateThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateThreadResponseValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateThreadResponseMultiError(errors)
	}

	return nil
}

// CreateThreadResponseMultiError is an error wrapping multiple validation
// errors returned by CreateThreadResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThreadResponseMultiError) AllErrors() []error { return m }

// CreateThreadResponseValidationError is the validation error returned by
// CreateThreadResponse.Validate if the designated constraints aren't met.
type CreateThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThreadResponseValidationError) ErrorName() string {
	return "CreateThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThreadResponseValidationError{}

// Validate checks the field values on DeleteThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThreadRequestMultiError, or nil if none found.
func (m *DeleteThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmailId() <= 0 {
		err := DeleteThreadRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetThreadId() <= 0 {
		err := DeleteThreadRequestValidationError{
			field:  "ThreadId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteThreadRequestMultiError(errors)
	}

	return nil
}

// DeleteThreadRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThreadRequestMultiError) AllErrors() []error { return m }

// DeleteThreadRequestValidationError is the validation error returned by
// DeleteThreadRequest.Validate if the designated constraints aren't met.
type DeleteThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThreadRequestValidationError) ErrorName() string {
	return "DeleteThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThreadRequestValidationError{}

// Validate checks the field values on DeleteThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThreadResponseMultiError, or nil if none found.
func (m *DeleteThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteThreadResponseMultiError(errors)
	}

	return nil
}

// DeleteThreadResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteThreadResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThreadResponseMultiError) AllErrors() []error { return m }

// DeleteThreadResponseValidationError is the validation error returned by
// DeleteThreadResponse.Validate if the designated constraints aren't met.
type DeleteThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThreadResponseValidationError) ErrorName() string {
	return "DeleteThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThreadResponseValidationError{}

// Validate checks the field values on GetThreadStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThreadStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadStateRequestMultiError, or nil if none found.
func (m *GetThreadStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmailId() <= 0 {
		err := GetThreadStateRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetThreadId() <= 0 {
		err := GetThreadStateRequestValidationError{
			field:  "ThreadId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetThreadStateRequestMultiError(errors)
	}

	return nil
}

// GetThreadStateRequestMultiError is an error wrapping multiple validation
// errors returned by GetThreadStateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetThreadStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadStateRequestMultiError) AllErrors() []error { return m }

// GetThreadStateRequestValidationError is the validation error returned by
// GetThreadStateRequest.Validate if the designated constraints aren't met.
type GetThreadStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadStateRequestValidationError) ErrorName() string {
	return "GetThreadStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadStateRequestValidationError{}

// Validate checks the field values on GetThreadStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThreadStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadStateResponseMultiError, or nil if none found.
func (m *GetThreadStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThreadStateResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThreadStateResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThreadStateResponseValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetThreadStateResponseMultiError(errors)
	}

	return nil
}

// GetThreadStateResponseMultiError is an error wrapping multiple validation
// errors returned by GetThreadStateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetThreadStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadStateResponseMultiError) AllErrors() []error { return m }

// GetThreadStateResponseValidationError is the validation error returned by
// GetThreadStateResponse.Validate if the designated constraints aren't met.
type GetThreadStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadStateResponseValidationError) ErrorName() string {
	return "GetThreadStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadStateResponseValidationError{}

// Validate checks the field values on SetThreadStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetThreadStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThreadStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetThreadStateRequestMultiError, or nil if none found.
func (m *SetThreadStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThreadStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetState() == nil {
		err := SetThreadStateRequestValidationError{
			field:  "State",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetThreadStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetThreadStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetThreadStateRequestValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetThreadStateRequestMultiError(errors)
	}

	return nil
}

// SetThreadStateRequestMultiError is an error wrapping multiple validation
// errors returned by SetThreadStateRequest.ValidateAll() if the designated
// constraints aren't met.
type SetThreadStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThreadStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThreadStateRequestMultiError) AllErrors() []error { return m }

// SetThreadStateRequestValidationError is the validation error returned by
// SetThreadStateRequest.Validate if the designated constraints aren't met.
type SetThreadStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThreadStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThreadStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThreadStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetThreadStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThreadStateRequestValidationError) ErrorName() string {
	return "SetThreadStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetThreadStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThreadStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThreadStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetThreadStateRequestValidationError{}

// Validate checks the field values on SetThreadStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetThreadStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThreadStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetThreadStateResponseMultiError, or nil if none found.
func (m *SetThreadStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThreadStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetThreadStateResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetThreadStateResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetThreadStateResponseValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetThreadStateResponseMultiError(errors)
	}

	return nil
}

// SetThreadStateResponseMultiError is an error wrapping multiple validation
// errors returned by SetThreadStateResponse.ValidateAll() if the designated
// constraints aren't met.
type SetThreadStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThreadStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThreadStateResponseMultiError) AllErrors() []error { return m }

// SetThreadStateResponseValidationError is the validation error returned by
// SetThreadStateResponse.Validate if the designated constraints aren't met.
type SetThreadStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThreadStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThreadStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThreadStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetThreadStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThreadStateResponseValidationError) ErrorName() string {
	return "SetThreadStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetThreadStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThreadStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThreadStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetThreadStateResponseValidationError{}

// Validate checks the field values on GetEmailSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailSettingsRequestMultiError, or nil if none found.
func (m *GetEmailSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmailId() <= 0 {
		err := GetEmailSettingsRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEmailSettingsRequestMultiError(errors)
	}

	return nil
}

// GetEmailSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetEmailSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEmailSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailSettingsRequestMultiError) AllErrors() []error { return m }

// GetEmailSettingsRequestValidationError is the validation error returned by
// GetEmailSettingsRequest.Validate if the designated constraints aren't met.
type GetEmailSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailSettingsRequestValidationError) ErrorName() string {
	return "GetEmailSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailSettingsRequestValidationError{}

// Validate checks the field values on GetEmailSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailSettingsResponseMultiError, or nil if none found.
func (m *GetEmailSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEmailSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEmailSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEmailSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEmailSettingsResponseMultiError(errors)
	}

	return nil
}

// GetEmailSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetEmailSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEmailSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailSettingsResponseMultiError) AllErrors() []error { return m }

// GetEmailSettingsResponseValidationError is the validation error returned by
// GetEmailSettingsResponse.Validate if the designated constraints aren't met.
type GetEmailSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailSettingsResponseValidationError) ErrorName() string {
	return "GetEmailSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailSettingsResponseValidationError{}

// Validate checks the field values on SetEmailSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetEmailSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEmailSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEmailSettingsRequestMultiError, or nil if none found.
func (m *SetEmailSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEmailSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSettings() == nil {
		err := SetEmailSettingsRequestValidationError{
			field:  "Settings",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetEmailSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetEmailSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEmailSettingsRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetEmailSettingsRequestMultiError(errors)
	}

	return nil
}

// SetEmailSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by SetEmailSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetEmailSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEmailSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEmailSettingsRequestMultiError) AllErrors() []error { return m }

// SetEmailSettingsRequestValidationError is the validation error returned by
// SetEmailSettingsRequest.Validate if the designated constraints aren't met.
type SetEmailSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEmailSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEmailSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEmailSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEmailSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEmailSettingsRequestValidationError) ErrorName() string {
	return "SetEmailSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetEmailSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEmailSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEmailSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEmailSettingsRequestValidationError{}

// Validate checks the field values on SetEmailSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetEmailSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEmailSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEmailSettingsResponseMultiError, or nil if none found.
func (m *SetEmailSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEmailSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetEmailSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetEmailSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEmailSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetEmailSettingsResponseMultiError(errors)
	}

	return nil
}

// SetEmailSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by SetEmailSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetEmailSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEmailSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEmailSettingsResponseMultiError) AllErrors() []error { return m }

// SetEmailSettingsResponseValidationError is the validation error returned by
// SetEmailSettingsResponse.Validate if the designated constraints aren't met.
type SetEmailSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEmailSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEmailSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEmailSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEmailSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEmailSettingsResponseValidationError) ErrorName() string {
	return "SetEmailSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetEmailSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEmailSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEmailSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEmailSettingsResponseValidationError{}

// Validate checks the field values on SearchThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchThreadsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchThreadsRequestMultiError, or nil if none found.
func (m *SearchThreadsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchThreadsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := SearchThreadsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchThreadsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchThreadsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchThreadsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSearch()) > 64 {
		err := SearchThreadsRequestValidationError{
			field:  "Search",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchThreadsRequestMultiError(errors)
	}

	return nil
}

// SearchThreadsRequestMultiError is an error wrapping multiple validation
// errors returned by SearchThreadsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchThreadsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchThreadsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchThreadsRequestMultiError) AllErrors() []error { return m }

// SearchThreadsRequestValidationError is the validation error returned by
// SearchThreadsRequest.Validate if the designated constraints aren't met.
type SearchThreadsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchThreadsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchThreadsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchThreadsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchThreadsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchThreadsRequestValidationError) ErrorName() string {
	return "SearchThreadsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchThreadsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchThreadsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchThreadsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchThreadsRequestValidationError{}

// Validate checks the field values on SearchThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchThreadsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchThreadsResponseMultiError, or nil if none found.
func (m *SearchThreadsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchThreadsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := SearchThreadsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchThreadsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchThreadsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchThreadsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchThreadsResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchThreadsResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchThreadsResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchThreadsResponseMultiError(errors)
	}

	return nil
}

// SearchThreadsResponseMultiError is an error wrapping multiple validation
// errors returned by SearchThreadsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchThreadsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchThreadsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchThreadsResponseMultiError) AllErrors() []error { return m }

// SearchThreadsResponseValidationError is the validation error returned by
// SearchThreadsResponse.Validate if the designated constraints aren't met.
type SearchThreadsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchThreadsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchThreadsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchThreadsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchThreadsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchThreadsResponseValidationError) ErrorName() string {
	return "SearchThreadsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchThreadsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchThreadsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchThreadsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchThreadsResponseValidationError{}

// Validate checks the field values on ListThreadMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThreadMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThreadMessagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThreadMessagesRequestMultiError, or nil if none found.
func (m *ListThreadMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThreadMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListThreadMessagesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThreadMessagesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThreadMessagesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThreadMessagesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEmailId() <= 0 {
		err := ListThreadMessagesRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetThreadId() <= 0 {
		err := ListThreadMessagesRequestValidationError{
			field:  "ThreadId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.After != nil {

		if all {
			switch v := interface{}(m.GetAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThreadMessagesRequestValidationError{
						field:  "After",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThreadMessagesRequestValidationError{
						field:  "After",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThreadMessagesRequestValidationError{
					field:  "After",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListThreadMessagesRequestMultiError(errors)
	}

	return nil
}

// ListThreadMessagesRequestMultiError is an error wrapping multiple validation
// errors returned by ListThreadMessagesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListThreadMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThreadMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThreadMessagesRequestMultiError) AllErrors() []error { return m }

// ListThreadMessagesRequestValidationError is the validation error returned by
// ListThreadMessagesRequest.Validate if the designated constraints aren't met.
type ListThreadMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThreadMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThreadMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThreadMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThreadMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThreadMessagesRequestValidationError) ErrorName() string {
	return "ListThreadMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThreadMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThreadMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThreadMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThreadMessagesRequestValidationError{}

// Validate checks the field values on ListThreadMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThreadMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThreadMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThreadMessagesResponseMultiError, or nil if none found.
func (m *ListThreadMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThreadMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListThreadMessagesResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThreadMessagesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThreadMessagesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThreadMessagesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThreadMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThreadMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThreadMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListThreadMessagesResponseMultiError(errors)
	}

	return nil
}

// ListThreadMessagesResponseMultiError is an error wrapping multiple
// validation errors returned by ListThreadMessagesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListThreadMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThreadMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThreadMessagesResponseMultiError) AllErrors() []error { return m }

// ListThreadMessagesResponseValidationError is the validation error returned
// by ListThreadMessagesResponse.Validate if the designated constraints aren't met.
type ListThreadMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThreadMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThreadMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThreadMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThreadMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThreadMessagesResponseValidationError) ErrorName() string {
	return "ListThreadMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThreadMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThreadMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThreadMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThreadMessagesResponseValidationError{}

// Validate checks the field values on PostMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostMessageRequestMultiError, or nil if none found.
func (m *PostMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMessage() == nil {
		err := PostMessageRequestValidationError{
			field:  "Message",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRecipients()) > 10 {
		err := PostMessageRequestValidationError{
			field:  "Recipients",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRecipients() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 6 || l > 80 {
			err := PostMessageRequestValidationError{
				field:  fmt.Sprintf("Recipients[%v]", idx),
				reason: "value length must be between 6 and 80 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PostMessageRequestMultiError(errors)
	}

	return nil
}

// PostMessageRequestMultiError is an error wrapping multiple validation errors
// returned by PostMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type PostMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMessageRequestMultiError) AllErrors() []error { return m }

// PostMessageRequestValidationError is the validation error returned by
// PostMessageRequest.Validate if the designated constraints aren't met.
type PostMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostMessageRequestValidationError) ErrorName() string {
	return "PostMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostMessageRequestValidationError{}

// Validate checks the field values on PostMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostMessageResponseMultiError, or nil if none found.
func (m *PostMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostMessageResponseMultiError(errors)
	}

	return nil
}

// PostMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PostMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PostMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMessageResponseMultiError) AllErrors() []error { return m }

// PostMessageResponseValidationError is the validation error returned by
// PostMessageResponse.Validate if the designated constraints aren't met.
type PostMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostMessageResponseValidationError) ErrorName() string {
	return "PostMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostMessageResponseValidationError{}

// Validate checks the field values on DeleteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMessageRequestMultiError, or nil if none found.
func (m *DeleteMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEmailId() <= 0 {
		err := DeleteMessageRequestValidationError{
			field:  "EmailId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetThreadId() <= 0 {
		err := DeleteMessageRequestValidationError{
			field:  "ThreadId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMessageId() <= 0 {
		err := DeleteMessageRequestValidationError{
			field:  "MessageId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMessageRequestMultiError(errors)
	}

	return nil
}

// DeleteMessageRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMessageRequestMultiError) AllErrors() []error { return m }

// DeleteMessageRequestValidationError is the validation error returned by
// DeleteMessageRequest.Validate if the designated constraints aren't met.
type DeleteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageRequestValidationError) ErrorName() string {
	return "DeleteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageRequestValidationError{}

// Validate checks the field values on DeleteMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMessageResponseMultiError, or nil if none found.
func (m *DeleteMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMessageResponseMultiError(errors)
	}

	return nil
}

// DeleteMessageResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMessageResponseMultiError) AllErrors() []error { return m }

// DeleteMessageResponseValidationError is the validation error returned by
// DeleteMessageResponse.Validate if the designated constraints aren't met.
type DeleteMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageResponseValidationError) ErrorName() string {
	return "DeleteMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageResponseValidationError{}
