// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/calendar/calendar.proto

package calendar

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListCalendarEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarEntriesRequestMultiError, or nil if none found.
func (m *ListCalendarEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetYear() < 2023 {
		err := ListCalendarEntriesRequestValidationError{
			field:  "Year",
			reason: "value must be greater than or equal to 2023",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetMonth(); val < 1 || val > 12 {
		err := ListCalendarEntriesRequestValidationError{
			field:  "Month",
			reason: "value must be inside range [1, 12]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCalendarEntriesRequestMultiError(errors)
	}

	return nil
}

// ListCalendarEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by ListCalendarEntriesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCalendarEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarEntriesRequestMultiError) AllErrors() []error { return m }

// ListCalendarEntriesRequestValidationError is the validation error returned
// by ListCalendarEntriesRequest.Validate if the designated constraints aren't met.
type ListCalendarEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarEntriesRequestValidationError) ErrorName() string {
	return "ListCalendarEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarEntriesRequestValidationError{}

// Validate checks the field values on ListCalendarEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarEntriesResponseMultiError, or nil if none found.
func (m *ListCalendarEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCalendarEntriesResponseMultiError(errors)
	}

	return nil
}

// ListCalendarEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListCalendarEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCalendarEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarEntriesResponseMultiError) AllErrors() []error { return m }

// ListCalendarEntriesResponseValidationError is the validation error returned
// by ListCalendarEntriesResponse.Validate if the designated constraints
// aren't met.
type ListCalendarEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarEntriesResponseValidationError) ErrorName() string {
	return "ListCalendarEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarEntriesResponseValidationError{}

// Validate checks the field values on ListCalendarsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarsRequestMultiError, or nil if none found.
func (m *ListCalendarsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListCalendarsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCalendarsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCalendarsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCalendarsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCalendarsRequestMultiError(errors)
	}

	return nil
}

// ListCalendarsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCalendarsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCalendarsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarsRequestMultiError) AllErrors() []error { return m }

// ListCalendarsRequestValidationError is the validation error returned by
// ListCalendarsRequest.Validate if the designated constraints aren't met.
type ListCalendarsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarsRequestValidationError) ErrorName() string {
	return "ListCalendarsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarsRequestValidationError{}

// Validate checks the field values on ListCalendarsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarsResponseMultiError, or nil if none found.
func (m *ListCalendarsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListCalendarsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCalendarsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCalendarsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCalendarsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCalendars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarsResponseValidationError{
						field:  fmt.Sprintf("Calendars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarsResponseValidationError{
						field:  fmt.Sprintf("Calendars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarsResponseValidationError{
					field:  fmt.Sprintf("Calendars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCalendarsResponseMultiError(errors)
	}

	return nil
}

// ListCalendarsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCalendarsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCalendarsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarsResponseMultiError) AllErrors() []error { return m }

// ListCalendarsResponseValidationError is the validation error returned by
// ListCalendarsResponse.Validate if the designated constraints aren't met.
type ListCalendarsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarsResponseValidationError) ErrorName() string {
	return "ListCalendarsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarsResponseValidationError{}

// Validate checks the field values on CreateOrUpdateCalendarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCalendarRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCalendarRequestMultiError, or nil if none found.
func (m *CreateOrUpdateCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateCalendarRequestValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateCalendarRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCalendarRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateCalendarRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdateCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCalendarRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateCalendarRequestValidationError is the validation error
// returned by CreateOrUpdateCalendarRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCalendarRequestValidationError) ErrorName() string {
	return "CreateOrUpdateCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCalendarRequestValidationError{}

// Validate checks the field values on CreateOrUpdateCalendarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCalendarResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCalendarResponseMultiError, or nil if none found.
func (m *CreateOrUpdateCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarResponseValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarResponseValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateCalendarResponseValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateCalendarResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCalendarResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateCalendarResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdateCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCalendarResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateCalendarResponseValidationError is the validation error
// returned by CreateOrUpdateCalendarResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCalendarResponseValidationError) ErrorName() string {
	return "CreateOrUpdateCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCalendarResponseValidationError{}

// Validate checks the field values on DeleteCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarRequestMultiError, or nil if none found.
func (m *DeleteCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CalendarId

	if len(errors) > 0 {
		return DeleteCalendarRequestMultiError(errors)
	}

	return nil
}

// DeleteCalendarRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCalendarRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarRequestMultiError) AllErrors() []error { return m }

// DeleteCalendarRequestValidationError is the validation error returned by
// DeleteCalendarRequest.Validate if the designated constraints aren't met.
type DeleteCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarRequestValidationError) ErrorName() string {
	return "DeleteCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarRequestValidationError{}

// Validate checks the field values on DeleteCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarResponseMultiError, or nil if none found.
func (m *DeleteCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCalendarResponseMultiError(errors)
	}

	return nil
}

// DeleteCalendarResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCalendarResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarResponseMultiError) AllErrors() []error { return m }

// DeleteCalendarResponseValidationError is the validation error returned by
// DeleteCalendarResponse.Validate if the designated constraints aren't met.
type DeleteCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarResponseValidationError) ErrorName() string {
	return "DeleteCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarResponseValidationError{}

// Validate checks the field values on CreateOrUpdateCalendarEntriesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateCalendarEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCalendarEntriesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCalendarEntriesRequestMultiError, or nil if none found.
func (m *CreateOrUpdateCalendarEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCalendarEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := CreateOrUpdateCalendarEntriesRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarEntriesRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarEntriesRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateCalendarEntriesRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateCalendarEntriesRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCalendarEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateCalendarEntriesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateCalendarEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCalendarEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCalendarEntriesRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateCalendarEntriesRequestValidationError is the validation error
// returned by CreateOrUpdateCalendarEntriesRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCalendarEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCalendarEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCalendarEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCalendarEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCalendarEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCalendarEntriesRequestValidationError) ErrorName() string {
	return "CreateOrUpdateCalendarEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCalendarEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCalendarEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCalendarEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCalendarEntriesRequestValidationError{}

// Validate checks the field values on CreateOrUpdateCalendarEntriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateCalendarEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCalendarEntriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCalendarEntriesResponseMultiError, or nil if none found.
func (m *CreateOrUpdateCalendarEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCalendarEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarEntriesResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarEntriesResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateCalendarEntriesResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateCalendarEntriesResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCalendarEntriesResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateCalendarEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateCalendarEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCalendarEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCalendarEntriesResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateCalendarEntriesResponseValidationError is the validation error
// returned by CreateOrUpdateCalendarEntriesResponse.Validate if the
// designated constraints aren't met.
type CreateOrUpdateCalendarEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCalendarEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCalendarEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCalendarEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCalendarEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCalendarEntriesResponseValidationError) ErrorName() string {
	return "CreateOrUpdateCalendarEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCalendarEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCalendarEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCalendarEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCalendarEntriesResponseValidationError{}

// Validate checks the field values on DeleteCalendarEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarEntriesRequestMultiError, or nil if none found.
func (m *DeleteCalendarEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CalendarId

	// no validation rules for EntryId

	if len(errors) > 0 {
		return DeleteCalendarEntriesRequestMultiError(errors)
	}

	return nil
}

// DeleteCalendarEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCalendarEntriesRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCalendarEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarEntriesRequestMultiError) AllErrors() []error { return m }

// DeleteCalendarEntriesRequestValidationError is the validation error returned
// by DeleteCalendarEntriesRequest.Validate if the designated constraints
// aren't met.
type DeleteCalendarEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarEntriesRequestValidationError) ErrorName() string {
	return "DeleteCalendarEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarEntriesRequestValidationError{}

// Validate checks the field values on DeleteCalendarEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarEntriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCalendarEntriesResponseMultiError, or nil if none found.
func (m *DeleteCalendarEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCalendarEntriesResponseMultiError(errors)
	}

	return nil
}

// DeleteCalendarEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCalendarEntriesResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteCalendarEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarEntriesResponseMultiError) AllErrors() []error { return m }

// DeleteCalendarEntriesResponseValidationError is the validation error
// returned by DeleteCalendarEntriesResponse.Validate if the designated
// constraints aren't met.
type DeleteCalendarEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarEntriesResponseValidationError) ErrorName() string {
	return "DeleteCalendarEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarEntriesResponseValidationError{}

// Validate checks the field values on ShareCalendarEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareCalendarEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareCalendarEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareCalendarEntryRequestMultiError, or nil if none found.
func (m *ShareCalendarEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareCalendarEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShareCalendarEntryRequestMultiError(errors)
	}

	return nil
}

// ShareCalendarEntryRequestMultiError is an error wrapping multiple validation
// errors returned by ShareCalendarEntryRequest.ValidateAll() if the
// designated constraints aren't met.
type ShareCalendarEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareCalendarEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareCalendarEntryRequestMultiError) AllErrors() []error { return m }

// ShareCalendarEntryRequestValidationError is the validation error returned by
// ShareCalendarEntryRequest.Validate if the designated constraints aren't met.
type ShareCalendarEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareCalendarEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareCalendarEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareCalendarEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareCalendarEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareCalendarEntryRequestValidationError) ErrorName() string {
	return "ShareCalendarEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareCalendarEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareCalendarEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareCalendarEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareCalendarEntryRequestValidationError{}

// Validate checks the field values on ShareCalendarEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareCalendarEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareCalendarEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareCalendarEntryResponseMultiError, or nil if none found.
func (m *ShareCalendarEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareCalendarEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShareCalendarEntryResponseMultiError(errors)
	}

	return nil
}

// ShareCalendarEntryResponseMultiError is an error wrapping multiple
// validation errors returned by ShareCalendarEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type ShareCalendarEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareCalendarEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareCalendarEntryResponseMultiError) AllErrors() []error { return m }

// ShareCalendarEntryResponseValidationError is the validation error returned
// by ShareCalendarEntryResponse.Validate if the designated constraints aren't met.
type ShareCalendarEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareCalendarEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareCalendarEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareCalendarEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareCalendarEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareCalendarEntryResponseValidationError) ErrorName() string {
	return "ShareCalendarEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShareCalendarEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareCalendarEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareCalendarEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareCalendarEntryResponseValidationError{}
