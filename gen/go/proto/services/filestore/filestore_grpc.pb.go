// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: services/filestore/filestore.proto

package filestore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileStoreService_Upload_FullMethodName = "/services.filestore.FileStoreService/Upload"
)

// FileStoreServiceClient is the client API for FileStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStoreServiceClient interface {
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type fileStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStoreServiceClient(cc grpc.ClientConnInterface) FileStoreServiceClient {
	return &fileStoreServiceClient{cc}
}

func (c *fileStoreServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, FileStoreService_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStoreServiceServer is the server API for FileStoreService service.
// All implementations must embed UnimplementedFileStoreServiceServer
// for forward compatibility
type FileStoreServiceServer interface {
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	mustEmbedUnimplementedFileStoreServiceServer()
}

// UnimplementedFileStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileStoreServiceServer struct {
}

func (UnimplementedFileStoreServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileStoreServiceServer) mustEmbedUnimplementedFileStoreServiceServer() {}

// UnsafeFileStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStoreServiceServer will
// result in compilation errors.
type UnsafeFileStoreServiceServer interface {
	mustEmbedUnimplementedFileStoreServiceServer()
}

func RegisterFileStoreServiceServer(s grpc.ServiceRegistrar, srv FileStoreServiceServer) {
	s.RegisterService(&FileStoreService_ServiceDesc, srv)
}

func _FileStoreService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStoreServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStoreService_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStoreServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStoreService_ServiceDesc is the grpc.ServiceDesc for FileStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.filestore.FileStoreService",
	HandlerType: (*FileStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _FileStoreService_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/filestore/filestore.proto",
}
