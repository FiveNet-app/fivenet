// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/sync/activity.proto

package sync

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddActivity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActivity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddActivityMultiError, or
// nil if none found.
func (m *AddActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Activity.(type) {
	case *AddActivity_UserActivity:
		if v == nil {
			err := AddActivityValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserActivity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityValidationError{
						field:  "UserActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityValidationError{
						field:  "UserActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserActivity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityValidationError{
					field:  "UserActivity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivity_UserProps:
		if v == nil {
			err := AddActivityValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserProps()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityValidationError{
						field:  "UserProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityValidationError{
						field:  "UserProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserProps()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityValidationError{
					field:  "UserProps",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivity_JobsUserActivity:
		if v == nil {
			err := AddActivityValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJobsUserActivity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityValidationError{
						field:  "JobsUserActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityValidationError{
						field:  "JobsUserActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobsUserActivity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityValidationError{
					field:  "JobsUserActivity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivity_JobsTimeclock:
		if v == nil {
			err := AddActivityValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJobsTimeclock()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityValidationError{
						field:  "JobsTimeclock",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityValidationError{
						field:  "JobsTimeclock",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobsTimeclock()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityValidationError{
					field:  "JobsTimeclock",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddActivityMultiError(errors)
	}

	return nil
}

// AddActivityMultiError is an error wrapping multiple validation errors
// returned by AddActivity.ValidateAll() if the designated constraints aren't met.
type AddActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActivityMultiError) AllErrors() []error { return m }

// AddActivityValidationError is the validation error returned by
// AddActivity.Validate if the designated constraints aren't met.
type AddActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityValidationError) ErrorName() string { return "AddActivityValidationError" }

// Error satisfies the builtin error interface
func (e AddActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityValidationError{}
