// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.20.3
// source: resources/users/jobs.proto

package users

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	filestore "github.com/fivenet-app/fivenet/gen/go/proto/resources/filestore"
	timestamp "github.com/fivenet-app/fivenet/gen/go/proto/resources/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserInfoSyncUnemployedMode int32

const (
	UserInfoSyncUnemployedMode_USER_INFO_SYNC_UNEMPLOYED_MODE_UNSPECIFIED UserInfoSyncUnemployedMode = 0
	UserInfoSyncUnemployedMode_USER_INFO_SYNC_UNEMPLOYED_MODE_GIVE_ROLE   UserInfoSyncUnemployedMode = 1
	UserInfoSyncUnemployedMode_USER_INFO_SYNC_UNEMPLOYED_MODE_KICK        UserInfoSyncUnemployedMode = 2
)

// Enum value maps for UserInfoSyncUnemployedMode.
var (
	UserInfoSyncUnemployedMode_name = map[int32]string{
		0: "USER_INFO_SYNC_UNEMPLOYED_MODE_UNSPECIFIED",
		1: "USER_INFO_SYNC_UNEMPLOYED_MODE_GIVE_ROLE",
		2: "USER_INFO_SYNC_UNEMPLOYED_MODE_KICK",
	}
	UserInfoSyncUnemployedMode_value = map[string]int32{
		"USER_INFO_SYNC_UNEMPLOYED_MODE_UNSPECIFIED": 0,
		"USER_INFO_SYNC_UNEMPLOYED_MODE_GIVE_ROLE":   1,
		"USER_INFO_SYNC_UNEMPLOYED_MODE_KICK":        2,
	}
)

func (x UserInfoSyncUnemployedMode) Enum() *UserInfoSyncUnemployedMode {
	p := new(UserInfoSyncUnemployedMode)
	*p = x
	return p
}

func (x UserInfoSyncUnemployedMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInfoSyncUnemployedMode) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_users_jobs_proto_enumTypes[0].Descriptor()
}

func (UserInfoSyncUnemployedMode) Type() protoreflect.EnumType {
	return &file_resources_users_jobs_proto_enumTypes[0]
}

func (x UserInfoSyncUnemployedMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInfoSyncUnemployedMode.Descriptor instead.
func (UserInfoSyncUnemployedMode) EnumDescriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{0}
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" sql:"primary_key" alias:"name"` // @gotags: sql:"primary_key" alias:"name"
	Label  string      `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Grades []*JobGrade `protobuf:"bytes,3,rep,name=grades,proto3" json:"grades,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_resources_users_jobs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Job) GetGrades() []*JobGrade {
	if x != nil {
		return x.Grades
	}
	return nil
}

type JobGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName *string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3,oneof" json:"job_name,omitempty"`
	Grade   int32   `protobuf:"varint,2,opt,name=grade,proto3" json:"grade,omitempty"`
	Label   string  `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *JobGrade) Reset() {
	*x = JobGrade{}
	mi := &file_resources_users_jobs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGrade) ProtoMessage() {}

func (x *JobGrade) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGrade.ProtoReflect.Descriptor instead.
func (*JobGrade) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{1}
}

func (x *JobGrade) GetJobName() string {
	if x != nil && x.JobName != nil {
		return *x.JobName
	}
	return ""
}

func (x *JobGrade) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *JobGrade) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type JobProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job                 string               `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	JobLabel            *string              `protobuf:"bytes,2,opt,name=job_label,json=jobLabel,proto3,oneof" json:"job_label,omitempty"`
	Theme               string               `protobuf:"bytes,3,opt,name=theme,proto3" json:"theme,omitempty"`
	LivemapMarkerColor  string               `protobuf:"bytes,4,opt,name=livemap_marker_color,json=livemapMarkerColor,proto3" json:"livemap_marker_color,omitempty"`
	QuickButtons        *QuickButtons        `protobuf:"bytes,5,opt,name=quick_buttons,json=quickButtons,proto3" json:"quick_buttons,omitempty"`
	RadioFrequency      *string              `protobuf:"bytes,6,opt,name=radio_frequency,json=radioFrequency,proto3,oneof" json:"radio_frequency,omitempty"`
	DiscordGuildId      *string              `protobuf:"bytes,7,opt,name=discord_guild_id,json=discordGuildId,proto3,oneof" json:"discord_guild_id,omitempty"`
	DiscordLastSync     *timestamp.Timestamp `protobuf:"bytes,8,opt,name=discord_last_sync,json=discordLastSync,proto3,oneof" json:"discord_last_sync,omitempty"`
	DiscordSyncSettings *DiscordSyncSettings `protobuf:"bytes,9,opt,name=discord_sync_settings,json=discordSyncSettings,proto3" json:"discord_sync_settings,omitempty"`
	DiscordSyncChanges  *DiscordSyncChanges  `protobuf:"bytes,10,opt,name=discord_sync_changes,json=discordSyncChanges,proto3,oneof" json:"discord_sync_changes,omitempty"`
	Motd                *string              `protobuf:"bytes,11,opt,name=motd,proto3,oneof" json:"motd,omitempty"`
	LogoUrl             *filestore.File      `protobuf:"bytes,12,opt,name=logo_url,json=logoUrl,proto3,oneof" json:"logo_url,omitempty"`
	Settings            *JobSettings         `protobuf:"bytes,13,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *JobProps) Reset() {
	*x = JobProps{}
	mi := &file_resources_users_jobs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProps) ProtoMessage() {}

func (x *JobProps) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProps.ProtoReflect.Descriptor instead.
func (*JobProps) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{2}
}

func (x *JobProps) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *JobProps) GetJobLabel() string {
	if x != nil && x.JobLabel != nil {
		return *x.JobLabel
	}
	return ""
}

func (x *JobProps) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *JobProps) GetLivemapMarkerColor() string {
	if x != nil {
		return x.LivemapMarkerColor
	}
	return ""
}

func (x *JobProps) GetQuickButtons() *QuickButtons {
	if x != nil {
		return x.QuickButtons
	}
	return nil
}

func (x *JobProps) GetRadioFrequency() string {
	if x != nil && x.RadioFrequency != nil {
		return *x.RadioFrequency
	}
	return ""
}

func (x *JobProps) GetDiscordGuildId() string {
	if x != nil && x.DiscordGuildId != nil {
		return *x.DiscordGuildId
	}
	return ""
}

func (x *JobProps) GetDiscordLastSync() *timestamp.Timestamp {
	if x != nil {
		return x.DiscordLastSync
	}
	return nil
}

func (x *JobProps) GetDiscordSyncSettings() *DiscordSyncSettings {
	if x != nil {
		return x.DiscordSyncSettings
	}
	return nil
}

func (x *JobProps) GetDiscordSyncChanges() *DiscordSyncChanges {
	if x != nil {
		return x.DiscordSyncChanges
	}
	return nil
}

func (x *JobProps) GetMotd() string {
	if x != nil && x.Motd != nil {
		return *x.Motd
	}
	return ""
}

func (x *JobProps) GetLogoUrl() *filestore.File {
	if x != nil {
		return x.LogoUrl
	}
	return nil
}

func (x *JobProps) GetSettings() *JobSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type QuickButtons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PenaltyCalculator bool `protobuf:"varint,1,opt,name=penalty_calculator,json=penaltyCalculator,proto3" json:"penalty_calculator,omitempty"`
	BodyCheckup       bool `protobuf:"varint,2,opt,name=body_checkup,json=bodyCheckup,proto3" json:"body_checkup,omitempty"`
}

func (x *QuickButtons) Reset() {
	*x = QuickButtons{}
	mi := &file_resources_users_jobs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuickButtons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickButtons) ProtoMessage() {}

func (x *QuickButtons) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickButtons.ProtoReflect.Descriptor instead.
func (*QuickButtons) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{3}
}

func (x *QuickButtons) GetPenaltyCalculator() bool {
	if x != nil {
		return x.PenaltyCalculator
	}
	return false
}

func (x *QuickButtons) GetBodyCheckup() bool {
	if x != nil {
		return x.BodyCheckup
	}
	return false
}

type DiscordSyncSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DryRun                   bool                  `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	UserInfoSync             bool                  `protobuf:"varint,2,opt,name=user_info_sync,json=userInfoSync,proto3" json:"user_info_sync,omitempty"`
	UserInfoSyncSettings     *UserInfoSyncSettings `protobuf:"bytes,3,opt,name=user_info_sync_settings,json=userInfoSyncSettings,proto3" json:"user_info_sync_settings,omitempty"`
	StatusLog                bool                  `protobuf:"varint,4,opt,name=status_log,json=statusLog,proto3" json:"status_log,omitempty"`
	StatusLogSettings        *StatusLogSettings    `protobuf:"bytes,5,opt,name=status_log_settings,json=statusLogSettings,proto3" json:"status_log_settings,omitempty"`
	JobsAbsence              bool                  `protobuf:"varint,6,opt,name=jobs_absence,json=jobsAbsence,proto3" json:"jobs_absence,omitempty"`
	JobsAbsenceSettings      *JobsAbsenceSettings  `protobuf:"bytes,7,opt,name=jobs_absence_settings,json=jobsAbsenceSettings,proto3" json:"jobs_absence_settings,omitempty"`
	GroupSyncSettings        *GroupSyncSettings    `protobuf:"bytes,8,opt,name=group_sync_settings,json=groupSyncSettings,proto3" json:"group_sync_settings,omitempty"`
	QualificationsRoleFormat string                `protobuf:"bytes,9,opt,name=qualifications_role_format,json=qualificationsRoleFormat,proto3" json:"qualifications_role_format,omitempty"`
}

func (x *DiscordSyncSettings) Reset() {
	*x = DiscordSyncSettings{}
	mi := &file_resources_users_jobs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscordSyncSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordSyncSettings) ProtoMessage() {}

func (x *DiscordSyncSettings) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordSyncSettings.ProtoReflect.Descriptor instead.
func (*DiscordSyncSettings) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{4}
}

func (x *DiscordSyncSettings) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *DiscordSyncSettings) GetUserInfoSync() bool {
	if x != nil {
		return x.UserInfoSync
	}
	return false
}

func (x *DiscordSyncSettings) GetUserInfoSyncSettings() *UserInfoSyncSettings {
	if x != nil {
		return x.UserInfoSyncSettings
	}
	return nil
}

func (x *DiscordSyncSettings) GetStatusLog() bool {
	if x != nil {
		return x.StatusLog
	}
	return false
}

func (x *DiscordSyncSettings) GetStatusLogSettings() *StatusLogSettings {
	if x != nil {
		return x.StatusLogSettings
	}
	return nil
}

func (x *DiscordSyncSettings) GetJobsAbsence() bool {
	if x != nil {
		return x.JobsAbsence
	}
	return false
}

func (x *DiscordSyncSettings) GetJobsAbsenceSettings() *JobsAbsenceSettings {
	if x != nil {
		return x.JobsAbsenceSettings
	}
	return nil
}

func (x *DiscordSyncSettings) GetGroupSyncSettings() *GroupSyncSettings {
	if x != nil {
		return x.GroupSyncSettings
	}
	return nil
}

func (x *DiscordSyncSettings) GetQualificationsRoleFormat() string {
	if x != nil {
		return x.QualificationsRoleFormat
	}
	return ""
}

type DiscordSyncChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*DiscordSyncChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *DiscordSyncChanges) Reset() {
	*x = DiscordSyncChanges{}
	mi := &file_resources_users_jobs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscordSyncChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordSyncChanges) ProtoMessage() {}

func (x *DiscordSyncChanges) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordSyncChanges.ProtoReflect.Descriptor instead.
func (*DiscordSyncChanges) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{5}
}

func (x *DiscordSyncChanges) GetChanges() []*DiscordSyncChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type DiscordSyncChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Plan string               `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *DiscordSyncChange) Reset() {
	*x = DiscordSyncChange{}
	mi := &file_resources_users_jobs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscordSyncChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordSyncChange) ProtoMessage() {}

func (x *DiscordSyncChange) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordSyncChange.ProtoReflect.Descriptor instead.
func (*DiscordSyncChange) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{6}
}

func (x *DiscordSyncChange) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DiscordSyncChange) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

type UserInfoSyncSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeRoleEnabled bool                       `protobuf:"varint,1,opt,name=employee_role_enabled,json=employeeRoleEnabled,proto3" json:"employee_role_enabled,omitempty"`
	EmployeeRoleFormat  string                     `protobuf:"bytes,2,opt,name=employee_role_format,json=employeeRoleFormat,proto3" json:"employee_role_format,omitempty"`
	GradeRoleFormat     string                     `protobuf:"bytes,3,opt,name=grade_role_format,json=gradeRoleFormat,proto3" json:"grade_role_format,omitempty"`
	UnemployedEnabled   bool                       `protobuf:"varint,4,opt,name=unemployed_enabled,json=unemployedEnabled,proto3" json:"unemployed_enabled,omitempty"`
	UnemployedMode      UserInfoSyncUnemployedMode `protobuf:"varint,5,opt,name=unemployed_mode,json=unemployedMode,proto3,enum=resources.users.UserInfoSyncUnemployedMode" json:"unemployed_mode,omitempty"`
	UnemployedRoleName  string                     `protobuf:"bytes,6,opt,name=unemployed_role_name,json=unemployedRoleName,proto3" json:"unemployed_role_name,omitempty"`
	SyncNicknames       bool                       `protobuf:"varint,7,opt,name=sync_nicknames,json=syncNicknames,proto3" json:"sync_nicknames,omitempty"`
	GroupMapping        []*GroupMapping            `protobuf:"bytes,8,rep,name=group_mapping,json=groupMapping,proto3" json:"group_mapping,omitempty"`
}

func (x *UserInfoSyncSettings) Reset() {
	*x = UserInfoSyncSettings{}
	mi := &file_resources_users_jobs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfoSyncSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoSyncSettings) ProtoMessage() {}

func (x *UserInfoSyncSettings) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoSyncSettings.ProtoReflect.Descriptor instead.
func (*UserInfoSyncSettings) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfoSyncSettings) GetEmployeeRoleEnabled() bool {
	if x != nil {
		return x.EmployeeRoleEnabled
	}
	return false
}

func (x *UserInfoSyncSettings) GetEmployeeRoleFormat() string {
	if x != nil {
		return x.EmployeeRoleFormat
	}
	return ""
}

func (x *UserInfoSyncSettings) GetGradeRoleFormat() string {
	if x != nil {
		return x.GradeRoleFormat
	}
	return ""
}

func (x *UserInfoSyncSettings) GetUnemployedEnabled() bool {
	if x != nil {
		return x.UnemployedEnabled
	}
	return false
}

func (x *UserInfoSyncSettings) GetUnemployedMode() UserInfoSyncUnemployedMode {
	if x != nil {
		return x.UnemployedMode
	}
	return UserInfoSyncUnemployedMode_USER_INFO_SYNC_UNEMPLOYED_MODE_UNSPECIFIED
}

func (x *UserInfoSyncSettings) GetUnemployedRoleName() string {
	if x != nil {
		return x.UnemployedRoleName
	}
	return ""
}

func (x *UserInfoSyncSettings) GetSyncNicknames() bool {
	if x != nil {
		return x.SyncNicknames
	}
	return false
}

func (x *UserInfoSyncSettings) GetGroupMapping() []*GroupMapping {
	if x != nil {
		return x.GroupMapping
	}
	return nil
}

type GroupMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FromGrade int32  `protobuf:"varint,2,opt,name=from_grade,json=fromGrade,proto3" json:"from_grade,omitempty"`
	ToGrade   int32  `protobuf:"varint,3,opt,name=to_grade,json=toGrade,proto3" json:"to_grade,omitempty"`
}

func (x *GroupMapping) Reset() {
	*x = GroupMapping{}
	mi := &file_resources_users_jobs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMapping) ProtoMessage() {}

func (x *GroupMapping) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMapping.ProtoReflect.Descriptor instead.
func (*GroupMapping) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{8}
}

func (x *GroupMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupMapping) GetFromGrade() int32 {
	if x != nil {
		return x.FromGrade
	}
	return 0
}

func (x *GroupMapping) GetToGrade() int32 {
	if x != nil {
		return x.ToGrade
	}
	return 0
}

type StatusLogSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *StatusLogSettings) Reset() {
	*x = StatusLogSettings{}
	mi := &file_resources_users_jobs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusLogSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusLogSettings) ProtoMessage() {}

func (x *StatusLogSettings) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusLogSettings.ProtoReflect.Descriptor instead.
func (*StatusLogSettings) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{9}
}

func (x *StatusLogSettings) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type JobsAbsenceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbsenceRole string `protobuf:"bytes,1,opt,name=absence_role,json=absenceRole,proto3" json:"absence_role,omitempty"`
}

func (x *JobsAbsenceSettings) Reset() {
	*x = JobsAbsenceSettings{}
	mi := &file_resources_users_jobs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobsAbsenceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobsAbsenceSettings) ProtoMessage() {}

func (x *JobsAbsenceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobsAbsenceSettings.ProtoReflect.Descriptor instead.
func (*JobsAbsenceSettings) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{10}
}

func (x *JobsAbsenceSettings) GetAbsenceRole() string {
	if x != nil {
		return x.AbsenceRole
	}
	return ""
}

type GroupSyncSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoredRoleIds []string `protobuf:"bytes,1,rep,name=ignored_role_ids,json=ignoredRoleIds,proto3" json:"ignored_role_ids,omitempty"`
}

func (x *GroupSyncSettings) Reset() {
	*x = GroupSyncSettings{}
	mi := &file_resources_users_jobs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupSyncSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSyncSettings) ProtoMessage() {}

func (x *GroupSyncSettings) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSyncSettings.ProtoReflect.Descriptor instead.
func (*GroupSyncSettings) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{11}
}

func (x *GroupSyncSettings) GetIgnoredRoleIds() []string {
	if x != nil {
		return x.IgnoredRoleIds
	}
	return nil
}

type JobSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobSettings) Reset() {
	*x = JobSettings{}
	mi := &file_resources_users_jobs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSettings) ProtoMessage() {}

func (x *JobSettings) ProtoReflect() protoreflect.Message {
	mi := &file_resources_users_jobs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSettings.ProtoReflect.Descriptor instead.
func (*JobSettings) Descriptor() ([]byte, []int) {
	return file_resources_users_jobs_proto_rawDescGZIP(), []int{12}
}

var File_resources_users_jobs_proto protoreflect.FileDescriptor

var file_resources_users_jobs_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x1e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x03, 0x4a,
	0x6f, 0x62, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31,
	0x0a, 0x06, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x22, 0x7e, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x83, 0x07, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x19,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x14, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x29, 0x0a, 0x09, 0x6a, 0x6f, 0x62,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x05, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x70, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x32, 0x11, 0x5e, 0x23, 0x5b, 0x41, 0x2d, 0x46,
	0x61, 0x2d, 0x66, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x36, 0x7d, 0x24, 0x98, 0x01, 0x07, 0x52, 0x12,
	0x6c, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x51, 0x75, 0x69, 0x63,
	0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x18, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x11,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a,
	0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x48, 0x04, 0x52, 0x12, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x6f, 0x74, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x48, 0x05, 0x52, 0x04, 0x6d,
	0x6f, 0x74, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x74, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x60, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6f,
	0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x75, 0x70, 0x22, 0xbd, 0x04, 0x0a, 0x13, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x5c, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x52, 0x0a,
	0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x73, 0x41, 0x62, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x61, 0x62, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x6a, 0x6f, 0x62, 0x73, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52,
	0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x45, 0x0a, 0x1a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52,
	0x18, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x52, 0x0a, 0x12, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x5b, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0xef, 0x03, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x14, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x12,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x33, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x12, 0x75,
	0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x77, 0x0a, 0x0c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x74, 0x6f,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x13, 0x4a, 0x6f, 0x62,
	0x73, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52,
	0x0b, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x11,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x38, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x0b,
	0x92, 0x01, 0x08, 0x10, 0x19, 0x22, 0x04, 0x72, 0x02, 0x18, 0x18, 0x52, 0x0e, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x4a,
	0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0xa3, 0x01, 0x0a, 0x1a, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x55, 0x4e, 0x45, 0x4d,
	0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x55, 0x4e, 0x45, 0x4d,
	0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x55, 0x4e, 0x45, 0x4d, 0x50, 0x4c,
	0x4f, 0x59, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x02,
	0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x66, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3b,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resources_users_jobs_proto_rawDescOnce sync.Once
	file_resources_users_jobs_proto_rawDescData = file_resources_users_jobs_proto_rawDesc
)

func file_resources_users_jobs_proto_rawDescGZIP() []byte {
	file_resources_users_jobs_proto_rawDescOnce.Do(func() {
		file_resources_users_jobs_proto_rawDescData = protoimpl.X.CompressGZIP(file_resources_users_jobs_proto_rawDescData)
	})
	return file_resources_users_jobs_proto_rawDescData
}

var file_resources_users_jobs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_resources_users_jobs_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_resources_users_jobs_proto_goTypes = []any{
	(UserInfoSyncUnemployedMode)(0), // 0: resources.users.UserInfoSyncUnemployedMode
	(*Job)(nil),                     // 1: resources.users.Job
	(*JobGrade)(nil),                // 2: resources.users.JobGrade
	(*JobProps)(nil),                // 3: resources.users.JobProps
	(*QuickButtons)(nil),            // 4: resources.users.QuickButtons
	(*DiscordSyncSettings)(nil),     // 5: resources.users.DiscordSyncSettings
	(*DiscordSyncChanges)(nil),      // 6: resources.users.DiscordSyncChanges
	(*DiscordSyncChange)(nil),       // 7: resources.users.DiscordSyncChange
	(*UserInfoSyncSettings)(nil),    // 8: resources.users.UserInfoSyncSettings
	(*GroupMapping)(nil),            // 9: resources.users.GroupMapping
	(*StatusLogSettings)(nil),       // 10: resources.users.StatusLogSettings
	(*JobsAbsenceSettings)(nil),     // 11: resources.users.JobsAbsenceSettings
	(*GroupSyncSettings)(nil),       // 12: resources.users.GroupSyncSettings
	(*JobSettings)(nil),             // 13: resources.users.JobSettings
	(*timestamp.Timestamp)(nil),     // 14: resources.timestamp.Timestamp
	(*filestore.File)(nil),          // 15: resources.filestore.File
}
var file_resources_users_jobs_proto_depIdxs = []int32{
	2,  // 0: resources.users.Job.grades:type_name -> resources.users.JobGrade
	4,  // 1: resources.users.JobProps.quick_buttons:type_name -> resources.users.QuickButtons
	14, // 2: resources.users.JobProps.discord_last_sync:type_name -> resources.timestamp.Timestamp
	5,  // 3: resources.users.JobProps.discord_sync_settings:type_name -> resources.users.DiscordSyncSettings
	6,  // 4: resources.users.JobProps.discord_sync_changes:type_name -> resources.users.DiscordSyncChanges
	15, // 5: resources.users.JobProps.logo_url:type_name -> resources.filestore.File
	13, // 6: resources.users.JobProps.settings:type_name -> resources.users.JobSettings
	8,  // 7: resources.users.DiscordSyncSettings.user_info_sync_settings:type_name -> resources.users.UserInfoSyncSettings
	10, // 8: resources.users.DiscordSyncSettings.status_log_settings:type_name -> resources.users.StatusLogSettings
	11, // 9: resources.users.DiscordSyncSettings.jobs_absence_settings:type_name -> resources.users.JobsAbsenceSettings
	12, // 10: resources.users.DiscordSyncSettings.group_sync_settings:type_name -> resources.users.GroupSyncSettings
	7,  // 11: resources.users.DiscordSyncChanges.changes:type_name -> resources.users.DiscordSyncChange
	14, // 12: resources.users.DiscordSyncChange.time:type_name -> resources.timestamp.Timestamp
	0,  // 13: resources.users.UserInfoSyncSettings.unemployed_mode:type_name -> resources.users.UserInfoSyncUnemployedMode
	9,  // 14: resources.users.UserInfoSyncSettings.group_mapping:type_name -> resources.users.GroupMapping
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_resources_users_jobs_proto_init() }
func file_resources_users_jobs_proto_init() {
	if File_resources_users_jobs_proto != nil {
		return
	}
	file_resources_users_jobs_proto_msgTypes[1].OneofWrappers = []any{}
	file_resources_users_jobs_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resources_users_jobs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resources_users_jobs_proto_goTypes,
		DependencyIndexes: file_resources_users_jobs_proto_depIdxs,
		EnumInfos:         file_resources_users_jobs_proto_enumTypes,
		MessageInfos:      file_resources_users_jobs_proto_msgTypes,
	}.Build()
	File_resources_users_jobs_proto = out.File
	file_resources_users_jobs_proto_rawDesc = nil
	file_resources_users_jobs_proto_goTypes = nil
	file_resources_users_jobs_proto_depIdxs = nil
}
