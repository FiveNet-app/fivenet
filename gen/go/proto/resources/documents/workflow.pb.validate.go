// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/documents/workflow.proto

package documents

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Workflow with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Workflow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Workflow with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkflowMultiError, or nil
// if none found.
func (m *Workflow) ValidateAll() error {
	return m.validate(true)
}

func (m *Workflow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reminder

	if all {
		switch v := interface{}(m.GetReminderSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowValidationError{
					field:  "ReminderSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowValidationError{
					field:  "ReminderSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReminderSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowValidationError{
				field:  "ReminderSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AutoClose

	if all {
		switch v := interface{}(m.GetAutoCloseSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowValidationError{
					field:  "AutoCloseSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowValidationError{
					field:  "AutoCloseSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAutoCloseSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowValidationError{
				field:  "AutoCloseSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowMultiError(errors)
	}

	return nil
}

// WorkflowMultiError is an error wrapping multiple validation errors returned
// by Workflow.ValidateAll() if the designated constraints aren't met.
type WorkflowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowMultiError) AllErrors() []error { return m }

// WorkflowValidationError is the validation error returned by
// Workflow.Validate if the designated constraints aren't met.
type WorkflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowValidationError) ErrorName() string { return "WorkflowValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowValidationError{}

// Validate checks the field values on ReminderSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReminderSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReminderSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReminderSettingsMultiError, or nil if none found.
func (m *ReminderSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *ReminderSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetReminders()) > 3 {
		err := ReminderSettingsValidationError{
			field:  "Reminders",
			reason: "value must contain no more than 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetReminders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReminderSettingsValidationError{
						field:  fmt.Sprintf("Reminders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReminderSettingsValidationError{
						field:  fmt.Sprintf("Reminders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReminderSettingsValidationError{
					field:  fmt.Sprintf("Reminders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReminderSettingsMultiError(errors)
	}

	return nil
}

// ReminderSettingsMultiError is an error wrapping multiple validation errors
// returned by ReminderSettings.ValidateAll() if the designated constraints
// aren't met.
type ReminderSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReminderSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReminderSettingsMultiError) AllErrors() []error { return m }

// ReminderSettingsValidationError is the validation error returned by
// ReminderSettings.Validate if the designated constraints aren't met.
type ReminderSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReminderSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReminderSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReminderSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReminderSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReminderSettingsValidationError) ErrorName() string { return "ReminderSettingsValidationError" }

// Error satisfies the builtin error interface
func (e ReminderSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReminderSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReminderSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReminderSettingsValidationError{}

// Validate checks the field values on Reminder with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reminder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reminder with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReminderMultiError, or nil
// if none found.
func (m *Reminder) ValidateAll() error {
	return m.validate(true)
}

func (m *Reminder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDuration() == nil {
		err := ReminderValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDuration(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ReminderValidationError{
				field:  "Duration",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(7776000*time.Second + 0*time.Nanosecond)
			gte := time.Duration(86400*time.Second + 0*time.Nanosecond)

			if dur < gte || dur >= lt {
				err := ReminderValidationError{
					field:  "Duration",
					reason: "value must be inside range [24h0m0s, 2160h0m0s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if utf8.RuneCountInString(m.GetMessage()) > 255 {
		err := ReminderValidationError{
			field:  "Message",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReminderMultiError(errors)
	}

	return nil
}

// ReminderMultiError is an error wrapping multiple validation errors returned
// by Reminder.ValidateAll() if the designated constraints aren't met.
type ReminderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReminderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReminderMultiError) AllErrors() []error { return m }

// ReminderValidationError is the validation error returned by
// Reminder.Validate if the designated constraints aren't met.
type ReminderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReminderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReminderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReminderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReminderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReminderValidationError) ErrorName() string { return "ReminderValidationError" }

// Error satisfies the builtin error interface
func (e ReminderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReminder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReminderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReminderValidationError{}

// Validate checks the field values on AutoCloseSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AutoCloseSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoCloseSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoCloseSettingsMultiError, or nil if none found.
func (m *AutoCloseSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoCloseSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDuration() == nil {
		err := AutoCloseSettingsValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDuration(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = AutoCloseSettingsValidationError{
				field:  "Duration",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(7776000*time.Second + 0*time.Nanosecond)
			gte := time.Duration(86400*time.Second + 0*time.Nanosecond)

			if dur < gte || dur >= lt {
				err := AutoCloseSettingsValidationError{
					field:  "Duration",
					reason: "value must be inside range [24h0m0s, 2160h0m0s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if utf8.RuneCountInString(m.GetMessage()) > 255 {
		err := AutoCloseSettingsValidationError{
			field:  "Message",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AutoCloseSettingsMultiError(errors)
	}

	return nil
}

// AutoCloseSettingsMultiError is an error wrapping multiple validation errors
// returned by AutoCloseSettings.ValidateAll() if the designated constraints
// aren't met.
type AutoCloseSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoCloseSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoCloseSettingsMultiError) AllErrors() []error { return m }

// AutoCloseSettingsValidationError is the validation error returned by
// AutoCloseSettings.Validate if the designated constraints aren't met.
type AutoCloseSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoCloseSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoCloseSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoCloseSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoCloseSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoCloseSettingsValidationError) ErrorName() string {
	return "AutoCloseSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e AutoCloseSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoCloseSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoCloseSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoCloseSettingsValidationError{}

// Validate checks the field values on WorkflowCronData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowCronData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowCronData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowCronDataMultiError, or nil if none found.
func (m *WorkflowCronData) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowCronData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastDocId

	if len(errors) > 0 {
		return WorkflowCronDataMultiError(errors)
	}

	return nil
}

// WorkflowCronDataMultiError is an error wrapping multiple validation errors
// returned by WorkflowCronData.ValidateAll() if the designated constraints
// aren't met.
type WorkflowCronDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowCronDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowCronDataMultiError) AllErrors() []error { return m }

// WorkflowCronDataValidationError is the validation error returned by
// WorkflowCronData.Validate if the designated constraints aren't met.
type WorkflowCronDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowCronDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowCronDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowCronDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowCronDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowCronDataValidationError) ErrorName() string { return "WorkflowCronDataValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowCronDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowCronData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowCronDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowCronDataValidationError{}
