// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/common/grpcws/grpcws.proto

package grpcws

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GrpcFrame with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrpcFrame) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrpcFrame with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrpcFrameMultiError, or nil
// if none found.
func (m *GrpcFrame) ValidateAll() error {
	return m.validate(true)
}

func (m *GrpcFrame) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StreamId

	switch v := m.Payload.(type) {
	case *GrpcFrame_Header:
		if v == nil {
			err := GrpcFrameValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeader()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrpcFrameValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GrpcFrame_Body:
		if v == nil {
			err := GrpcFrameValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrpcFrameValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GrpcFrame_Complete:
		if v == nil {
			err := GrpcFrameValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetComplete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Complete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Complete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetComplete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrpcFrameValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GrpcFrame_Failure:
		if v == nil {
			err := GrpcFrameValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrpcFrameValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GrpcFrame_Cancel:
		if v == nil {
			err := GrpcFrameValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCancel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Cancel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrpcFrameValidationError{
						field:  "Cancel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCancel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrpcFrameValidationError{
					field:  "Cancel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GrpcFrameMultiError(errors)
	}

	return nil
}

// GrpcFrameMultiError is an error wrapping multiple validation errors returned
// by GrpcFrame.ValidateAll() if the designated constraints aren't met.
type GrpcFrameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrpcFrameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrpcFrameMultiError) AllErrors() []error { return m }

// GrpcFrameValidationError is the validation error returned by
// GrpcFrame.Validate if the designated constraints aren't met.
type GrpcFrameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrpcFrameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrpcFrameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrpcFrameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrpcFrameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrpcFrameValidationError) ErrorName() string { return "GrpcFrameValidationError" }

// Error satisfies the builtin error interface
func (e GrpcFrameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrpcFrame.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrpcFrameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrpcFrameValidationError{}

// Validate checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Header) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HeaderMultiError, or nil if none found.
func (m *Header) ValidateAll() error {
	return m.validate(true)
}

func (m *Header) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operation

	{
		sorted_keys := make([]string, len(m.GetHeaders()))
		i := 0
		for key := range m.GetHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeaders()[key]
			_ = val

			// no validation rules for Headers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HeaderValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HeaderValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HeaderValidationError{
						field:  fmt.Sprintf("Headers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return HeaderMultiError(errors)
	}

	return nil
}

// HeaderMultiError is an error wrapping multiple validation errors returned by
// Header.ValidateAll() if the designated constraints aren't met.
type HeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderMultiError) AllErrors() []error { return m }

// HeaderValidationError is the validation error returned by Header.Validate if
// the designated constraints aren't met.
type HeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValidationError) ErrorName() string { return "HeaderValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValidationError{}

// Validate checks the field values on HeaderValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeaderValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeaderValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeaderValueMultiError, or
// nil if none found.
func (m *HeaderValue) ValidateAll() error {
	return m.validate(true)
}

func (m *HeaderValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeaderValueMultiError(errors)
	}

	return nil
}

// HeaderValueMultiError is an error wrapping multiple validation errors
// returned by HeaderValue.ValidateAll() if the designated constraints aren't met.
type HeaderValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderValueMultiError) AllErrors() []error { return m }

// HeaderValueValidationError is the validation error returned by
// HeaderValue.Validate if the designated constraints aren't met.
type HeaderValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValueValidationError) ErrorName() string { return "HeaderValueValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaderValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValueValidationError{}

// Validate checks the field values on Body with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Body) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Body with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BodyMultiError, or nil if none found.
func (m *Body) ValidateAll() error {
	return m.validate(true)
}

func (m *Body) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Complete

	if len(errors) > 0 {
		return BodyMultiError(errors)
	}

	return nil
}

// BodyMultiError is an error wrapping multiple validation errors returned by
// Body.ValidateAll() if the designated constraints aren't met.
type BodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BodyMultiError) AllErrors() []error { return m }

// BodyValidationError is the validation error returned by Body.Validate if the
// designated constraints aren't met.
type BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BodyValidationError) ErrorName() string { return "BodyValidationError" }

// Error satisfies the builtin error interface
func (e BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BodyValidationError{}

// Validate checks the field values on Complete with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Complete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Complete with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompleteMultiError, or nil
// if none found.
func (m *Complete) ValidateAll() error {
	return m.validate(true)
}

func (m *Complete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteMultiError(errors)
	}

	return nil
}

// CompleteMultiError is an error wrapping multiple validation errors returned
// by Complete.ValidateAll() if the designated constraints aren't met.
type CompleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteMultiError) AllErrors() []error { return m }

// CompleteValidationError is the validation error returned by
// Complete.Validate if the designated constraints aren't met.
type CompleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteValidationError) ErrorName() string { return "CompleteValidationError" }

// Error satisfies the builtin error interface
func (e CompleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteValidationError{}

// Validate checks the field values on Failure with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Failure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Failure with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FailureMultiError, or nil if none found.
func (m *Failure) ValidateAll() error {
	return m.validate(true)
}

func (m *Failure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ErrorMessage

	// no validation rules for ErrorStatus

	{
		sorted_keys := make([]string, len(m.GetHeaders()))
		i := 0
		for key := range m.GetHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeaders()[key]
			_ = val

			// no validation rules for Headers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, FailureValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, FailureValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return FailureValidationError{
						field:  fmt.Sprintf("Headers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return FailureMultiError(errors)
	}

	return nil
}

// FailureMultiError is an error wrapping multiple validation errors returned
// by Failure.ValidateAll() if the designated constraints aren't met.
type FailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FailureMultiError) AllErrors() []error { return m }

// FailureValidationError is the validation error returned by Failure.Validate
// if the designated constraints aren't met.
type FailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailureValidationError) ErrorName() string { return "FailureValidationError" }

// Error satisfies the builtin error interface
func (e FailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailureValidationError{}

// Validate checks the field values on Cancel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cancel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cancel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CancelMultiError, or nil if none found.
func (m *Cancel) ValidateAll() error {
	return m.validate(true)
}

func (m *Cancel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelMultiError(errors)
	}

	return nil
}

// CancelMultiError is an error wrapping multiple validation errors returned by
// Cancel.ValidateAll() if the designated constraints aren't met.
type CancelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMultiError) AllErrors() []error { return m }

// CancelValidationError is the validation error returned by Cancel.Validate if
// the designated constraints aren't met.
type CancelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelValidationError) ErrorName() string { return "CancelValidationError" }

// Error satisfies the builtin error interface
func (e CancelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelValidationError{}
