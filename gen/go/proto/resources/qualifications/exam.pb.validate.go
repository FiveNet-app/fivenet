// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/qualifications/exam.proto

package qualifications

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Exam with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Exam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Exam with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExamMultiError, or nil if none found.
func (m *Exam) ValidateAll() error {
	return m.validate(true)
}

func (m *Exam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for QualificationId

	if m.GetSettings() == nil {
		err := ExamValidationError{
			field:  "Settings",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExamValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExamValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExamValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetQuestions() == nil {
		err := ExamValidationError{
			field:  "Questions",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuestions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExamValidationError{
					field:  "Questions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExamValidationError{
					field:  "Questions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuestions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExamValidationError{
				field:  "Questions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExamMultiError(errors)
	}

	return nil
}

// ExamMultiError is an error wrapping multiple validation errors returned by
// Exam.ValidateAll() if the designated constraints aren't met.
type ExamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamMultiError) AllErrors() []error { return m }

// ExamValidationError is the validation error returned by Exam.Validate if the
// designated constraints aren't met.
type ExamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamValidationError) ErrorName() string { return "ExamValidationError" }

// Error satisfies the builtin error interface
func (e ExamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamValidationError{}

// Validate checks the field values on ExamSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExamSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExamSettingsMultiError, or
// nil if none found.
func (m *ExamSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTime() == nil {
		err := ExamSettingsValidationError{
			field:  "Time",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetTime(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ExamSettingsValidationError{
				field:  "Time",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(300*time.Second + 0*time.Nanosecond)
			gte := time.Duration(1036800*time.Second + 0*time.Nanosecond)

			if dur >= lt && dur < gte {
				err := ExamSettingsValidationError{
					field:  "Time",
					reason: "value must be outside range [5m0s, 288h0m0s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return ExamSettingsMultiError(errors)
	}

	return nil
}

// ExamSettingsMultiError is an error wrapping multiple validation errors
// returned by ExamSettings.ValidateAll() if the designated constraints aren't met.
type ExamSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamSettingsMultiError) AllErrors() []error { return m }

// ExamSettingsValidationError is the validation error returned by
// ExamSettings.Validate if the designated constraints aren't met.
type ExamSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamSettingsValidationError) ErrorName() string { return "ExamSettingsValidationError" }

// Error satisfies the builtin error interface
func (e ExamSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamSettingsValidationError{}

// Validate checks the field values on ExamQuestions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExamQuestions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamQuestions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExamQuestionsMultiError, or
// nil if none found.
func (m *ExamQuestions) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamQuestions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetData()) > 50 {
		err := ExamQuestionsValidationError{
			field:  "Data",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamQuestionsValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamQuestionsValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamQuestionsValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExamQuestionsMultiError(errors)
	}

	return nil
}

// ExamQuestionsMultiError is an error wrapping multiple validation errors
// returned by ExamQuestions.ValidateAll() if the designated constraints
// aren't met.
type ExamQuestionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamQuestionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamQuestionsMultiError) AllErrors() []error { return m }

// ExamQuestionsValidationError is the validation error returned by
// ExamQuestions.Validate if the designated constraints aren't met.
type ExamQuestionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamQuestionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamQuestionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamQuestionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamQuestionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamQuestionsValidationError) ErrorName() string { return "ExamQuestionsValidationError" }

// Error satisfies the builtin error interface
func (e ExamQuestionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamQuestions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamQuestionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamQuestionsValidationError{}

// Validate checks the field values on ExamQuestion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExamQuestion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamQuestion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExamQuestionMultiError, or
// nil if none found.
func (m *ExamQuestion) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamQuestion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 512 {
		err := ExamQuestionValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Data.(type) {
	case *ExamQuestion_Separator:
		if v == nil {
			err := ExamQuestionValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Separator
	case *ExamQuestion_Yesno:
		if v == nil {
			err := ExamQuestionValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetYesno()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamQuestionValidationError{
						field:  "Yesno",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamQuestionValidationError{
						field:  "Yesno",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetYesno()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamQuestionValidationError{
					field:  "Yesno",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExamQuestion_FreeText:
		if v == nil {
			err := ExamQuestionValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFreeText()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamQuestionValidationError{
						field:  "FreeText",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamQuestionValidationError{
						field:  "FreeText",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFreeText()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamQuestionValidationError{
					field:  "FreeText",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExamQuestion_MultipleChoice:
		if v == nil {
			err := ExamQuestionValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMultipleChoice()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamQuestionValidationError{
						field:  "MultipleChoice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamQuestionValidationError{
						field:  "MultipleChoice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMultipleChoice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamQuestionValidationError{
					field:  "MultipleChoice",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) > 1024 {
			err := ExamQuestionValidationError{
				field:  "Description",
				reason: "value length must be at most 1024 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ExamQuestionMultiError(errors)
	}

	return nil
}

// ExamQuestionMultiError is an error wrapping multiple validation errors
// returned by ExamQuestion.ValidateAll() if the designated constraints aren't met.
type ExamQuestionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamQuestionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamQuestionMultiError) AllErrors() []error { return m }

// ExamQuestionValidationError is the validation error returned by
// ExamQuestion.Validate if the designated constraints aren't met.
type ExamQuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamQuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamQuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamQuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamQuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamQuestionValidationError) ErrorName() string { return "ExamQuestionValidationError" }

// Error satisfies the builtin error interface
func (e ExamQuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamQuestion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamQuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamQuestionValidationError{}

// Validate checks the field values on ExamQuestionYesNo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExamQuestionYesNo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamQuestionYesNo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamQuestionYesNoMultiError, or nil if none found.
func (m *ExamQuestionYesNo) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamQuestionYesNo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExamQuestionYesNoMultiError(errors)
	}

	return nil
}

// ExamQuestionYesNoMultiError is an error wrapping multiple validation errors
// returned by ExamQuestionYesNo.ValidateAll() if the designated constraints
// aren't met.
type ExamQuestionYesNoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamQuestionYesNoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamQuestionYesNoMultiError) AllErrors() []error { return m }

// ExamQuestionYesNoValidationError is the validation error returned by
// ExamQuestionYesNo.Validate if the designated constraints aren't met.
type ExamQuestionYesNoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamQuestionYesNoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamQuestionYesNoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamQuestionYesNoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamQuestionYesNoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamQuestionYesNoValidationError) ErrorName() string {
	return "ExamQuestionYesNoValidationError"
}

// Error satisfies the builtin error interface
func (e ExamQuestionYesNoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamQuestionYesNo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamQuestionYesNoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamQuestionYesNoValidationError{}

// Validate checks the field values on ExamQuestionText with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExamQuestionText) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamQuestionText with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamQuestionTextMultiError, or nil if none found.
func (m *ExamQuestionText) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamQuestionText) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinLength

	// no validation rules for MaxLength

	if len(errors) > 0 {
		return ExamQuestionTextMultiError(errors)
	}

	return nil
}

// ExamQuestionTextMultiError is an error wrapping multiple validation errors
// returned by ExamQuestionText.ValidateAll() if the designated constraints
// aren't met.
type ExamQuestionTextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamQuestionTextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamQuestionTextMultiError) AllErrors() []error { return m }

// ExamQuestionTextValidationError is the validation error returned by
// ExamQuestionText.Validate if the designated constraints aren't met.
type ExamQuestionTextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamQuestionTextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamQuestionTextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamQuestionTextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamQuestionTextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamQuestionTextValidationError) ErrorName() string { return "ExamQuestionTextValidationError" }

// Error satisfies the builtin error interface
func (e ExamQuestionTextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamQuestionText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamQuestionTextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamQuestionTextValidationError{}

// Validate checks the field values on ExamQuestionMultipleChoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExamQuestionMultipleChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamQuestionMultipleChoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamQuestionMultipleChoiceMultiError, or nil if none found.
func (m *ExamQuestionMultipleChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamQuestionMultipleChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Multi

	if len(m.GetChoices()) > 10 {
		err := ExamQuestionMultipleChoiceValidationError{
			field:  "Choices",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if len(errors) > 0 {
		return ExamQuestionMultipleChoiceMultiError(errors)
	}

	return nil
}

// ExamQuestionMultipleChoiceMultiError is an error wrapping multiple
// validation errors returned by ExamQuestionMultipleChoice.ValidateAll() if
// the designated constraints aren't met.
type ExamQuestionMultipleChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamQuestionMultipleChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamQuestionMultipleChoiceMultiError) AllErrors() []error { return m }

// ExamQuestionMultipleChoiceValidationError is the validation error returned
// by ExamQuestionMultipleChoice.Validate if the designated constraints aren't met.
type ExamQuestionMultipleChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamQuestionMultipleChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamQuestionMultipleChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamQuestionMultipleChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamQuestionMultipleChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamQuestionMultipleChoiceValidationError) ErrorName() string {
	return "ExamQuestionMultipleChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e ExamQuestionMultipleChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamQuestionMultipleChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamQuestionMultipleChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamQuestionMultipleChoiceValidationError{}

// Validate checks the field values on ExamUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExamUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamUserResponseMultiError, or nil if none found.
func (m *ExamUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for QualificationId

	if all {
		switch v := interface{}(m.GetResponses()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExamUserResponseValidationError{
					field:  "Responses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExamUserResponseValidationError{
					field:  "Responses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExamUserResponseValidationError{
				field:  "Responses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Closed

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamUserResponseValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamUserResponseValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamUserResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StartedAt != nil {

		if all {
			switch v := interface{}(m.GetStartedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamUserResponseValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamUserResponseValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamUserResponseValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndedAt != nil {

		if all {
			switch v := interface{}(m.GetEndedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamUserResponseValidationError{
						field:  "EndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamUserResponseValidationError{
						field:  "EndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamUserResponseValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExamUserResponseMultiError(errors)
	}

	return nil
}

// ExamUserResponseMultiError is an error wrapping multiple validation errors
// returned by ExamUserResponse.ValidateAll() if the designated constraints
// aren't met.
type ExamUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamUserResponseMultiError) AllErrors() []error { return m }

// ExamUserResponseValidationError is the validation error returned by
// ExamUserResponse.Validate if the designated constraints aren't met.
type ExamUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamUserResponseValidationError) ErrorName() string { return "ExamUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExamUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamUserResponseValidationError{}

// Validate checks the field values on ExamResponses with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExamResponses) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamResponses with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExamResponsesMultiError, or
// nil if none found.
func (m *ExamResponses) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamResponses) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetData()) > 50 {
		err := ExamResponsesValidationError{
			field:  "Data",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamResponsesValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamResponsesValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamResponsesValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExamResponsesMultiError(errors)
	}

	return nil
}

// ExamResponsesMultiError is an error wrapping multiple validation errors
// returned by ExamResponses.ValidateAll() if the designated constraints
// aren't met.
type ExamResponsesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamResponsesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamResponsesMultiError) AllErrors() []error { return m }

// ExamResponsesValidationError is the validation error returned by
// ExamResponses.Validate if the designated constraints aren't met.
type ExamResponsesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamResponsesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamResponsesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamResponsesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamResponsesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamResponsesValidationError) ErrorName() string { return "ExamResponsesValidationError" }

// Error satisfies the builtin error interface
func (e ExamResponsesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamResponses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamResponsesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamResponsesValidationError{}

// Validate checks the field values on ExamResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExamResponseMultiError, or
// nil if none found.
func (m *ExamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.Data.(type) {
	case *ExamResponse_Separator:
		if v == nil {
			err := ExamResponseValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Separator
	case *ExamResponse_Yesno:
		if v == nil {
			err := ExamResponseValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetYesno()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamResponseValidationError{
						field:  "Yesno",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamResponseValidationError{
						field:  "Yesno",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetYesno()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamResponseValidationError{
					field:  "Yesno",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExamResponse_FreeText:
		if v == nil {
			err := ExamResponseValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFreeText()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamResponseValidationError{
						field:  "FreeText",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamResponseValidationError{
						field:  "FreeText",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFreeText()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamResponseValidationError{
					field:  "FreeText",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExamResponse_MultipleChoice:
		if v == nil {
			err := ExamResponseValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMultipleChoice()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamResponseValidationError{
						field:  "MultipleChoice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamResponseValidationError{
						field:  "MultipleChoice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMultipleChoice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamResponseValidationError{
					field:  "MultipleChoice",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExamResponseMultiError(errors)
	}

	return nil
}

// ExamResponseMultiError is an error wrapping multiple validation errors
// returned by ExamResponse.ValidateAll() if the designated constraints aren't met.
type ExamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamResponseMultiError) AllErrors() []error { return m }

// ExamResponseValidationError is the validation error returned by
// ExamResponse.Validate if the designated constraints aren't met.
type ExamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamResponseValidationError) ErrorName() string { return "ExamResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamResponseValidationError{}

// Validate checks the field values on ExamResponseYesNo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExamResponseYesNo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamResponseYesNo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamResponseYesNoMultiError, or nil if none found.
func (m *ExamResponseYesNo) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamResponseYesNo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return ExamResponseYesNoMultiError(errors)
	}

	return nil
}

// ExamResponseYesNoMultiError is an error wrapping multiple validation errors
// returned by ExamResponseYesNo.ValidateAll() if the designated constraints
// aren't met.
type ExamResponseYesNoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamResponseYesNoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamResponseYesNoMultiError) AllErrors() []error { return m }

// ExamResponseYesNoValidationError is the validation error returned by
// ExamResponseYesNo.Validate if the designated constraints aren't met.
type ExamResponseYesNoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamResponseYesNoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamResponseYesNoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamResponseYesNoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamResponseYesNoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamResponseYesNoValidationError) ErrorName() string {
	return "ExamResponseYesNoValidationError"
}

// Error satisfies the builtin error interface
func (e ExamResponseYesNoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamResponseYesNo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamResponseYesNoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamResponseYesNoValidationError{}

// Validate checks the field values on ExamResponseText with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExamResponseText) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamResponseText with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamResponseTextMultiError, or nil if none found.
func (m *ExamResponseText) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamResponseText) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetText()) > 500000 {
		err := ExamResponseTextValidationError{
			field:  "Text",
			reason: "value length must be at most 500000 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExamResponseTextMultiError(errors)
	}

	return nil
}

// ExamResponseTextMultiError is an error wrapping multiple validation errors
// returned by ExamResponseText.ValidateAll() if the designated constraints
// aren't met.
type ExamResponseTextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamResponseTextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamResponseTextMultiError) AllErrors() []error { return m }

// ExamResponseTextValidationError is the validation error returned by
// ExamResponseText.Validate if the designated constraints aren't met.
type ExamResponseTextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamResponseTextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamResponseTextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamResponseTextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamResponseTextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamResponseTextValidationError) ErrorName() string { return "ExamResponseTextValidationError" }

// Error satisfies the builtin error interface
func (e ExamResponseTextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamResponseText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamResponseTextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamResponseTextValidationError{}

// Validate checks the field values on ExamResponseMultipleChoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExamResponseMultipleChoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamResponseMultipleChoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamResponseMultipleChoiceMultiError, or nil if none found.
func (m *ExamResponseMultipleChoice) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamResponseMultipleChoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetChoices()) > 10 {
		err := ExamResponseMultipleChoiceValidationError{
			field:  "Choices",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExamResponseMultipleChoiceMultiError(errors)
	}

	return nil
}

// ExamResponseMultipleChoiceMultiError is an error wrapping multiple
// validation errors returned by ExamResponseMultipleChoice.ValidateAll() if
// the designated constraints aren't met.
type ExamResponseMultipleChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamResponseMultipleChoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamResponseMultipleChoiceMultiError) AllErrors() []error { return m }

// ExamResponseMultipleChoiceValidationError is the validation error returned
// by ExamResponseMultipleChoice.Validate if the designated constraints aren't met.
type ExamResponseMultipleChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamResponseMultipleChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamResponseMultipleChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamResponseMultipleChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamResponseMultipleChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamResponseMultipleChoiceValidationError) ErrorName() string {
	return "ExamResponseMultipleChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e ExamResponseMultipleChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamResponseMultipleChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamResponseMultipleChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamResponseMultipleChoiceValidationError{}
