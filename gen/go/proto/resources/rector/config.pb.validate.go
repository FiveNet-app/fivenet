// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/rector/config.proto

package rector

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AppConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppConfigMultiError, or nil
// if none found.
func (m *AppConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AppConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebsite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Website",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Website",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebsite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Website",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJobInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "JobInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "JobInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "JobInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserTracker()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "UserTracker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "UserTracker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserTracker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "UserTracker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOauth2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Oauth2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Oauth2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOauth2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Oauth2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Discord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Discord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Discord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppConfigMultiError(errors)
	}

	return nil
}

// AppConfigMultiError is an error wrapping multiple validation errors returned
// by AppConfig.ValidateAll() if the designated constraints aren't met.
type AppConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppConfigMultiError) AllErrors() []error { return m }

// AppConfigValidationError is the validation error returned by
// AppConfig.Validate if the designated constraints aren't met.
type AppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppConfigValidationError) ErrorName() string { return "AppConfigValidationError" }

// Error satisfies the builtin error interface
func (e AppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppConfigValidationError{}

// Validate checks the field values on Auth with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Auth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthMultiError, or nil if none found.
func (m *Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignupEnabled

	if len(errors) > 0 {
		return AuthMultiError(errors)
	}

	return nil
}

// AuthMultiError is an error wrapping multiple validation errors returned by
// Auth.ValidateAll() if the designated constraints aren't met.
type AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMultiError) AllErrors() []error { return m }

// AuthValidationError is the validation error returned by Auth.Validate if the
// designated constraints aren't met.
type AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidationError) ErrorName() string { return "AuthValidationError" }

// Error satisfies the builtin error interface
func (e AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidationError{}

// Validate checks the field values on Website with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Website) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Website with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WebsiteMultiError, or nil if none found.
func (m *Website) ValidateAll() error {
	return m.validate(true)
}

func (m *Website) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLinks()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsiteValidationError{
					field:  "Links",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsiteValidationError{
					field:  "Links",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLinks()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsiteValidationError{
				field:  "Links",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebsiteMultiError(errors)
	}

	return nil
}

// WebsiteMultiError is an error wrapping multiple validation errors returned
// by Website.ValidateAll() if the designated constraints aren't met.
type WebsiteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsiteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsiteMultiError) AllErrors() []error { return m }

// WebsiteValidationError is the validation error returned by Website.Validate
// if the designated constraints aren't met.
type WebsiteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsiteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsiteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsiteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsiteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsiteValidationError) ErrorName() string { return "WebsiteValidationError" }

// Error satisfies the builtin error interface
func (e WebsiteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsiteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsiteValidationError{}

// Validate checks the field values on Links with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Links) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Links with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LinksMultiError, or nil if none found.
func (m *Links) ValidateAll() error {
	return m.validate(true)
}

func (m *Links) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PrivacyPolicy != nil {
		// no validation rules for PrivacyPolicy
	}

	if m.Imprint != nil {
		// no validation rules for Imprint
	}

	if len(errors) > 0 {
		return LinksMultiError(errors)
	}

	return nil
}

// LinksMultiError is an error wrapping multiple validation errors returned by
// Links.ValidateAll() if the designated constraints aren't met.
type LinksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinksMultiError) AllErrors() []error { return m }

// LinksValidationError is the validation error returned by Links.Validate if
// the designated constraints aren't met.
type LinksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinksValidationError) ErrorName() string { return "LinksValidationError" }

// Error satisfies the builtin error interface
func (e LinksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinksValidationError{}

// Validate checks the field values on JobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobInfoMultiError, or nil if none found.
func (m *JobInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *JobInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobInfoMultiError(errors)
	}

	return nil
}

// JobInfoMultiError is an error wrapping multiple validation errors returned
// by JobInfo.ValidateAll() if the designated constraints aren't met.
type JobInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobInfoMultiError) AllErrors() []error { return m }

// JobInfoValidationError is the validation error returned by JobInfo.Validate
// if the designated constraints aren't met.
type JobInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobInfoValidationError) ErrorName() string { return "JobInfoValidationError" }

// Error satisfies the builtin error interface
func (e JobInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobInfoValidationError{}

// Validate checks the field values on UserTracker with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserTracker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTracker with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserTrackerMultiError, or
// nil if none found.
func (m *UserTracker) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTracker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRefreshTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTrackerValidationError{
					field:  "RefreshTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTrackerValidationError{
					field:  "RefreshTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRefreshTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTrackerValidationError{
				field:  "RefreshTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDbRefreshTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTrackerValidationError{
					field:  "DbRefreshTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTrackerValidationError{
					field:  "DbRefreshTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDbRefreshTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTrackerValidationError{
				field:  "DbRefreshTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserTrackerMultiError(errors)
	}

	return nil
}

// UserTrackerMultiError is an error wrapping multiple validation errors
// returned by UserTracker.ValidateAll() if the designated constraints aren't met.
type UserTrackerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTrackerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTrackerMultiError) AllErrors() []error { return m }

// UserTrackerValidationError is the validation error returned by
// UserTracker.Validate if the designated constraints aren't met.
type UserTrackerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTrackerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTrackerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTrackerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTrackerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTrackerValidationError) ErrorName() string { return "UserTrackerValidationError" }

// Error satisfies the builtin error interface
func (e UserTrackerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTracker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTrackerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTrackerValidationError{}

// Validate checks the field values on OAuth2 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuth2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth2 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OAuth2MultiError, or nil if none found.
func (m *OAuth2) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OAuth2ValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OAuth2ValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OAuth2ValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OAuth2MultiError(errors)
	}

	return nil
}

// OAuth2MultiError is an error wrapping multiple validation errors returned by
// OAuth2.ValidateAll() if the designated constraints aren't met.
type OAuth2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth2MultiError) AllErrors() []error { return m }

// OAuth2ValidationError is the validation error returned by OAuth2.Validate if
// the designated constraints aren't met.
type OAuth2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth2ValidationError) ErrorName() string { return "OAuth2ValidationError" }

// Error satisfies the builtin error interface
func (e OAuth2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth2ValidationError{}

// Validate checks the field values on OAuth2Provider with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuth2Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth2Provider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuth2ProviderMultiError,
// or nil if none found.
func (m *OAuth2Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth2Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Label

	// no validation rules for Homepage

	// no validation rules for Type

	// no validation rules for RedirectUrl

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if all {
		switch v := interface{}(m.GetEndpoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OAuth2ProviderValidationError{
					field:  "Endpoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OAuth2ProviderValidationError{
					field:  "Endpoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuth2ProviderValidationError{
				field:  "Endpoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMapping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OAuth2ProviderValidationError{
					field:  "Mapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OAuth2ProviderValidationError{
					field:  "Mapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMapping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuth2ProviderValidationError{
				field:  "Mapping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OAuth2ProviderMultiError(errors)
	}

	return nil
}

// OAuth2ProviderMultiError is an error wrapping multiple validation errors
// returned by OAuth2Provider.ValidateAll() if the designated constraints
// aren't met.
type OAuth2ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth2ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth2ProviderMultiError) AllErrors() []error { return m }

// OAuth2ProviderValidationError is the validation error returned by
// OAuth2Provider.Validate if the designated constraints aren't met.
type OAuth2ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth2ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth2ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth2ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth2ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth2ProviderValidationError) ErrorName() string { return "OAuth2ProviderValidationError" }

// Error satisfies the builtin error interface
func (e OAuth2ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth2Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth2ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth2ProviderValidationError{}

// Validate checks the field values on OAuth2Endpoints with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OAuth2Endpoints) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth2Endpoints with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuth2EndpointsMultiError, or nil if none found.
func (m *OAuth2Endpoints) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth2Endpoints) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.AuthUrl != nil {
		// no validation rules for AuthUrl
	}

	if m.TokenUrl != nil {
		// no validation rules for TokenUrl
	}

	if m.UserInfoUrl != nil {
		// no validation rules for UserInfoUrl
	}

	if len(errors) > 0 {
		return OAuth2EndpointsMultiError(errors)
	}

	return nil
}

// OAuth2EndpointsMultiError is an error wrapping multiple validation errors
// returned by OAuth2Endpoints.ValidateAll() if the designated constraints
// aren't met.
type OAuth2EndpointsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth2EndpointsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth2EndpointsMultiError) AllErrors() []error { return m }

// OAuth2EndpointsValidationError is the validation error returned by
// OAuth2Endpoints.Validate if the designated constraints aren't met.
type OAuth2EndpointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth2EndpointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth2EndpointsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth2EndpointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth2EndpointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth2EndpointsValidationError) ErrorName() string { return "OAuth2EndpointsValidationError" }

// Error satisfies the builtin error interface
func (e OAuth2EndpointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth2Endpoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth2EndpointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth2EndpointsValidationError{}

// Validate checks the field values on OAuth2Mapping with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuth2Mapping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth2Mapping with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuth2MappingMultiError, or
// nil if none found.
func (m *OAuth2Mapping) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth2Mapping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	if len(errors) > 0 {
		return OAuth2MappingMultiError(errors)
	}

	return nil
}

// OAuth2MappingMultiError is an error wrapping multiple validation errors
// returned by OAuth2Mapping.ValidateAll() if the designated constraints
// aren't met.
type OAuth2MappingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth2MappingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth2MappingMultiError) AllErrors() []error { return m }

// OAuth2MappingValidationError is the validation error returned by
// OAuth2Mapping.Validate if the designated constraints aren't met.
type OAuth2MappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth2MappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth2MappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth2MappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth2MappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth2MappingValidationError) ErrorName() string { return "OAuth2MappingValidationError" }

// Error satisfies the builtin error interface
func (e OAuth2MappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth2Mapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth2MappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth2MappingValidationError{}

// Validate checks the field values on Discord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Discord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Discord with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DiscordMultiError, or nil if none found.
func (m *Discord) ValidateAll() error {
	return m.validate(true)
}

func (m *Discord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if len(errors) > 0 {
		return DiscordMultiError(errors)
	}

	return nil
}

// DiscordMultiError is an error wrapping multiple validation errors returned
// by Discord.ValidateAll() if the designated constraints aren't met.
type DiscordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscordMultiError) AllErrors() []error { return m }

// DiscordValidationError is the validation error returned by Discord.Validate
// if the designated constraints aren't met.
type DiscordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscordValidationError) ErrorName() string { return "DiscordValidationError" }

// Error satisfies the builtin error interface
func (e DiscordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscordValidationError{}

// Validate checks the field values on PluginConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PluginConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PluginConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PluginConfigMultiError, or
// nil if none found.
func (m *PluginConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PluginConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PluginConfigMultiError(errors)
	}

	return nil
}

// PluginConfigMultiError is an error wrapping multiple validation errors
// returned by PluginConfig.ValidateAll() if the designated constraints aren't met.
type PluginConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginConfigMultiError) AllErrors() []error { return m }

// PluginConfigValidationError is the validation error returned by
// PluginConfig.Validate if the designated constraints aren't met.
type PluginConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginConfigValidationError) ErrorName() string { return "PluginConfigValidationError" }

// Error satisfies the builtin error interface
func (e PluginConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginConfigValidationError{}
