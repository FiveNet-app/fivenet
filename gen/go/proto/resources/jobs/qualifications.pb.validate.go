// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/jobs/qualifications.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Qualification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Qualification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Qualification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QualificationMultiError, or
// nil if none found.
func (m *Qualification) ValidateAll() error {
	return m.validate(true)
}

func (m *Qualification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := QualificationValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() >= 4294967295 {
		err := QualificationValidationError{
			field:  "Weight",
			reason: "value must be less than 4294967295",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Open

	// no validation rules for Title

	// no validation rules for Abbreviation

	// no validation rules for Description

	for idx, item := range m.GetJobAccess() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  fmt.Sprintf("JobAccess[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  fmt.Sprintf("JobAccess[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  fmt.Sprintf("JobAccess[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QualificationMultiError(errors)
	}

	return nil
}

// QualificationMultiError is an error wrapping multiple validation errors
// returned by Qualification.ValidateAll() if the designated constraints
// aren't met.
type QualificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationMultiError) AllErrors() []error { return m }

// QualificationValidationError is the validation error returned by
// Qualification.Validate if the designated constraints aren't met.
type QualificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationValidationError) ErrorName() string { return "QualificationValidationError" }

// Error satisfies the builtin error interface
func (e QualificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationValidationError{}

// Validate checks the field values on QualificationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualificationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualificationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualificationResultMultiError, or nil if none found.
func (m *QualificationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *QualificationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TrainingId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualificationResultValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualificationResultValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualificationResultValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRating() >= 100 {
		err := QualificationResultValidationError{
			field:  "Rating",
			reason: "value must be less than 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSummary()); l < 3 || l > 512 {
		err := QualificationResultValidationError{
			field:  "Summary",
			reason: "value length must be between 3 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatorId

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualificationResultValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualificationResultValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualificationResultValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationResultValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QualificationResultMultiError(errors)
	}

	return nil
}

// QualificationResultMultiError is an error wrapping multiple validation
// errors returned by QualificationResult.ValidateAll() if the designated
// constraints aren't met.
type QualificationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationResultMultiError) AllErrors() []error { return m }

// QualificationResultValidationError is the validation error returned by
// QualificationResult.Validate if the designated constraints aren't met.
type QualificationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationResultValidationError) ErrorName() string {
	return "QualificationResultValidationError"
}

// Error satisfies the builtin error interface
func (e QualificationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualificationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationResultValidationError{}

// Validate checks the field values on Access with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Access) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Access with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccessMultiError, or nil if none found.
func (m *Access) ValidateAll() error {
	return m.validate(true)
}

func (m *Access) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJob() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccessValidationError{
						field:  fmt.Sprintf("Job[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccessValidationError{
						field:  fmt.Sprintf("Job[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccessValidationError{
					field:  fmt.Sprintf("Job[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRequiredQualification() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccessValidationError{
						field:  fmt.Sprintf("RequiredQualification[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccessValidationError{
						field:  fmt.Sprintf("RequiredQualification[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccessValidationError{
					field:  fmt.Sprintf("RequiredQualification[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccessMultiError(errors)
	}

	return nil
}

// AccessMultiError is an error wrapping multiple validation errors returned by
// Access.ValidateAll() if the designated constraints aren't met.
type AccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessMultiError) AllErrors() []error { return m }

// AccessValidationError is the validation error returned by Access.Validate if
// the designated constraints aren't met.
type AccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessValidationError) ErrorName() string { return "AccessValidationError" }

// Error satisfies the builtin error interface
func (e AccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessValidationError{}

// Validate checks the field values on JobAccess with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobAccessMultiError, or nil
// if none found.
func (m *JobAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *JobAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TemplateId

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := JobAccessValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinimumGrade() <= 0 {
		err := JobAccessValidationError{
			field:  "MinimumGrade",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := AccessLevel_name[int32(m.GetAccess())]; !ok {
		err := JobAccessValidationError{
			field:  "Access",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobAccessValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobAccessValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobAccessValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.JobLabel != nil {

		if utf8.RuneCountInString(m.GetJobLabel()) > 50 {
			err := JobAccessValidationError{
				field:  "JobLabel",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.JobGradeLabel != nil {

		if utf8.RuneCountInString(m.GetJobGradeLabel()) > 50 {
			err := JobAccessValidationError{
				field:  "JobGradeLabel",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return JobAccessMultiError(errors)
	}

	return nil
}

// JobAccessMultiError is an error wrapping multiple validation errors returned
// by JobAccess.ValidateAll() if the designated constraints aren't met.
type JobAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobAccessMultiError) AllErrors() []error { return m }

// JobAccessValidationError is the validation error returned by
// JobAccess.Validate if the designated constraints aren't met.
type JobAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobAccessValidationError) ErrorName() string { return "JobAccessValidationError" }

// Error satisfies the builtin error interface
func (e JobAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobAccessValidationError{}

// Validate checks the field values on RequiredQualificationAccess with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequiredQualificationAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequiredQualificationAccess with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequiredQualificationAccessMultiError, or nil if none found.
func (m *RequiredQualificationAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *RequiredQualificationAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TrainingId

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequiredQualificationAccessValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequiredQualificationAccessValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequiredQualificationAccessValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RequiredQualificationAccessMultiError(errors)
	}

	return nil
}

// RequiredQualificationAccessMultiError is an error wrapping multiple
// validation errors returned by RequiredQualificationAccess.ValidateAll() if
// the designated constraints aren't met.
type RequiredQualificationAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequiredQualificationAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequiredQualificationAccessMultiError) AllErrors() []error { return m }

// RequiredQualificationAccessValidationError is the validation error returned
// by RequiredQualificationAccess.Validate if the designated constraints
// aren't met.
type RequiredQualificationAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequiredQualificationAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequiredQualificationAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequiredQualificationAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequiredQualificationAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequiredQualificationAccessValidationError) ErrorName() string {
	return "RequiredQualificationAccessValidationError"
}

// Error satisfies the builtin error interface
func (e RequiredQualificationAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequiredQualificationAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequiredQualificationAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequiredQualificationAccessValidationError{}
