// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/jobs/training.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TrainingModule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrainingModule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingModule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrainingModuleMultiError,
// or nil if none found.
func (m *TrainingModule) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingModule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := TrainingModuleValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Open

	// no validation rules for RequireRequirements

	if m.GetMinimumGrade() <= 0 {
		err := TrainingModuleValidationError{
			field:  "MinimumGrade",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for Description

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrainingModuleValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrainingModuleValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainingModuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrainingModuleValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrainingModuleValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainingModuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrainingModuleMultiError(errors)
	}

	return nil
}

// TrainingModuleMultiError is an error wrapping multiple validation errors
// returned by TrainingModule.ValidateAll() if the designated constraints
// aren't met.
type TrainingModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingModuleMultiError) AllErrors() []error { return m }

// TrainingModuleValidationError is the validation error returned by
// TrainingModule.Validate if the designated constraints aren't met.
type TrainingModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingModuleValidationError) ErrorName() string { return "TrainingModuleValidationError" }

// Error satisfies the builtin error interface
func (e TrainingModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingModuleValidationError{}

// Validate checks the field values on TrainingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrainingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingRequestMultiError, or nil if none found.
func (m *TrainingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TrainingRequestMultiError(errors)
	}

	return nil
}

// TrainingRequestMultiError is an error wrapping multiple validation errors
// returned by TrainingRequest.ValidateAll() if the designated constraints
// aren't met.
type TrainingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingRequestMultiError) AllErrors() []error { return m }

// TrainingRequestValidationError is the validation error returned by
// TrainingRequest.Validate if the designated constraints aren't met.
type TrainingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingRequestValidationError) ErrorName() string { return "TrainingRequestValidationError" }

// Error satisfies the builtin error interface
func (e TrainingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingRequestValidationError{}

// Validate checks the field values on TrainingResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrainingResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrainingResultMultiError,
// or nil if none found.
func (m *TrainingResult) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainingId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrainingResultValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrainingResultValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainingResultValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrainingResultValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrainingResultValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainingResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrainingResultMultiError(errors)
	}

	return nil
}

// TrainingResultMultiError is an error wrapping multiple validation errors
// returned by TrainingResult.ValidateAll() if the designated constraints
// aren't met.
type TrainingResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingResultMultiError) AllErrors() []error { return m }

// TrainingResultValidationError is the validation error returned by
// TrainingResult.Validate if the designated constraints aren't met.
type TrainingResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingResultValidationError) ErrorName() string { return "TrainingResultValidationError" }

// Error satisfies the builtin error interface
func (e TrainingResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingResultValidationError{}
