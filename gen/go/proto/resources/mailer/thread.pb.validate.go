// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/mailer/thread.proto

package mailer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Thread with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Thread) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Thread with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThreadMultiError, or nil if none found.
func (m *Thread) ValidateAll() error {
	return m.validate(true)
}

func (m *Thread) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 255 {
		err := ThreadValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreatorJob()) > 40 {
		err := ThreadValidationError{
			field:  "CreatorJob",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRecipients()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "Recipients",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "Recipients",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipients()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadValidationError{
				field:  "Recipients",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreatorId != nil {

		if m.GetCreatorId() <= 0 {
			err := ThreadValidationError{
				field:  "CreatorId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Creator != nil {

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UserState != nil {

		if all {
			switch v := interface{}(m.GetUserState()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "UserState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "UserState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserState()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadValidationError{
					field:  "UserState",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EmailState != nil {

		if all {
			switch v := interface{}(m.GetEmailState()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "EmailState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  "EmailState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEmailState()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadValidationError{
					field:  "EmailState",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThreadMultiError(errors)
	}

	return nil
}

// ThreadMultiError is an error wrapping multiple validation errors returned by
// Thread.ValidateAll() if the designated constraints aren't met.
type ThreadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadMultiError) AllErrors() []error { return m }

// ThreadValidationError is the validation error returned by Thread.Validate if
// the designated constraints aren't met.
type ThreadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadValidationError) ErrorName() string { return "ThreadValidationError" }

// Error satisfies the builtin error interface
func (e ThreadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThread.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadValidationError{}

// Validate checks the field values on ThreadRecipients with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThreadRecipients) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadRecipients with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadRecipientsMultiError, or nil if none found.
func (m *ThreadRecipients) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadRecipients) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEmails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadRecipientsValidationError{
						field:  fmt.Sprintf("Emails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadRecipientsValidationError{
						field:  fmt.Sprintf("Emails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadRecipientsValidationError{
					field:  fmt.Sprintf("Emails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadRecipientsValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadRecipientsValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadRecipientsValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThreadRecipientsMultiError(errors)
	}

	return nil
}

// ThreadRecipientsMultiError is an error wrapping multiple validation errors
// returned by ThreadRecipients.ValidateAll() if the designated constraints
// aren't met.
type ThreadRecipientsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadRecipientsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadRecipientsMultiError) AllErrors() []error { return m }

// ThreadRecipientsValidationError is the validation error returned by
// ThreadRecipients.Validate if the designated constraints aren't met.
type ThreadRecipientsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadRecipientsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadRecipientsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadRecipientsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadRecipientsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadRecipientsValidationError) ErrorName() string { return "ThreadRecipientsValidationError" }

// Error satisfies the builtin error interface
func (e ThreadRecipientsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadRecipients.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadRecipientsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadRecipientsValidationError{}

// Validate checks the field values on ThreadRecipientEmail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThreadRecipientEmail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadRecipientEmail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadRecipientEmailMultiError, or nil if none found.
func (m *ThreadRecipientEmail) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadRecipientEmail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TargetId

	// no validation rules for EmailId

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadRecipientEmailValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadRecipientEmailValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadRecipientEmailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThreadRecipientEmailMultiError(errors)
	}

	return nil
}

// ThreadRecipientEmailMultiError is an error wrapping multiple validation
// errors returned by ThreadRecipientEmail.ValidateAll() if the designated
// constraints aren't met.
type ThreadRecipientEmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadRecipientEmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadRecipientEmailMultiError) AllErrors() []error { return m }

// ThreadRecipientEmailValidationError is the validation error returned by
// ThreadRecipientEmail.Validate if the designated constraints aren't met.
type ThreadRecipientEmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadRecipientEmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadRecipientEmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadRecipientEmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadRecipientEmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadRecipientEmailValidationError) ErrorName() string {
	return "ThreadRecipientEmailValidationError"
}

// Error satisfies the builtin error interface
func (e ThreadRecipientEmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadRecipientEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadRecipientEmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadRecipientEmailValidationError{}

// Validate checks the field values on ThreadRecipientUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThreadRecipientUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadRecipientUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadRecipientUserMultiError, or nil if none found.
func (m *ThreadRecipientUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadRecipientUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TargetId

	if m.GetUserId() < 0 {
		err := ThreadRecipientUserValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadRecipientUserValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadRecipientUserValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadRecipientUserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThreadRecipientUserMultiError(errors)
	}

	return nil
}

// ThreadRecipientUserMultiError is an error wrapping multiple validation
// errors returned by ThreadRecipientUser.ValidateAll() if the designated
// constraints aren't met.
type ThreadRecipientUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadRecipientUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadRecipientUserMultiError) AllErrors() []error { return m }

// ThreadRecipientUserValidationError is the validation error returned by
// ThreadRecipientUser.Validate if the designated constraints aren't met.
type ThreadRecipientUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadRecipientUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadRecipientUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadRecipientUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadRecipientUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadRecipientUserValidationError) ErrorName() string {
	return "ThreadRecipientUserValidationError"
}

// Error satisfies the builtin error interface
func (e ThreadRecipientUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadRecipientUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadRecipientUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadRecipientUserValidationError{}

// Validate checks the field values on ThreadStateEmail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThreadStateEmail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadStateEmail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadStateEmailMultiError, or nil if none found.
func (m *ThreadStateEmail) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadStateEmail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	// no validation rules for EmailId

	// no validation rules for Unread

	// no validation rules for Important

	// no validation rules for Favorite

	// no validation rules for Muted

	// no validation rules for Archived

	if m.LastRead != nil {

		if all {
			switch v := interface{}(m.GetLastRead()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadStateEmailValidationError{
						field:  "LastRead",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadStateEmailValidationError{
						field:  "LastRead",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastRead()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadStateEmailValidationError{
					field:  "LastRead",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThreadStateEmailMultiError(errors)
	}

	return nil
}

// ThreadStateEmailMultiError is an error wrapping multiple validation errors
// returned by ThreadStateEmail.ValidateAll() if the designated constraints
// aren't met.
type ThreadStateEmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadStateEmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadStateEmailMultiError) AllErrors() []error { return m }

// ThreadStateEmailValidationError is the validation error returned by
// ThreadStateEmail.Validate if the designated constraints aren't met.
type ThreadStateEmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadStateEmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadStateEmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadStateEmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadStateEmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadStateEmailValidationError) ErrorName() string { return "ThreadStateEmailValidationError" }

// Error satisfies the builtin error interface
func (e ThreadStateEmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadStateEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadStateEmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadStateEmailValidationError{}

// Validate checks the field values on ThreadStateUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThreadStateUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadStateUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadStateUserMultiError, or nil if none found.
func (m *ThreadStateUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadStateUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if m.GetUserId() < 0 {
		err := ThreadStateUserValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Unread

	// no validation rules for Important

	// no validation rules for Favorite

	// no validation rules for Muted

	// no validation rules for Archived

	if m.LastRead != nil {

		if all {
			switch v := interface{}(m.GetLastRead()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadStateUserValidationError{
						field:  "LastRead",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadStateUserValidationError{
						field:  "LastRead",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastRead()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadStateUserValidationError{
					field:  "LastRead",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThreadStateUserMultiError(errors)
	}

	return nil
}

// ThreadStateUserMultiError is an error wrapping multiple validation errors
// returned by ThreadStateUser.ValidateAll() if the designated constraints
// aren't met.
type ThreadStateUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadStateUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadStateUserMultiError) AllErrors() []error { return m }

// ThreadStateUserValidationError is the validation error returned by
// ThreadStateUser.Validate if the designated constraints aren't met.
type ThreadStateUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadStateUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadStateUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadStateUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadStateUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadStateUserValidationError) ErrorName() string { return "ThreadStateUserValidationError" }

// Error satisfies the builtin error interface
func (e ThreadStateUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadStateUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadStateUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadStateUserValidationError{}
