// Code generated by protoc-gen-customizerweb. DO NOT EDIT.
// source: resources/documents/documents.proto

import { DOC_CONTENT_TYPE } from './documents_pb';
import { DOC_ACCESS } from './documents_pb';
import { DOC_REFERENCE } from './documents_pb';
import { DOC_RELATION } from './documents_pb';

// DOC_CONTENT_TYPE
export class DOC_CONTENT_TYPE_Util {
    public static toEnumKey(input: DOC_CONTENT_TYPE): string | undefined {
        const index = Object.values(DOC_CONTENT_TYPE).indexOf(input);
        if (index <= -1) {
            return "N/A";
        }
        return Object.keys(DOC_CONTENT_TYPE)[index];
    }

    public static fromInt(input: Number): DOC_CONTENT_TYPE {
        switch (input) {
            case 0:
                return DOC_CONTENT_TYPE.HTML;
            
            case 1:
                return DOC_CONTENT_TYPE.PLAIN;
            }
        return DOC_CONTENT_TYPE.HTML;
    }

    public static fromString(input: String): DOC_CONTENT_TYPE {
        switch (input) {
            case 'HTML':
                return DOC_CONTENT_TYPE.HTML;
            
            case 'PLAIN':
                return DOC_CONTENT_TYPE.PLAIN;
            }
        return DOC_CONTENT_TYPE.HTML;
    }
}// DOC_ACCESS
export class DOC_ACCESS_Util {
    public static toEnumKey(input: DOC_ACCESS): string | undefined {
        const index = Object.values(DOC_ACCESS).indexOf(input);
        if (index <= -1) {
            return "N/A";
        }
        return Object.keys(DOC_ACCESS)[index];
    }

    public static fromInt(input: Number): DOC_ACCESS {
        switch (input) {
            case 0:
                return DOC_ACCESS.BLOCKED;
            
            case 1:
                return DOC_ACCESS.VIEW;
            
            case 2:
                return DOC_ACCESS.COMMENT;
            
            case 3:
                return DOC_ACCESS.ACCESS;
            
            case 4:
                return DOC_ACCESS.EDIT;
            }
        return DOC_ACCESS.BLOCKED;
    }

    public static fromString(input: String): DOC_ACCESS {
        switch (input) {
            case 'BLOCKED':
                return DOC_ACCESS.BLOCKED;
            
            case 'VIEW':
                return DOC_ACCESS.VIEW;
            
            case 'COMMENT':
                return DOC_ACCESS.COMMENT;
            
            case 'ACCESS':
                return DOC_ACCESS.ACCESS;
            
            case 'EDIT':
                return DOC_ACCESS.EDIT;
            }
        return DOC_ACCESS.BLOCKED;
    }
}// DOC_REFERENCE
export class DOC_REFERENCE_Util {
    public static toEnumKey(input: DOC_REFERENCE): string | undefined {
        const index = Object.values(DOC_REFERENCE).indexOf(input);
        if (index <= -1) {
            return "N/A";
        }
        return Object.keys(DOC_REFERENCE)[index];
    }

    public static fromInt(input: Number): DOC_REFERENCE {
        switch (input) {
            case 0:
                return DOC_REFERENCE.LINKED;
            
            case 1:
                return DOC_REFERENCE.SOLVES;
            
            case 2:
                return DOC_REFERENCE.CLOSES;
            
            case 3:
                return DOC_REFERENCE.DEPRECATES;
            }
        return DOC_REFERENCE.LINKED;
    }

    public static fromString(input: String): DOC_REFERENCE {
        switch (input) {
            case 'LINKED':
                return DOC_REFERENCE.LINKED;
            
            case 'SOLVES':
                return DOC_REFERENCE.SOLVES;
            
            case 'CLOSES':
                return DOC_REFERENCE.CLOSES;
            
            case 'DEPRECATES':
                return DOC_REFERENCE.DEPRECATES;
            }
        return DOC_REFERENCE.LINKED;
    }
}// DOC_RELATION
export class DOC_RELATION_Util {
    public static toEnumKey(input: DOC_RELATION): string | undefined {
        const index = Object.values(DOC_RELATION).indexOf(input);
        if (index <= -1) {
            return "N/A";
        }
        return Object.keys(DOC_RELATION)[index];
    }

    public static fromInt(input: Number): DOC_RELATION {
        switch (input) {
            case 0:
                return DOC_RELATION.MENTIONED;
            
            case 1:
                return DOC_RELATION.TARGETS;
            
            case 2:
                return DOC_RELATION.CAUSED;
            }
        return DOC_RELATION.MENTIONED;
    }

    public static fromString(input: String): DOC_RELATION {
        switch (input) {
            case 'MENTIONED':
                return DOC_RELATION.MENTIONED;
            
            case 'TARGETS':
                return DOC_RELATION.TARGETS;
            
            case 'CAUSED':
                return DOC_RELATION.CAUSED;
            }
        return DOC_RELATION.MENTIONED;
    }
}
