// source: common/userinfo/userinfo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.gen.common.userinfo.License', null, global);
goog.exportSymbol('proto.gen.common.userinfo.Props', null, global);
goog.exportSymbol('proto.gen.common.userinfo.ShortUser', null, global);
goog.exportSymbol('proto.gen.common.userinfo.User', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gen.common.userinfo.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gen.common.userinfo.User.repeatedFields_, null);
};
goog.inherits(proto.gen.common.userinfo.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gen.common.userinfo.User.displayName = 'proto.gen.common.userinfo.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gen.common.userinfo.License = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gen.common.userinfo.License, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gen.common.userinfo.License.displayName = 'proto.gen.common.userinfo.License';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gen.common.userinfo.Props = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gen.common.userinfo.Props, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gen.common.userinfo.Props.displayName = 'proto.gen.common.userinfo.Props';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gen.common.userinfo.ShortUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gen.common.userinfo.ShortUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gen.common.userinfo.ShortUser.displayName = 'proto.gen.common.userinfo.ShortUser';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gen.common.userinfo.User.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gen.common.userinfo.User.prototype.toObject = function(opt_includeInstance) {
  return proto.gen.common.userinfo.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gen.common.userinfo.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gen.common.userinfo.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    identifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    job: jspb.Message.getFieldWithDefault(msg, 3, ""),
    jobgrade: jspb.Message.getFieldWithDefault(msg, 4, 0),
    firstname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    dateofbirth: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sex: jspb.Message.getFieldWithDefault(msg, 8, ""),
    height: jspb.Message.getFieldWithDefault(msg, 9, ""),
    visum: jspb.Message.getFieldWithDefault(msg, 10, 0),
    playtime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    props: (f = msg.getProps()) && proto.gen.common.userinfo.Props.toObject(includeInstance, f),
    licensesList: jspb.Message.toObjectList(msg.getLicensesList(),
    proto.gen.common.userinfo.License.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gen.common.userinfo.User}
 */
proto.gen.common.userinfo.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gen.common.userinfo.User;
  return proto.gen.common.userinfo.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gen.common.userinfo.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gen.common.userinfo.User}
 */
proto.gen.common.userinfo.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJob(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobgrade(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateofbirth(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSex(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVisum(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaytime(value);
      break;
    case 12:
      var value = new proto.gen.common.userinfo.Props;
      reader.readMessage(value,proto.gen.common.userinfo.Props.deserializeBinaryFromReader);
      msg.setProps(value);
      break;
    case 13:
      var value = new proto.gen.common.userinfo.License;
      reader.readMessage(value,proto.gen.common.userinfo.License.deserializeBinaryFromReader);
      msg.addLicenses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gen.common.userinfo.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gen.common.userinfo.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gen.common.userinfo.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gen.common.userinfo.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJob();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getJobgrade();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDateofbirth();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSex();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getVisum();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPlaytime();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getProps();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.gen.common.userinfo.Props.serializeBinaryToWriter
    );
  }
  f = message.getLicensesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.gen.common.userinfo.License.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 userID = 1;
 * @return {number}
 */
proto.gen.common.userinfo.User.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string identifier = 2;
 * @return {string}
 */
proto.gen.common.userinfo.User.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string job = 3;
 * @return {string}
 */
proto.gen.common.userinfo.User.prototype.getJob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setJob = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 jobGrade = 4;
 * @return {number}
 */
proto.gen.common.userinfo.User.prototype.getJobgrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setJobgrade = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string firstname = 5;
 * @return {string}
 */
proto.gen.common.userinfo.User.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string lastname = 6;
 * @return {string}
 */
proto.gen.common.userinfo.User.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string dateofbirth = 7;
 * @return {string}
 */
proto.gen.common.userinfo.User.prototype.getDateofbirth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setDateofbirth = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sex = 8;
 * @return {string}
 */
proto.gen.common.userinfo.User.prototype.getSex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setSex = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string height = 9;
 * @return {string}
 */
proto.gen.common.userinfo.User.prototype.getHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 visum = 10;
 * @return {number}
 */
proto.gen.common.userinfo.User.prototype.getVisum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setVisum = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 playtime = 11;
 * @return {number}
 */
proto.gen.common.userinfo.User.prototype.getPlaytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.setPlaytime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional Props props = 12;
 * @return {?proto.gen.common.userinfo.Props}
 */
proto.gen.common.userinfo.User.prototype.getProps = function() {
  return /** @type{?proto.gen.common.userinfo.Props} */ (
    jspb.Message.getWrapperField(this, proto.gen.common.userinfo.Props, 12));
};


/**
 * @param {?proto.gen.common.userinfo.Props|undefined} value
 * @return {!proto.gen.common.userinfo.User} returns this
*/
proto.gen.common.userinfo.User.prototype.setProps = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.clearProps = function() {
  return this.setProps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gen.common.userinfo.User.prototype.hasProps = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated License licenses = 13;
 * @return {!Array<!proto.gen.common.userinfo.License>}
 */
proto.gen.common.userinfo.User.prototype.getLicensesList = function() {
  return /** @type{!Array<!proto.gen.common.userinfo.License>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gen.common.userinfo.License, 13));
};


/**
 * @param {!Array<!proto.gen.common.userinfo.License>} value
 * @return {!proto.gen.common.userinfo.User} returns this
*/
proto.gen.common.userinfo.User.prototype.setLicensesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.gen.common.userinfo.License=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gen.common.userinfo.License}
 */
proto.gen.common.userinfo.User.prototype.addLicenses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.gen.common.userinfo.License, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gen.common.userinfo.User} returns this
 */
proto.gen.common.userinfo.User.prototype.clearLicensesList = function() {
  return this.setLicensesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gen.common.userinfo.License.prototype.toObject = function(opt_includeInstance) {
  return proto.gen.common.userinfo.License.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gen.common.userinfo.License} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gen.common.userinfo.License.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gen.common.userinfo.License}
 */
proto.gen.common.userinfo.License.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gen.common.userinfo.License;
  return proto.gen.common.userinfo.License.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gen.common.userinfo.License} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gen.common.userinfo.License}
 */
proto.gen.common.userinfo.License.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gen.common.userinfo.License.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gen.common.userinfo.License.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gen.common.userinfo.License} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gen.common.userinfo.License.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.gen.common.userinfo.License.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.License} returns this
 */
proto.gen.common.userinfo.License.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gen.common.userinfo.Props.prototype.toObject = function(opt_includeInstance) {
  return proto.gen.common.userinfo.Props.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gen.common.userinfo.Props} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gen.common.userinfo.Props.toObject = function(includeInstance, msg) {
  var f, obj = {
    wanted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gen.common.userinfo.Props}
 */
proto.gen.common.userinfo.Props.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gen.common.userinfo.Props;
  return proto.gen.common.userinfo.Props.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gen.common.userinfo.Props} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gen.common.userinfo.Props}
 */
proto.gen.common.userinfo.Props.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWanted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gen.common.userinfo.Props.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gen.common.userinfo.Props.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gen.common.userinfo.Props} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gen.common.userinfo.Props.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWanted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool wanted = 1;
 * @return {boolean}
 */
proto.gen.common.userinfo.Props.prototype.getWanted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gen.common.userinfo.Props} returns this
 */
proto.gen.common.userinfo.Props.prototype.setWanted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gen.common.userinfo.ShortUser.prototype.toObject = function(opt_includeInstance) {
  return proto.gen.common.userinfo.ShortUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gen.common.userinfo.ShortUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gen.common.userinfo.ShortUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    identifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    job: jspb.Message.getFieldWithDefault(msg, 3, ""),
    jobgrade: jspb.Message.getFieldWithDefault(msg, 4, 0),
    firstname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gen.common.userinfo.ShortUser}
 */
proto.gen.common.userinfo.ShortUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gen.common.userinfo.ShortUser;
  return proto.gen.common.userinfo.ShortUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gen.common.userinfo.ShortUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gen.common.userinfo.ShortUser}
 */
proto.gen.common.userinfo.ShortUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJob(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobgrade(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gen.common.userinfo.ShortUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gen.common.userinfo.ShortUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gen.common.userinfo.ShortUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gen.common.userinfo.ShortUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJob();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getJobgrade();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 userID = 1;
 * @return {number}
 */
proto.gen.common.userinfo.ShortUser.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gen.common.userinfo.ShortUser} returns this
 */
proto.gen.common.userinfo.ShortUser.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string identifier = 2;
 * @return {string}
 */
proto.gen.common.userinfo.ShortUser.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.ShortUser} returns this
 */
proto.gen.common.userinfo.ShortUser.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string job = 3;
 * @return {string}
 */
proto.gen.common.userinfo.ShortUser.prototype.getJob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.ShortUser} returns this
 */
proto.gen.common.userinfo.ShortUser.prototype.setJob = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 jobGrade = 4;
 * @return {number}
 */
proto.gen.common.userinfo.ShortUser.prototype.getJobgrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gen.common.userinfo.ShortUser} returns this
 */
proto.gen.common.userinfo.ShortUser.prototype.setJobgrade = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string firstname = 5;
 * @return {string}
 */
proto.gen.common.userinfo.ShortUser.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.ShortUser} returns this
 */
proto.gen.common.userinfo.ShortUser.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string lastname = 6;
 * @return {string}
 */
proto.gen.common.userinfo.ShortUser.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.gen.common.userinfo.ShortUser} returns this
 */
proto.gen.common.userinfo.ShortUser.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.gen.common.userinfo);
