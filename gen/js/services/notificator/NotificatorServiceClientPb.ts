/**
 * @fileoverview gRPC-Web generated client stub for services.notificator
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: services/notificator/notificator.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as services_notificator_notificator_pb from '../../services/notificator/notificator_pb';


export class NotificatorServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetNotifications = new grpcWeb.MethodDescriptor(
    '/services.notificator.NotificatorService/GetNotifications',
    grpcWeb.MethodType.UNARY,
    services_notificator_notificator_pb.GetNotificationsRequest,
    services_notificator_notificator_pb.GetNotificationsResponse,
    (request: services_notificator_notificator_pb.GetNotificationsRequest) => {
      return request.serializeBinary();
    },
    services_notificator_notificator_pb.GetNotificationsResponse.deserializeBinary
  );

  getNotifications(
    request: services_notificator_notificator_pb.GetNotificationsRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_notificator_notificator_pb.GetNotificationsResponse>;

  getNotifications(
    request: services_notificator_notificator_pb.GetNotificationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_notificator_notificator_pb.GetNotificationsResponse) => void): grpcWeb.ClientReadableStream<services_notificator_notificator_pb.GetNotificationsResponse>;

  getNotifications(
    request: services_notificator_notificator_pb.GetNotificationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_notificator_notificator_pb.GetNotificationsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.notificator.NotificatorService/GetNotifications',
        request,
        metadata || {},
        this.methodDescriptorGetNotifications,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.notificator.NotificatorService/GetNotifications',
    request,
    metadata || {},
    this.methodDescriptorGetNotifications);
  }

  methodDescriptorReadNotifications = new grpcWeb.MethodDescriptor(
    '/services.notificator.NotificatorService/ReadNotifications',
    grpcWeb.MethodType.UNARY,
    services_notificator_notificator_pb.ReadNotificationsRequest,
    services_notificator_notificator_pb.ReadNotificationsResponse,
    (request: services_notificator_notificator_pb.ReadNotificationsRequest) => {
      return request.serializeBinary();
    },
    services_notificator_notificator_pb.ReadNotificationsResponse.deserializeBinary
  );

  readNotifications(
    request: services_notificator_notificator_pb.ReadNotificationsRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_notificator_notificator_pb.ReadNotificationsResponse>;

  readNotifications(
    request: services_notificator_notificator_pb.ReadNotificationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_notificator_notificator_pb.ReadNotificationsResponse) => void): grpcWeb.ClientReadableStream<services_notificator_notificator_pb.ReadNotificationsResponse>;

  readNotifications(
    request: services_notificator_notificator_pb.ReadNotificationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_notificator_notificator_pb.ReadNotificationsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.notificator.NotificatorService/ReadNotifications',
        request,
        metadata || {},
        this.methodDescriptorReadNotifications,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.notificator.NotificatorService/ReadNotifications',
    request,
    metadata || {},
    this.methodDescriptorReadNotifications);
  }

  methodDescriptorStream = new grpcWeb.MethodDescriptor(
    '/services.notificator.NotificatorService/Stream',
    grpcWeb.MethodType.SERVER_STREAMING,
    services_notificator_notificator_pb.StreamRequest,
    services_notificator_notificator_pb.StreamResponse,
    (request: services_notificator_notificator_pb.StreamRequest) => {
      return request.serializeBinary();
    },
    services_notificator_notificator_pb.StreamResponse.deserializeBinary
  );

  stream(
    request: services_notificator_notificator_pb.StreamRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<services_notificator_notificator_pb.StreamResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/services.notificator.NotificatorService/Stream',
      request,
      metadata || {},
      this.methodDescriptorStream);
  }

}

