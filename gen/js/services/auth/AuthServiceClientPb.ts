/**
 * @fileoverview gRPC-Web generated client stub for services.auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: services/auth/auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as services_auth_auth_pb from '../../services/auth/auth_pb';


export class AuthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/Login',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.LoginRequest,
    services_auth_auth_pb.LoginResponse,
    (request: services_auth_auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.LoginResponse.deserializeBinary
  );

  login(
    request: services_auth_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.LoginResponse>;

  login(
    request: services_auth_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.LoginResponse>;

  login(
    request: services_auth_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorLogout = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/Logout',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.LogoutRequest,
    services_auth_auth_pb.LogoutResponse,
    (request: services_auth_auth_pb.LogoutRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.LogoutResponse.deserializeBinary
  );

  logout(
    request: services_auth_auth_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.LogoutResponse>;

  logout(
    request: services_auth_auth_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.LogoutResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.LogoutResponse>;

  logout(
    request: services_auth_auth_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.LogoutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/Logout',
        request,
        metadata || {},
        this.methodDescriptorLogout,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/Logout',
    request,
    metadata || {},
    this.methodDescriptorLogout);
  }

  methodDescriptorCheckToken = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/CheckToken',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.CheckTokenRequest,
    services_auth_auth_pb.CheckTokenResponse,
    (request: services_auth_auth_pb.CheckTokenRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.CheckTokenResponse.deserializeBinary
  );

  checkToken(
    request: services_auth_auth_pb.CheckTokenRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.CheckTokenResponse>;

  checkToken(
    request: services_auth_auth_pb.CheckTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.CheckTokenResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.CheckTokenResponse>;

  checkToken(
    request: services_auth_auth_pb.CheckTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.CheckTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/CheckToken',
        request,
        metadata || {},
        this.methodDescriptorCheckToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/CheckToken',
    request,
    metadata || {},
    this.methodDescriptorCheckToken);
  }

  methodDescriptorCreateAccount = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/CreateAccount',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.CreateAccountRequest,
    services_auth_auth_pb.CreateAccountResponse,
    (request: services_auth_auth_pb.CreateAccountRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.CreateAccountResponse.deserializeBinary
  );

  createAccount(
    request: services_auth_auth_pb.CreateAccountRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.CreateAccountResponse>;

  createAccount(
    request: services_auth_auth_pb.CreateAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.CreateAccountResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.CreateAccountResponse>;

  createAccount(
    request: services_auth_auth_pb.CreateAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.CreateAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/CreateAccount',
        request,
        metadata || {},
        this.methodDescriptorCreateAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/CreateAccount',
    request,
    metadata || {},
    this.methodDescriptorCreateAccount);
  }

  methodDescriptorChangePassword = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/ChangePassword',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.ChangePasswordRequest,
    services_auth_auth_pb.ChangePasswordResponse,
    (request: services_auth_auth_pb.ChangePasswordRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.ChangePasswordResponse.deserializeBinary
  );

  changePassword(
    request: services_auth_auth_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.ChangePasswordResponse>;

  changePassword(
    request: services_auth_auth_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.ChangePasswordResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.ChangePasswordResponse>;

  changePassword(
    request: services_auth_auth_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.ChangePasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/ChangePassword',
        request,
        metadata || {},
        this.methodDescriptorChangePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/ChangePassword',
    request,
    metadata || {},
    this.methodDescriptorChangePassword);
  }

  methodDescriptorForgotPassword = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/ForgotPassword',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.ForgotPasswordRequest,
    services_auth_auth_pb.ForgotPasswordResponse,
    (request: services_auth_auth_pb.ForgotPasswordRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.ForgotPasswordResponse.deserializeBinary
  );

  forgotPassword(
    request: services_auth_auth_pb.ForgotPasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.ForgotPasswordResponse>;

  forgotPassword(
    request: services_auth_auth_pb.ForgotPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.ForgotPasswordResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.ForgotPasswordResponse>;

  forgotPassword(
    request: services_auth_auth_pb.ForgotPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.ForgotPasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/ForgotPassword',
        request,
        metadata || {},
        this.methodDescriptorForgotPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/ForgotPassword',
    request,
    metadata || {},
    this.methodDescriptorForgotPassword);
  }

  methodDescriptorGetCharacters = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/GetCharacters',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.GetCharactersRequest,
    services_auth_auth_pb.GetCharactersResponse,
    (request: services_auth_auth_pb.GetCharactersRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.GetCharactersResponse.deserializeBinary
  );

  getCharacters(
    request: services_auth_auth_pb.GetCharactersRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.GetCharactersResponse>;

  getCharacters(
    request: services_auth_auth_pb.GetCharactersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.GetCharactersResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.GetCharactersResponse>;

  getCharacters(
    request: services_auth_auth_pb.GetCharactersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.GetCharactersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/GetCharacters',
        request,
        metadata || {},
        this.methodDescriptorGetCharacters,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/GetCharacters',
    request,
    metadata || {},
    this.methodDescriptorGetCharacters);
  }

  methodDescriptorChooseCharacter = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/ChooseCharacter',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.ChooseCharacterRequest,
    services_auth_auth_pb.ChooseCharacterResponse,
    (request: services_auth_auth_pb.ChooseCharacterRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.ChooseCharacterResponse.deserializeBinary
  );

  chooseCharacter(
    request: services_auth_auth_pb.ChooseCharacterRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.ChooseCharacterResponse>;

  chooseCharacter(
    request: services_auth_auth_pb.ChooseCharacterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.ChooseCharacterResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.ChooseCharacterResponse>;

  chooseCharacter(
    request: services_auth_auth_pb.ChooseCharacterRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.ChooseCharacterResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/ChooseCharacter',
        request,
        metadata || {},
        this.methodDescriptorChooseCharacter,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/ChooseCharacter',
    request,
    metadata || {},
    this.methodDescriptorChooseCharacter);
  }

  methodDescriptorGetAccountInfo = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/GetAccountInfo',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.GetAccountInfoRequest,
    services_auth_auth_pb.GetAccountInfoResponse,
    (request: services_auth_auth_pb.GetAccountInfoRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.GetAccountInfoResponse.deserializeBinary
  );

  getAccountInfo(
    request: services_auth_auth_pb.GetAccountInfoRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.GetAccountInfoResponse>;

  getAccountInfo(
    request: services_auth_auth_pb.GetAccountInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.GetAccountInfoResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.GetAccountInfoResponse>;

  getAccountInfo(
    request: services_auth_auth_pb.GetAccountInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.GetAccountInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/GetAccountInfo',
        request,
        metadata || {},
        this.methodDescriptorGetAccountInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/GetAccountInfo',
    request,
    metadata || {},
    this.methodDescriptorGetAccountInfo);
  }

  methodDescriptorDeleteOAuth2Connection = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/DeleteOAuth2Connection',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.DeleteOAuth2ConnectionRequest,
    services_auth_auth_pb.DeleteOAuth2ConnectionResponse,
    (request: services_auth_auth_pb.DeleteOAuth2ConnectionRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.DeleteOAuth2ConnectionResponse.deserializeBinary
  );

  deleteOAuth2Connection(
    request: services_auth_auth_pb.DeleteOAuth2ConnectionRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.DeleteOAuth2ConnectionResponse>;

  deleteOAuth2Connection(
    request: services_auth_auth_pb.DeleteOAuth2ConnectionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.DeleteOAuth2ConnectionResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.DeleteOAuth2ConnectionResponse>;

  deleteOAuth2Connection(
    request: services_auth_auth_pb.DeleteOAuth2ConnectionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.DeleteOAuth2ConnectionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/DeleteOAuth2Connection',
        request,
        metadata || {},
        this.methodDescriptorDeleteOAuth2Connection,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/DeleteOAuth2Connection',
    request,
    metadata || {},
    this.methodDescriptorDeleteOAuth2Connection);
  }

  methodDescriptorSetJob = new grpcWeb.MethodDescriptor(
    '/services.auth.AuthService/SetJob',
    grpcWeb.MethodType.UNARY,
    services_auth_auth_pb.SetJobRequest,
    services_auth_auth_pb.SetJobResponse,
    (request: services_auth_auth_pb.SetJobRequest) => {
      return request.serializeBinary();
    },
    services_auth_auth_pb.SetJobResponse.deserializeBinary
  );

  setJob(
    request: services_auth_auth_pb.SetJobRequest,
    metadata: grpcWeb.Metadata | null): Promise<services_auth_auth_pb.SetJobResponse>;

  setJob(
    request: services_auth_auth_pb.SetJobRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.SetJobResponse) => void): grpcWeb.ClientReadableStream<services_auth_auth_pb.SetJobResponse>;

  setJob(
    request: services_auth_auth_pb.SetJobRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: services_auth_auth_pb.SetJobResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.auth.AuthService/SetJob',
        request,
        metadata || {},
        this.methodDescriptorSetJob,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.auth.AuthService/SetJob',
    request,
    metadata || {},
    this.methodDescriptorSetJob);
  }

}

