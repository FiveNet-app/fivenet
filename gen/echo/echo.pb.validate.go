// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: echo/echo.proto

package echo

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EchoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EchoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EchoRequestMultiError, or
// nil if none found.
func (m *EchoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Value

	if len(errors) > 0 {
		return EchoRequestMultiError(errors)
	}

	return nil
}

// EchoRequestMultiError is an error wrapping multiple validation errors
// returned by EchoRequest.ValidateAll() if the designated constraints aren't met.
type EchoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoRequestMultiError) AllErrors() []error { return m }

// EchoRequestValidationError is the validation error returned by
// EchoRequest.Validate if the designated constraints aren't met.
type EchoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoRequestValidationError) ErrorName() string { return "EchoRequestValidationError" }

// Error satisfies the builtin error interface
func (e EchoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoRequestValidationError{}

// Validate checks the field values on EchoResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EchoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EchoResponseMultiError, or
// nil if none found.
func (m *EchoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Value

	if len(errors) > 0 {
		return EchoResponseMultiError(errors)
	}

	return nil
}

// EchoResponseMultiError is an error wrapping multiple validation errors
// returned by EchoResponse.ValidateAll() if the designated constraints aren't met.
type EchoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoResponseMultiError) AllErrors() []error { return m }

// EchoResponseValidationError is the validation error returned by
// EchoResponse.Validate if the designated constraints aren't met.
type EchoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoResponseValidationError) ErrorName() string { return "EchoResponseValidationError" }

// Error satisfies the builtin error interface
func (e EchoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoResponseValidationError{}

// Validate checks the field values on ServerStreamingEchoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerStreamingEchoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerStreamingEchoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerStreamingEchoRequestMultiError, or nil if none found.
func (m *ServerStreamingEchoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerStreamingEchoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for MessageCount

	// no validation rules for MessageInterval

	if len(errors) > 0 {
		return ServerStreamingEchoRequestMultiError(errors)
	}

	return nil
}

// ServerStreamingEchoRequestMultiError is an error wrapping multiple
// validation errors returned by ServerStreamingEchoRequest.ValidateAll() if
// the designated constraints aren't met.
type ServerStreamingEchoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerStreamingEchoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerStreamingEchoRequestMultiError) AllErrors() []error { return m }

// ServerStreamingEchoRequestValidationError is the validation error returned
// by ServerStreamingEchoRequest.Validate if the designated constraints aren't met.
type ServerStreamingEchoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerStreamingEchoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerStreamingEchoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerStreamingEchoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerStreamingEchoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerStreamingEchoRequestValidationError) ErrorName() string {
	return "ServerStreamingEchoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerStreamingEchoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerStreamingEchoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerStreamingEchoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerStreamingEchoRequestValidationError{}

// Validate checks the field values on ServerStreamingEchoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerStreamingEchoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerStreamingEchoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerStreamingEchoResponseMultiError, or nil if none found.
func (m *ServerStreamingEchoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerStreamingEchoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ServerStreamingEchoResponseMultiError(errors)
	}

	return nil
}

// ServerStreamingEchoResponseMultiError is an error wrapping multiple
// validation errors returned by ServerStreamingEchoResponse.ValidateAll() if
// the designated constraints aren't met.
type ServerStreamingEchoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerStreamingEchoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerStreamingEchoResponseMultiError) AllErrors() []error { return m }

// ServerStreamingEchoResponseValidationError is the validation error returned
// by ServerStreamingEchoResponse.Validate if the designated constraints
// aren't met.
type ServerStreamingEchoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerStreamingEchoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerStreamingEchoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerStreamingEchoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerStreamingEchoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerStreamingEchoResponseValidationError) ErrorName() string {
	return "ServerStreamingEchoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerStreamingEchoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerStreamingEchoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerStreamingEchoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerStreamingEchoResponseValidationError{}

// Validate checks the field values on EchoStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EchoStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EchoStatusRequestMultiError, or nil if none found.
func (m *EchoStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return EchoStatusRequestMultiError(errors)
	}

	return nil
}

// EchoStatusRequestMultiError is an error wrapping multiple validation errors
// returned by EchoStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type EchoStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoStatusRequestMultiError) AllErrors() []error { return m }

// EchoStatusRequestValidationError is the validation error returned by
// EchoStatusRequest.Validate if the designated constraints aren't met.
type EchoStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoStatusRequestValidationError) ErrorName() string {
	return "EchoStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EchoStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoStatusRequestValidationError{}

// Validate checks the field values on EchoStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EchoStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EchoStatusResponseMultiError, or nil if none found.
func (m *EchoStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return EchoStatusResponseMultiError(errors)
	}

	return nil
}

// EchoStatusResponseMultiError is an error wrapping multiple validation errors
// returned by EchoStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type EchoStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoStatusResponseMultiError) AllErrors() []error { return m }

// EchoStatusResponseValidationError is the validation error returned by
// EchoStatusResponse.Validate if the designated constraints aren't met.
type EchoStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoStatusResponseValidationError) ErrorName() string {
	return "EchoStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EchoStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoStatusResponseValidationError{}
