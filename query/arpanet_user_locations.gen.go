// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/galexrt/arpanet/model"
)

func newUserLocation(db *gorm.DB, opts ...gen.DOOption) userLocation {
	_userLocation := userLocation{}

	_userLocation.userLocationDo.UseDB(db, opts...)
	_userLocation.userLocationDo.UseModel(&model.UserLocation{})

	tableName := _userLocation.userLocationDo.TableName()
	_userLocation.ALL = field.NewAsterisk(tableName)
	_userLocation.Identifier = field.NewString(tableName, "identifier")
	_userLocation.Job = field.NewString(tableName, "job")
	_userLocation.X = field.NewFloat32(tableName, "x")
	_userLocation.Y = field.NewFloat32(tableName, "y")
	_userLocation.Hidden = field.NewBool(tableName, "hidden")
	_userLocation.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userLocation.fillFieldMap()

	return _userLocation
}

type userLocation struct {
	userLocationDo

	ALL        field.Asterisk
	Identifier field.String
	Job        field.String
	X          field.Float32
	Y          field.Float32
	Hidden     field.Bool
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (u userLocation) Table(newTableName string) *userLocation {
	u.userLocationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLocation) As(alias string) *userLocation {
	u.userLocationDo.DO = *(u.userLocationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLocation) updateTableName(table string) *userLocation {
	u.ALL = field.NewAsterisk(table)
	u.Identifier = field.NewString(table, "identifier")
	u.Job = field.NewString(table, "job")
	u.X = field.NewFloat32(table, "x")
	u.Y = field.NewFloat32(table, "y")
	u.Hidden = field.NewBool(table, "hidden")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userLocation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLocation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["identifier"] = u.Identifier
	u.fieldMap["job"] = u.Job
	u.fieldMap["x"] = u.X
	u.fieldMap["y"] = u.Y
	u.fieldMap["hidden"] = u.Hidden
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userLocation) clone(db *gorm.DB) userLocation {
	u.userLocationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLocation) replaceDB(db *gorm.DB) userLocation {
	u.userLocationDo.ReplaceDB(db)
	return u
}

type userLocationDo struct{ gen.DO }

type IUserLocationDo interface {
	gen.SubQuery
	Debug() IUserLocationDo
	WithContext(ctx context.Context) IUserLocationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLocationDo
	WriteDB() IUserLocationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLocationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLocationDo
	Not(conds ...gen.Condition) IUserLocationDo
	Or(conds ...gen.Condition) IUserLocationDo
	Select(conds ...field.Expr) IUserLocationDo
	Where(conds ...gen.Condition) IUserLocationDo
	Order(conds ...field.Expr) IUserLocationDo
	Distinct(cols ...field.Expr) IUserLocationDo
	Omit(cols ...field.Expr) IUserLocationDo
	Join(table schema.Tabler, on ...field.Expr) IUserLocationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLocationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLocationDo
	Group(cols ...field.Expr) IUserLocationDo
	Having(conds ...gen.Condition) IUserLocationDo
	Limit(limit int) IUserLocationDo
	Offset(offset int) IUserLocationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLocationDo
	Unscoped() IUserLocationDo
	Create(values ...*model.UserLocation) error
	CreateInBatches(values []*model.UserLocation, batchSize int) error
	Save(values ...*model.UserLocation) error
	First() (*model.UserLocation, error)
	Take() (*model.UserLocation, error)
	Last() (*model.UserLocation, error)
	Find() ([]*model.UserLocation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLocation, err error)
	FindInBatches(result *[]*model.UserLocation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserLocation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLocationDo
	Assign(attrs ...field.AssignExpr) IUserLocationDo
	Joins(fields ...field.RelationField) IUserLocationDo
	Preload(fields ...field.RelationField) IUserLocationDo
	FirstOrInit() (*model.UserLocation, error)
	FirstOrCreate() (*model.UserLocation, error)
	FindByPage(offset int, limit int) (result []*model.UserLocation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLocationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLocationDo) Debug() IUserLocationDo {
	return u.withDO(u.DO.Debug())
}

func (u userLocationDo) WithContext(ctx context.Context) IUserLocationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLocationDo) ReadDB() IUserLocationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLocationDo) WriteDB() IUserLocationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLocationDo) Session(config *gorm.Session) IUserLocationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLocationDo) Clauses(conds ...clause.Expression) IUserLocationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLocationDo) Returning(value interface{}, columns ...string) IUserLocationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLocationDo) Not(conds ...gen.Condition) IUserLocationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLocationDo) Or(conds ...gen.Condition) IUserLocationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLocationDo) Select(conds ...field.Expr) IUserLocationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLocationDo) Where(conds ...gen.Condition) IUserLocationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLocationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserLocationDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userLocationDo) Order(conds ...field.Expr) IUserLocationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLocationDo) Distinct(cols ...field.Expr) IUserLocationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLocationDo) Omit(cols ...field.Expr) IUserLocationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLocationDo) Join(table schema.Tabler, on ...field.Expr) IUserLocationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLocationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLocationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLocationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLocationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLocationDo) Group(cols ...field.Expr) IUserLocationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLocationDo) Having(conds ...gen.Condition) IUserLocationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLocationDo) Limit(limit int) IUserLocationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLocationDo) Offset(offset int) IUserLocationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLocationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLocationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLocationDo) Unscoped() IUserLocationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLocationDo) Create(values ...*model.UserLocation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLocationDo) CreateInBatches(values []*model.UserLocation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLocationDo) Save(values ...*model.UserLocation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLocationDo) First() (*model.UserLocation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLocation), nil
	}
}

func (u userLocationDo) Take() (*model.UserLocation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLocation), nil
	}
}

func (u userLocationDo) Last() (*model.UserLocation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLocation), nil
	}
}

func (u userLocationDo) Find() ([]*model.UserLocation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLocation), err
}

func (u userLocationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLocation, err error) {
	buf := make([]*model.UserLocation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLocationDo) FindInBatches(result *[]*model.UserLocation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLocationDo) Attrs(attrs ...field.AssignExpr) IUserLocationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLocationDo) Assign(attrs ...field.AssignExpr) IUserLocationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLocationDo) Joins(fields ...field.RelationField) IUserLocationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLocationDo) Preload(fields ...field.RelationField) IUserLocationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLocationDo) FirstOrInit() (*model.UserLocation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLocation), nil
	}
}

func (u userLocationDo) FirstOrCreate() (*model.UserLocation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLocation), nil
	}
}

func (u userLocationDo) FindByPage(offset int, limit int) (result []*model.UserLocation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLocationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLocationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLocationDo) Delete(models ...*model.UserLocation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLocationDo) withDO(do gen.Dao) *userLocationDo {
	u.DO = *do.(*gen.DO)
	return u
}
