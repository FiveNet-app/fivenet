//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ArpanetDocumentsCategories = newArpanetDocumentsCategoriesTable("", "fivenet_documents_categories", "")

type fivenetDocumentsCategoriesTable struct {
	mysql.Table

	//Columns
	ID          mysql.ColumnInteger
	Name        mysql.ColumnString
	Description mysql.ColumnString
	Job         mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ArpanetDocumentsCategoriesTable struct {
	fivenetDocumentsCategoriesTable

	NEW fivenetDocumentsCategoriesTable
}

// AS creates new ArpanetDocumentsCategoriesTable with assigned alias
func (a ArpanetDocumentsCategoriesTable) AS(alias string) *ArpanetDocumentsCategoriesTable {
	return newArpanetDocumentsCategoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArpanetDocumentsCategoriesTable with assigned schema name
func (a ArpanetDocumentsCategoriesTable) FromSchema(schemaName string) *ArpanetDocumentsCategoriesTable {
	return newArpanetDocumentsCategoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArpanetDocumentsCategoriesTable with assigned table prefix
func (a ArpanetDocumentsCategoriesTable) WithPrefix(prefix string) *ArpanetDocumentsCategoriesTable {
	return newArpanetDocumentsCategoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArpanetDocumentsCategoriesTable with assigned table suffix
func (a ArpanetDocumentsCategoriesTable) WithSuffix(suffix string) *ArpanetDocumentsCategoriesTable {
	return newArpanetDocumentsCategoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArpanetDocumentsCategoriesTable(schemaName, tableName, alias string) *ArpanetDocumentsCategoriesTable {
	return &ArpanetDocumentsCategoriesTable{
		fivenetDocumentsCategoriesTable: newArpanetDocumentsCategoriesTableImpl(schemaName, tableName, alias),
		NEW:                             newArpanetDocumentsCategoriesTableImpl("", "new", ""),
	}
}

func newArpanetDocumentsCategoriesTableImpl(schemaName, tableName, alias string) fivenetDocumentsCategoriesTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		NameColumn        = mysql.StringColumn("name")
		DescriptionColumn = mysql.StringColumn("description")
		JobColumn         = mysql.StringColumn("job")
		allColumns        = mysql.ColumnList{IDColumn, NameColumn, DescriptionColumn, JobColumn}
		mutableColumns    = mysql.ColumnList{NameColumn, DescriptionColumn, JobColumn}
	)

	return fivenetDocumentsCategoriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Job:         JobColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
