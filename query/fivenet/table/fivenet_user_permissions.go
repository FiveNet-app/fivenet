//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetUserPermissions = newFivenetUserPermissionsTable("", "fivenet_user_permissions", "")

type fivenetUserPermissionsTable struct {
	mysql.Table

	// Columns
	UserID       mysql.ColumnInteger
	PermissionID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetUserPermissionsTable struct {
	fivenetUserPermissionsTable

	NEW fivenetUserPermissionsTable
}

// AS creates new FivenetUserPermissionsTable with assigned alias
func (a FivenetUserPermissionsTable) AS(alias string) *FivenetUserPermissionsTable {
	return newFivenetUserPermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetUserPermissionsTable with assigned schema name
func (a FivenetUserPermissionsTable) FromSchema(schemaName string) *FivenetUserPermissionsTable {
	return newFivenetUserPermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetUserPermissionsTable with assigned table prefix
func (a FivenetUserPermissionsTable) WithPrefix(prefix string) *FivenetUserPermissionsTable {
	return newFivenetUserPermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetUserPermissionsTable with assigned table suffix
func (a FivenetUserPermissionsTable) WithSuffix(suffix string) *FivenetUserPermissionsTable {
	return newFivenetUserPermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetUserPermissionsTable(schemaName, tableName, alias string) *FivenetUserPermissionsTable {
	return &FivenetUserPermissionsTable{
		fivenetUserPermissionsTable: newFivenetUserPermissionsTableImpl(schemaName, tableName, alias),
		NEW:                         newFivenetUserPermissionsTableImpl("", "new", ""),
	}
}

func newFivenetUserPermissionsTableImpl(schemaName, tableName, alias string) fivenetUserPermissionsTable {
	var (
		UserIDColumn       = mysql.IntegerColumn("user_id")
		PermissionIDColumn = mysql.IntegerColumn("permission_id")
		allColumns         = mysql.ColumnList{UserIDColumn, PermissionIDColumn}
		mutableColumns     = mysql.ColumnList{}
	)

	return fivenetUserPermissionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:       UserIDColumn,
		PermissionID: PermissionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
