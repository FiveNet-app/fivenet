//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetQualificationsExamResponses = newFivenetQualificationsExamResponsesTable("", "fivenet_qualifications_exam_responses", "")

type fivenetQualificationsExamResponsesTable struct {
	mysql.Table

	// Columns
	UserID          mysql.ColumnInteger
	QualificationID mysql.ColumnInteger
	CreatedAt       mysql.ColumnTimestamp
	StartedAt       mysql.ColumnTimestamp
	EndedAt         mysql.ColumnTimestamp
	Responses       mysql.ColumnString
	Closed          mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetQualificationsExamResponsesTable struct {
	fivenetQualificationsExamResponsesTable

	NEW fivenetQualificationsExamResponsesTable
}

// AS creates new FivenetQualificationsExamResponsesTable with assigned alias
func (a FivenetQualificationsExamResponsesTable) AS(alias string) *FivenetQualificationsExamResponsesTable {
	return newFivenetQualificationsExamResponsesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetQualificationsExamResponsesTable with assigned schema name
func (a FivenetQualificationsExamResponsesTable) FromSchema(schemaName string) *FivenetQualificationsExamResponsesTable {
	return newFivenetQualificationsExamResponsesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetQualificationsExamResponsesTable with assigned table prefix
func (a FivenetQualificationsExamResponsesTable) WithPrefix(prefix string) *FivenetQualificationsExamResponsesTable {
	return newFivenetQualificationsExamResponsesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetQualificationsExamResponsesTable with assigned table suffix
func (a FivenetQualificationsExamResponsesTable) WithSuffix(suffix string) *FivenetQualificationsExamResponsesTable {
	return newFivenetQualificationsExamResponsesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetQualificationsExamResponsesTable(schemaName, tableName, alias string) *FivenetQualificationsExamResponsesTable {
	return &FivenetQualificationsExamResponsesTable{
		fivenetQualificationsExamResponsesTable: newFivenetQualificationsExamResponsesTableImpl(schemaName, tableName, alias),
		NEW:                                     newFivenetQualificationsExamResponsesTableImpl("", "new", ""),
	}
}

func newFivenetQualificationsExamResponsesTableImpl(schemaName, tableName, alias string) fivenetQualificationsExamResponsesTable {
	var (
		UserIDColumn          = mysql.IntegerColumn("user_id")
		QualificationIDColumn = mysql.IntegerColumn("qualification_id")
		CreatedAtColumn       = mysql.TimestampColumn("created_at")
		StartedAtColumn       = mysql.TimestampColumn("started_at")
		EndedAtColumn         = mysql.TimestampColumn("ended_at")
		ResponsesColumn       = mysql.StringColumn("responses")
		ClosedColumn          = mysql.BoolColumn("closed")
		allColumns            = mysql.ColumnList{UserIDColumn, QualificationIDColumn, CreatedAtColumn, StartedAtColumn, EndedAtColumn, ResponsesColumn, ClosedColumn}
		mutableColumns        = mysql.ColumnList{CreatedAtColumn, StartedAtColumn, EndedAtColumn, ResponsesColumn, ClosedColumn}
	)

	return fivenetQualificationsExamResponsesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:          UserIDColumn,
		QualificationID: QualificationIDColumn,
		CreatedAt:       CreatedAtColumn,
		StartedAt:       StartedAtColumn,
		EndedAt:         EndedAtColumn,
		Responses:       ResponsesColumn,
		Closed:          ClosedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
