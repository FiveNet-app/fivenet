//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ArpanetDocumentsReferences = newArpanetDocumentsReferencesTable("", "fivenet_documents_references", "")

type fivenetDocumentsReferencesTable struct {
	mysql.Table

	//Columns
	ID               mysql.ColumnInteger
	CreatedAt        mysql.ColumnTimestamp
	DeletedAt        mysql.ColumnTimestamp
	SourceDocumentID mysql.ColumnInteger
	Reference        mysql.ColumnInteger
	TargetDocumentID mysql.ColumnInteger
	CreatorID        mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ArpanetDocumentsReferencesTable struct {
	fivenetDocumentsReferencesTable

	NEW fivenetDocumentsReferencesTable
}

// AS creates new ArpanetDocumentsReferencesTable with assigned alias
func (a ArpanetDocumentsReferencesTable) AS(alias string) *ArpanetDocumentsReferencesTable {
	return newArpanetDocumentsReferencesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArpanetDocumentsReferencesTable with assigned schema name
func (a ArpanetDocumentsReferencesTable) FromSchema(schemaName string) *ArpanetDocumentsReferencesTable {
	return newArpanetDocumentsReferencesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArpanetDocumentsReferencesTable with assigned table prefix
func (a ArpanetDocumentsReferencesTable) WithPrefix(prefix string) *ArpanetDocumentsReferencesTable {
	return newArpanetDocumentsReferencesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArpanetDocumentsReferencesTable with assigned table suffix
func (a ArpanetDocumentsReferencesTable) WithSuffix(suffix string) *ArpanetDocumentsReferencesTable {
	return newArpanetDocumentsReferencesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArpanetDocumentsReferencesTable(schemaName, tableName, alias string) *ArpanetDocumentsReferencesTable {
	return &ArpanetDocumentsReferencesTable{
		fivenetDocumentsReferencesTable: newArpanetDocumentsReferencesTableImpl(schemaName, tableName, alias),
		NEW:                             newArpanetDocumentsReferencesTableImpl("", "new", ""),
	}
}

func newArpanetDocumentsReferencesTableImpl(schemaName, tableName, alias string) fivenetDocumentsReferencesTable {
	var (
		IDColumn               = mysql.IntegerColumn("id")
		CreatedAtColumn        = mysql.TimestampColumn("created_at")
		DeletedAtColumn        = mysql.TimestampColumn("deleted_at")
		SourceDocumentIDColumn = mysql.IntegerColumn("source_document_id")
		ReferenceColumn        = mysql.IntegerColumn("reference")
		TargetDocumentIDColumn = mysql.IntegerColumn("target_document_id")
		CreatorIDColumn        = mysql.IntegerColumn("creator_id")
		allColumns             = mysql.ColumnList{IDColumn, CreatedAtColumn, DeletedAtColumn, SourceDocumentIDColumn, ReferenceColumn, TargetDocumentIDColumn, CreatorIDColumn}
		mutableColumns         = mysql.ColumnList{CreatedAtColumn, DeletedAtColumn, SourceDocumentIDColumn, ReferenceColumn, TargetDocumentIDColumn, CreatorIDColumn}
	)

	return fivenetDocumentsReferencesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		CreatedAt:        CreatedAtColumn,
		DeletedAt:        DeletedAtColumn,
		SourceDocumentID: SourceDocumentIDColumn,
		Reference:        ReferenceColumn,
		TargetDocumentID: TargetDocumentIDColumn,
		CreatorID:        CreatorIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
