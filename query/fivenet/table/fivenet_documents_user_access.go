//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsUserAccess = newFivenetDocumentsUserAccessTable("", "fivenet_documents_user_access", "")

type fivenetDocumentsUserAccessTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	CreatedAt  mysql.ColumnTimestamp
	DeletedAt  mysql.ColumnTimestamp
	DocumentID mysql.ColumnInteger
	UserID     mysql.ColumnInteger
	Access     mysql.ColumnInteger
	CreatorID  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetDocumentsUserAccessTable struct {
	fivenetDocumentsUserAccessTable

	NEW fivenetDocumentsUserAccessTable
}

// AS creates new FivenetDocumentsUserAccessTable with assigned alias
func (a FivenetDocumentsUserAccessTable) AS(alias string) *FivenetDocumentsUserAccessTable {
	return newFivenetDocumentsUserAccessTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsUserAccessTable with assigned schema name
func (a FivenetDocumentsUserAccessTable) FromSchema(schemaName string) *FivenetDocumentsUserAccessTable {
	return newFivenetDocumentsUserAccessTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsUserAccessTable with assigned table prefix
func (a FivenetDocumentsUserAccessTable) WithPrefix(prefix string) *FivenetDocumentsUserAccessTable {
	return newFivenetDocumentsUserAccessTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsUserAccessTable with assigned table suffix
func (a FivenetDocumentsUserAccessTable) WithSuffix(suffix string) *FivenetDocumentsUserAccessTable {
	return newFivenetDocumentsUserAccessTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsUserAccessTable(schemaName, tableName, alias string) *FivenetDocumentsUserAccessTable {
	return &FivenetDocumentsUserAccessTable{
		fivenetDocumentsUserAccessTable: newFivenetDocumentsUserAccessTableImpl(schemaName, tableName, alias),
		NEW:                             newFivenetDocumentsUserAccessTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsUserAccessTableImpl(schemaName, tableName, alias string) fivenetDocumentsUserAccessTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		CreatedAtColumn  = mysql.TimestampColumn("created_at")
		DeletedAtColumn  = mysql.TimestampColumn("deleted_at")
		DocumentIDColumn = mysql.IntegerColumn("document_id")
		UserIDColumn     = mysql.IntegerColumn("user_id")
		AccessColumn     = mysql.IntegerColumn("access")
		CreatorIDColumn  = mysql.IntegerColumn("creator_id")
		allColumns       = mysql.ColumnList{IDColumn, CreatedAtColumn, DeletedAtColumn, DocumentIDColumn, UserIDColumn, AccessColumn, CreatorIDColumn}
		mutableColumns   = mysql.ColumnList{CreatedAtColumn, DeletedAtColumn, DocumentIDColumn, UserIDColumn, AccessColumn, CreatorIDColumn}
	)

	return fivenetDocumentsUserAccessTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		DocumentID: DocumentIDColumn,
		UserID:     UserIDColumn,
		Access:     AccessColumn,
		CreatorID:  CreatorIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
