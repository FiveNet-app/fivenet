//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetJobsRequests = newFivenetJobsRequestsTable("", "fivenet_jobs_requests", "")

type fivenetJobsRequestsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	CreatedAt  mysql.ColumnTimestamp
	UpdatedAt  mysql.ColumnTimestamp
	DeletedAt  mysql.ColumnTimestamp
	Job        mysql.ColumnString
	TypeID     mysql.ColumnInteger
	Title      mysql.ColumnString
	Message    mysql.ColumnString
	Status     mysql.ColumnString
	CreatorID  mysql.ColumnInteger
	Approved   mysql.ColumnBool
	ApproverID mysql.ColumnInteger
	Closed     mysql.ColumnBool
	BeginsAt   mysql.ColumnTimestamp
	EndsAt     mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetJobsRequestsTable struct {
	fivenetJobsRequestsTable

	NEW fivenetJobsRequestsTable
}

// AS creates new FivenetJobsRequestsTable with assigned alias
func (a FivenetJobsRequestsTable) AS(alias string) *FivenetJobsRequestsTable {
	return newFivenetJobsRequestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetJobsRequestsTable with assigned schema name
func (a FivenetJobsRequestsTable) FromSchema(schemaName string) *FivenetJobsRequestsTable {
	return newFivenetJobsRequestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetJobsRequestsTable with assigned table prefix
func (a FivenetJobsRequestsTable) WithPrefix(prefix string) *FivenetJobsRequestsTable {
	return newFivenetJobsRequestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetJobsRequestsTable with assigned table suffix
func (a FivenetJobsRequestsTable) WithSuffix(suffix string) *FivenetJobsRequestsTable {
	return newFivenetJobsRequestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetJobsRequestsTable(schemaName, tableName, alias string) *FivenetJobsRequestsTable {
	return &FivenetJobsRequestsTable{
		fivenetJobsRequestsTable: newFivenetJobsRequestsTableImpl(schemaName, tableName, alias),
		NEW:                      newFivenetJobsRequestsTableImpl("", "new", ""),
	}
}

func newFivenetJobsRequestsTableImpl(schemaName, tableName, alias string) fivenetJobsRequestsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		CreatedAtColumn  = mysql.TimestampColumn("created_at")
		UpdatedAtColumn  = mysql.TimestampColumn("updated_at")
		DeletedAtColumn  = mysql.TimestampColumn("deleted_at")
		JobColumn        = mysql.StringColumn("job")
		TypeIDColumn     = mysql.IntegerColumn("type_id")
		TitleColumn      = mysql.StringColumn("title")
		MessageColumn    = mysql.StringColumn("message")
		StatusColumn     = mysql.StringColumn("status")
		CreatorIDColumn  = mysql.IntegerColumn("creator_id")
		ApprovedColumn   = mysql.BoolColumn("approved")
		ApproverIDColumn = mysql.IntegerColumn("approver_id")
		ClosedColumn     = mysql.BoolColumn("closed")
		BeginsAtColumn   = mysql.TimestampColumn("begins_at")
		EndsAtColumn     = mysql.TimestampColumn("ends_at")
		allColumns       = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, JobColumn, TypeIDColumn, TitleColumn, MessageColumn, StatusColumn, CreatorIDColumn, ApprovedColumn, ApproverIDColumn, ClosedColumn, BeginsAtColumn, EndsAtColumn}
		mutableColumns   = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, JobColumn, TypeIDColumn, TitleColumn, MessageColumn, StatusColumn, CreatorIDColumn, ApprovedColumn, ApproverIDColumn, ClosedColumn, BeginsAtColumn, EndsAtColumn}
	)

	return fivenetJobsRequestsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		Job:        JobColumn,
		TypeID:     TypeIDColumn,
		Title:      TitleColumn,
		Message:    MessageColumn,
		Status:     StatusColumn,
		CreatorID:  CreatorIDColumn,
		Approved:   ApprovedColumn,
		ApproverID: ApproverIDColumn,
		Closed:     ClosedColumn,
		BeginsAt:   BeginsAtColumn,
		EndsAt:     EndsAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
