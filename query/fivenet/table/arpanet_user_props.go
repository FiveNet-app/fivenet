//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ArpanetUserProps = newArpanetUserPropsTable("", "fivenet_user_props", "")

type fivenetUserPropsTable struct {
	mysql.Table

	//Columns
	UserID mysql.ColumnInteger
	Wanted mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ArpanetUserPropsTable struct {
	fivenetUserPropsTable

	NEW fivenetUserPropsTable
}

// AS creates new ArpanetUserPropsTable with assigned alias
func (a ArpanetUserPropsTable) AS(alias string) *ArpanetUserPropsTable {
	return newArpanetUserPropsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArpanetUserPropsTable with assigned schema name
func (a ArpanetUserPropsTable) FromSchema(schemaName string) *ArpanetUserPropsTable {
	return newArpanetUserPropsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArpanetUserPropsTable with assigned table prefix
func (a ArpanetUserPropsTable) WithPrefix(prefix string) *ArpanetUserPropsTable {
	return newArpanetUserPropsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArpanetUserPropsTable with assigned table suffix
func (a ArpanetUserPropsTable) WithSuffix(suffix string) *ArpanetUserPropsTable {
	return newArpanetUserPropsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArpanetUserPropsTable(schemaName, tableName, alias string) *ArpanetUserPropsTable {
	return &ArpanetUserPropsTable{
		fivenetUserPropsTable: newArpanetUserPropsTableImpl(schemaName, tableName, alias),
		NEW:                   newArpanetUserPropsTableImpl("", "new", ""),
	}
}

func newArpanetUserPropsTableImpl(schemaName, tableName, alias string) fivenetUserPropsTable {
	var (
		UserIDColumn   = mysql.IntegerColumn("user_id")
		WantedColumn   = mysql.BoolColumn("wanted")
		allColumns     = mysql.ColumnList{UserIDColumn, WantedColumn}
		mutableColumns = mysql.ColumnList{UserIDColumn, WantedColumn}
	)

	return fivenetUserPropsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID: UserIDColumn,
		Wanted: WantedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
