//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetMailerThreadsStateUser = newFivenetMailerThreadsStateUserTable("", "fivenet_mailer_threads_state_user", "")

type fivenetMailerThreadsStateUserTable struct {
	mysql.Table

	// Columns
	ThreadID  mysql.ColumnInteger
	UserID    mysql.ColumnInteger
	LastRead  mysql.ColumnTimestamp
	Unread    mysql.ColumnBool
	Important mysql.ColumnBool
	Favorite  mysql.ColumnBool
	Muted     mysql.ColumnBool
	Archived  mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetMailerThreadsStateUserTable struct {
	fivenetMailerThreadsStateUserTable

	NEW fivenetMailerThreadsStateUserTable
}

// AS creates new FivenetMailerThreadsStateUserTable with assigned alias
func (a FivenetMailerThreadsStateUserTable) AS(alias string) *FivenetMailerThreadsStateUserTable {
	return newFivenetMailerThreadsStateUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetMailerThreadsStateUserTable with assigned schema name
func (a FivenetMailerThreadsStateUserTable) FromSchema(schemaName string) *FivenetMailerThreadsStateUserTable {
	return newFivenetMailerThreadsStateUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetMailerThreadsStateUserTable with assigned table prefix
func (a FivenetMailerThreadsStateUserTable) WithPrefix(prefix string) *FivenetMailerThreadsStateUserTable {
	return newFivenetMailerThreadsStateUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetMailerThreadsStateUserTable with assigned table suffix
func (a FivenetMailerThreadsStateUserTable) WithSuffix(suffix string) *FivenetMailerThreadsStateUserTable {
	return newFivenetMailerThreadsStateUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetMailerThreadsStateUserTable(schemaName, tableName, alias string) *FivenetMailerThreadsStateUserTable {
	return &FivenetMailerThreadsStateUserTable{
		fivenetMailerThreadsStateUserTable: newFivenetMailerThreadsStateUserTableImpl(schemaName, tableName, alias),
		NEW:                                newFivenetMailerThreadsStateUserTableImpl("", "new", ""),
	}
}

func newFivenetMailerThreadsStateUserTableImpl(schemaName, tableName, alias string) fivenetMailerThreadsStateUserTable {
	var (
		ThreadIDColumn  = mysql.IntegerColumn("thread_id")
		UserIDColumn    = mysql.IntegerColumn("user_id")
		LastReadColumn  = mysql.TimestampColumn("last_read")
		UnreadColumn    = mysql.BoolColumn("unread")
		ImportantColumn = mysql.BoolColumn("important")
		FavoriteColumn  = mysql.BoolColumn("favorite")
		MutedColumn     = mysql.BoolColumn("muted")
		ArchivedColumn  = mysql.BoolColumn("archived")
		allColumns      = mysql.ColumnList{ThreadIDColumn, UserIDColumn, LastReadColumn, UnreadColumn, ImportantColumn, FavoriteColumn, MutedColumn, ArchivedColumn}
		mutableColumns  = mysql.ColumnList{LastReadColumn, UnreadColumn, ImportantColumn, FavoriteColumn, MutedColumn, ArchivedColumn}
	)

	return fivenetMailerThreadsStateUserTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ThreadID:  ThreadIDColumn,
		UserID:    UserIDColumn,
		LastRead:  LastReadColumn,
		Unread:    UnreadColumn,
		Important: ImportantColumn,
		Favorite:  FavoriteColumn,
		Muted:     MutedColumn,
		Archived:  ArchivedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
