//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetMailerThreadsRecipientsUsers = newFivenetMailerThreadsRecipientsUsersTable("", "fivenet_mailer_threads_recipients_users", "")

type fivenetMailerThreadsRecipientsUsersTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	CreatedAt mysql.ColumnTimestamp
	ThreadID  mysql.ColumnInteger
	UserID    mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetMailerThreadsRecipientsUsersTable struct {
	fivenetMailerThreadsRecipientsUsersTable

	NEW fivenetMailerThreadsRecipientsUsersTable
}

// AS creates new FivenetMailerThreadsRecipientsUsersTable with assigned alias
func (a FivenetMailerThreadsRecipientsUsersTable) AS(alias string) *FivenetMailerThreadsRecipientsUsersTable {
	return newFivenetMailerThreadsRecipientsUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetMailerThreadsRecipientsUsersTable with assigned schema name
func (a FivenetMailerThreadsRecipientsUsersTable) FromSchema(schemaName string) *FivenetMailerThreadsRecipientsUsersTable {
	return newFivenetMailerThreadsRecipientsUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetMailerThreadsRecipientsUsersTable with assigned table prefix
func (a FivenetMailerThreadsRecipientsUsersTable) WithPrefix(prefix string) *FivenetMailerThreadsRecipientsUsersTable {
	return newFivenetMailerThreadsRecipientsUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetMailerThreadsRecipientsUsersTable with assigned table suffix
func (a FivenetMailerThreadsRecipientsUsersTable) WithSuffix(suffix string) *FivenetMailerThreadsRecipientsUsersTable {
	return newFivenetMailerThreadsRecipientsUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetMailerThreadsRecipientsUsersTable(schemaName, tableName, alias string) *FivenetMailerThreadsRecipientsUsersTable {
	return &FivenetMailerThreadsRecipientsUsersTable{
		fivenetMailerThreadsRecipientsUsersTable: newFivenetMailerThreadsRecipientsUsersTableImpl(schemaName, tableName, alias),
		NEW:                                      newFivenetMailerThreadsRecipientsUsersTableImpl("", "new", ""),
	}
}

func newFivenetMailerThreadsRecipientsUsersTableImpl(schemaName, tableName, alias string) fivenetMailerThreadsRecipientsUsersTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		CreatedAtColumn = mysql.TimestampColumn("created_at")
		ThreadIDColumn  = mysql.IntegerColumn("thread_id")
		UserIDColumn    = mysql.IntegerColumn("user_id")
		allColumns      = mysql.ColumnList{IDColumn, CreatedAtColumn, ThreadIDColumn, UserIDColumn}
		mutableColumns  = mysql.ColumnList{CreatedAtColumn, ThreadIDColumn, UserIDColumn}
	)

	return fivenetMailerThreadsRecipientsUsersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		ThreadID:  ThreadIDColumn,
		UserID:    UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
