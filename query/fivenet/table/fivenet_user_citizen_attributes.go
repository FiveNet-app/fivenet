//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetUserCitizenAttributes = newFivenetUserCitizenAttributesTable("", "fivenet_user_citizen_attributes", "")

type fivenetUserCitizenAttributesTable struct {
	mysql.Table

	// Columns
	UserID      mysql.ColumnInteger
	AttributeID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetUserCitizenAttributesTable struct {
	fivenetUserCitizenAttributesTable

	NEW fivenetUserCitizenAttributesTable
}

// AS creates new FivenetUserCitizenAttributesTable with assigned alias
func (a FivenetUserCitizenAttributesTable) AS(alias string) *FivenetUserCitizenAttributesTable {
	return newFivenetUserCitizenAttributesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetUserCitizenAttributesTable with assigned schema name
func (a FivenetUserCitizenAttributesTable) FromSchema(schemaName string) *FivenetUserCitizenAttributesTable {
	return newFivenetUserCitizenAttributesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetUserCitizenAttributesTable with assigned table prefix
func (a FivenetUserCitizenAttributesTable) WithPrefix(prefix string) *FivenetUserCitizenAttributesTable {
	return newFivenetUserCitizenAttributesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetUserCitizenAttributesTable with assigned table suffix
func (a FivenetUserCitizenAttributesTable) WithSuffix(suffix string) *FivenetUserCitizenAttributesTable {
	return newFivenetUserCitizenAttributesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetUserCitizenAttributesTable(schemaName, tableName, alias string) *FivenetUserCitizenAttributesTable {
	return &FivenetUserCitizenAttributesTable{
		fivenetUserCitizenAttributesTable: newFivenetUserCitizenAttributesTableImpl(schemaName, tableName, alias),
		NEW:                               newFivenetUserCitizenAttributesTableImpl("", "new", ""),
	}
}

func newFivenetUserCitizenAttributesTableImpl(schemaName, tableName, alias string) fivenetUserCitizenAttributesTable {
	var (
		UserIDColumn      = mysql.IntegerColumn("user_id")
		AttributeIDColumn = mysql.IntegerColumn("attribute_id")
		allColumns        = mysql.ColumnList{UserIDColumn, AttributeIDColumn}
		mutableColumns    = mysql.ColumnList{UserIDColumn, AttributeIDColumn}
	)

	return fivenetUserCitizenAttributesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:      UserIDColumn,
		AttributeID: AttributeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
