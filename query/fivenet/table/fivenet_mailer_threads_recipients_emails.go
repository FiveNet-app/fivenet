//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetMailerThreadsRecipientsEmails = newFivenetMailerThreadsRecipientsEmailsTable("", "fivenet_mailer_threads_recipients_emails", "")

type fivenetMailerThreadsRecipientsEmailsTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	CreatedAt mysql.ColumnTimestamp
	ThreadID  mysql.ColumnInteger
	EmailID   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetMailerThreadsRecipientsEmailsTable struct {
	fivenetMailerThreadsRecipientsEmailsTable

	NEW fivenetMailerThreadsRecipientsEmailsTable
}

// AS creates new FivenetMailerThreadsRecipientsEmailsTable with assigned alias
func (a FivenetMailerThreadsRecipientsEmailsTable) AS(alias string) *FivenetMailerThreadsRecipientsEmailsTable {
	return newFivenetMailerThreadsRecipientsEmailsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetMailerThreadsRecipientsEmailsTable with assigned schema name
func (a FivenetMailerThreadsRecipientsEmailsTable) FromSchema(schemaName string) *FivenetMailerThreadsRecipientsEmailsTable {
	return newFivenetMailerThreadsRecipientsEmailsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetMailerThreadsRecipientsEmailsTable with assigned table prefix
func (a FivenetMailerThreadsRecipientsEmailsTable) WithPrefix(prefix string) *FivenetMailerThreadsRecipientsEmailsTable {
	return newFivenetMailerThreadsRecipientsEmailsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetMailerThreadsRecipientsEmailsTable with assigned table suffix
func (a FivenetMailerThreadsRecipientsEmailsTable) WithSuffix(suffix string) *FivenetMailerThreadsRecipientsEmailsTable {
	return newFivenetMailerThreadsRecipientsEmailsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetMailerThreadsRecipientsEmailsTable(schemaName, tableName, alias string) *FivenetMailerThreadsRecipientsEmailsTable {
	return &FivenetMailerThreadsRecipientsEmailsTable{
		fivenetMailerThreadsRecipientsEmailsTable: newFivenetMailerThreadsRecipientsEmailsTableImpl(schemaName, tableName, alias),
		NEW: newFivenetMailerThreadsRecipientsEmailsTableImpl("", "new", ""),
	}
}

func newFivenetMailerThreadsRecipientsEmailsTableImpl(schemaName, tableName, alias string) fivenetMailerThreadsRecipientsEmailsTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		CreatedAtColumn = mysql.TimestampColumn("created_at")
		ThreadIDColumn  = mysql.IntegerColumn("thread_id")
		EmailIDColumn   = mysql.IntegerColumn("email_id")
		allColumns      = mysql.ColumnList{IDColumn, CreatedAtColumn, ThreadIDColumn, EmailIDColumn}
		mutableColumns  = mysql.ColumnList{CreatedAtColumn, ThreadIDColumn, EmailIDColumn}
	)

	return fivenetMailerThreadsRecipientsEmailsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		ThreadID:  ThreadIDColumn,
		EmailID:   EmailIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
