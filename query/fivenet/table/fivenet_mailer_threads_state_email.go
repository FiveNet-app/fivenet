//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetMailerThreadsStateEmail = newFivenetMailerThreadsStateEmailTable("", "fivenet_mailer_threads_state_email", "")

type fivenetMailerThreadsStateEmailTable struct {
	mysql.Table

	// Columns
	ThreadID  mysql.ColumnInteger
	EmailID   mysql.ColumnInteger
	LastRead  mysql.ColumnTimestamp
	Unread    mysql.ColumnBool
	Important mysql.ColumnBool
	Favorite  mysql.ColumnBool
	Muted     mysql.ColumnBool
	Archived  mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetMailerThreadsStateEmailTable struct {
	fivenetMailerThreadsStateEmailTable

	NEW fivenetMailerThreadsStateEmailTable
}

// AS creates new FivenetMailerThreadsStateEmailTable with assigned alias
func (a FivenetMailerThreadsStateEmailTable) AS(alias string) *FivenetMailerThreadsStateEmailTable {
	return newFivenetMailerThreadsStateEmailTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetMailerThreadsStateEmailTable with assigned schema name
func (a FivenetMailerThreadsStateEmailTable) FromSchema(schemaName string) *FivenetMailerThreadsStateEmailTable {
	return newFivenetMailerThreadsStateEmailTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetMailerThreadsStateEmailTable with assigned table prefix
func (a FivenetMailerThreadsStateEmailTable) WithPrefix(prefix string) *FivenetMailerThreadsStateEmailTable {
	return newFivenetMailerThreadsStateEmailTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetMailerThreadsStateEmailTable with assigned table suffix
func (a FivenetMailerThreadsStateEmailTable) WithSuffix(suffix string) *FivenetMailerThreadsStateEmailTable {
	return newFivenetMailerThreadsStateEmailTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetMailerThreadsStateEmailTable(schemaName, tableName, alias string) *FivenetMailerThreadsStateEmailTable {
	return &FivenetMailerThreadsStateEmailTable{
		fivenetMailerThreadsStateEmailTable: newFivenetMailerThreadsStateEmailTableImpl(schemaName, tableName, alias),
		NEW:                                 newFivenetMailerThreadsStateEmailTableImpl("", "new", ""),
	}
}

func newFivenetMailerThreadsStateEmailTableImpl(schemaName, tableName, alias string) fivenetMailerThreadsStateEmailTable {
	var (
		ThreadIDColumn  = mysql.IntegerColumn("thread_id")
		EmailIDColumn   = mysql.IntegerColumn("email_id")
		LastReadColumn  = mysql.TimestampColumn("last_read")
		UnreadColumn    = mysql.BoolColumn("unread")
		ImportantColumn = mysql.BoolColumn("important")
		FavoriteColumn  = mysql.BoolColumn("favorite")
		MutedColumn     = mysql.BoolColumn("muted")
		ArchivedColumn  = mysql.BoolColumn("archived")
		allColumns      = mysql.ColumnList{ThreadIDColumn, EmailIDColumn, LastReadColumn, UnreadColumn, ImportantColumn, FavoriteColumn, MutedColumn, ArchivedColumn}
		mutableColumns  = mysql.ColumnList{LastReadColumn, UnreadColumn, ImportantColumn, FavoriteColumn, MutedColumn, ArchivedColumn}
	)

	return fivenetMailerThreadsStateEmailTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ThreadID:  ThreadIDColumn,
		EmailID:   EmailIDColumn,
		LastRead:  LastReadColumn,
		Unread:    UnreadColumn,
		Important: ImportantColumn,
		Favorite:  FavoriteColumn,
		Muted:     MutedColumn,
		Archived:  ArchivedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
