// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/galexrt/arpanet/model"
)

func newUserProps(db *gorm.DB, opts ...gen.DOOption) userProps {
	_userProps := userProps{}

	_userProps.userPropsDo.UseDB(db, opts...)
	_userProps.userPropsDo.UseModel(&model.UserProps{})

	tableName := _userProps.userPropsDo.TableName()
	_userProps.ALL = field.NewAsterisk(tableName)
	_userProps.Identifier = field.NewString(tableName, "identifier")
	_userProps.Wanted = field.NewBool(tableName, "wanted")

	_userProps.fillFieldMap()

	return _userProps
}

type userProps struct {
	userPropsDo

	ALL        field.Asterisk
	Identifier field.String
	Wanted     field.Bool

	fieldMap map[string]field.Expr
}

func (u userProps) Table(newTableName string) *userProps {
	u.userPropsDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userProps) As(alias string) *userProps {
	u.userPropsDo.DO = *(u.userPropsDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userProps) updateTableName(table string) *userProps {
	u.ALL = field.NewAsterisk(table)
	u.Identifier = field.NewString(table, "identifier")
	u.Wanted = field.NewBool(table, "wanted")

	u.fillFieldMap()

	return u
}

func (u *userProps) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userProps) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["identifier"] = u.Identifier
	u.fieldMap["wanted"] = u.Wanted
}

func (u userProps) clone(db *gorm.DB) userProps {
	u.userPropsDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userProps) replaceDB(db *gorm.DB) userProps {
	u.userPropsDo.ReplaceDB(db)
	return u
}

type userPropsDo struct{ gen.DO }

type IUserPropsDo interface {
	gen.SubQuery
	Debug() IUserPropsDo
	WithContext(ctx context.Context) IUserPropsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPropsDo
	WriteDB() IUserPropsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPropsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPropsDo
	Not(conds ...gen.Condition) IUserPropsDo
	Or(conds ...gen.Condition) IUserPropsDo
	Select(conds ...field.Expr) IUserPropsDo
	Where(conds ...gen.Condition) IUserPropsDo
	Order(conds ...field.Expr) IUserPropsDo
	Distinct(cols ...field.Expr) IUserPropsDo
	Omit(cols ...field.Expr) IUserPropsDo
	Join(table schema.Tabler, on ...field.Expr) IUserPropsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPropsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPropsDo
	Group(cols ...field.Expr) IUserPropsDo
	Having(conds ...gen.Condition) IUserPropsDo
	Limit(limit int) IUserPropsDo
	Offset(offset int) IUserPropsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPropsDo
	Unscoped() IUserPropsDo
	Create(values ...*model.UserProps) error
	CreateInBatches(values []*model.UserProps, batchSize int) error
	Save(values ...*model.UserProps) error
	First() (*model.UserProps, error)
	Take() (*model.UserProps, error)
	Last() (*model.UserProps, error)
	Find() ([]*model.UserProps, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProps, err error)
	FindInBatches(result *[]*model.UserProps, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserProps) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPropsDo
	Assign(attrs ...field.AssignExpr) IUserPropsDo
	Joins(fields ...field.RelationField) IUserPropsDo
	Preload(fields ...field.RelationField) IUserPropsDo
	FirstOrInit() (*model.UserProps, error)
	FirstOrCreate() (*model.UserProps, error)
	FindByPage(offset int, limit int) (result []*model.UserProps, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPropsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPropsDo) Debug() IUserPropsDo {
	return u.withDO(u.DO.Debug())
}

func (u userPropsDo) WithContext(ctx context.Context) IUserPropsDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPropsDo) ReadDB() IUserPropsDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPropsDo) WriteDB() IUserPropsDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPropsDo) Session(config *gorm.Session) IUserPropsDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPropsDo) Clauses(conds ...clause.Expression) IUserPropsDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPropsDo) Returning(value interface{}, columns ...string) IUserPropsDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPropsDo) Not(conds ...gen.Condition) IUserPropsDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPropsDo) Or(conds ...gen.Condition) IUserPropsDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPropsDo) Select(conds ...field.Expr) IUserPropsDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPropsDo) Where(conds ...gen.Condition) IUserPropsDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPropsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserPropsDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userPropsDo) Order(conds ...field.Expr) IUserPropsDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPropsDo) Distinct(cols ...field.Expr) IUserPropsDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPropsDo) Omit(cols ...field.Expr) IUserPropsDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPropsDo) Join(table schema.Tabler, on ...field.Expr) IUserPropsDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPropsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPropsDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPropsDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPropsDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPropsDo) Group(cols ...field.Expr) IUserPropsDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPropsDo) Having(conds ...gen.Condition) IUserPropsDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPropsDo) Limit(limit int) IUserPropsDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPropsDo) Offset(offset int) IUserPropsDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPropsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPropsDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPropsDo) Unscoped() IUserPropsDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPropsDo) Create(values ...*model.UserProps) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPropsDo) CreateInBatches(values []*model.UserProps, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPropsDo) Save(values ...*model.UserProps) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPropsDo) First() (*model.UserProps, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProps), nil
	}
}

func (u userPropsDo) Take() (*model.UserProps, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProps), nil
	}
}

func (u userPropsDo) Last() (*model.UserProps, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProps), nil
	}
}

func (u userPropsDo) Find() ([]*model.UserProps, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserProps), err
}

func (u userPropsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProps, err error) {
	buf := make([]*model.UserProps, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPropsDo) FindInBatches(result *[]*model.UserProps, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPropsDo) Attrs(attrs ...field.AssignExpr) IUserPropsDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPropsDo) Assign(attrs ...field.AssignExpr) IUserPropsDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPropsDo) Joins(fields ...field.RelationField) IUserPropsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPropsDo) Preload(fields ...field.RelationField) IUserPropsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPropsDo) FirstOrInit() (*model.UserProps, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProps), nil
	}
}

func (u userPropsDo) FirstOrCreate() (*model.UserProps, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProps), nil
	}
}

func (u userPropsDo) FindByPage(offset int, limit int) (result []*model.UserProps, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPropsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPropsDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPropsDo) Delete(models ...*model.UserProps) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPropsDo) withDO(do gen.Dao) *userPropsDo {
	u.DO = *do.(*gen.DO)
	return u
}
