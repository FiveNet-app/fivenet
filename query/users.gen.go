// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/galexrt/arpanet/model"
)

func newCitizen(db *gorm.DB, opts ...gen.DOOption) citizen {
	_citizen := citizen{}

	_citizen.citizenDo.UseDB(db, opts...)
	_citizen.citizenDo.UseModel(&model.Citizen{})

	tableName := _citizen.citizenDo.TableName()
	_citizen.ALL = field.NewAsterisk(tableName)
	_citizen.Identifier = field.NewString(tableName, "identifier")
	_citizen.Job = field.NewString(tableName, "job")
	_citizen.JobGrade = field.NewInt(tableName, "job_grade")
	_citizen.Firstname = field.NewString(tableName, "firstname")
	_citizen.Lastname = field.NewString(tableName, "lastname")
	_citizen.Dateofbirth = field.NewString(tableName, "dateofbirth")
	_citizen.Sex = field.NewField(tableName, "sex")
	_citizen.Height = field.NewString(tableName, "height")
	_citizen.IsDead = field.NewBool(tableName, "is_dead")
	_citizen.Jail = field.NewInt32(tableName, "jail")
	_citizen.PhoneNumber = field.NewString(tableName, "phone_number")
	_citizen.Accounts = field.NewField(tableName, "accounts")
	_citizen.Disabled = field.NewBool(tableName, "disabled")
	_citizen.Visum = field.NewInt32(tableName, "visum")
	_citizen.Playtime = field.NewInt32(tableName, "playtime")
	_citizen.CreatedAt = field.NewTime(tableName, "created_at")
	_citizen.LastSeen = field.NewTime(tableName, "last_seen")

	_citizen.fillFieldMap()

	return _citizen
}

type citizen struct {
	citizenDo

	ALL         field.Asterisk
	Identifier  field.String
	Job         field.String
	JobGrade    field.Int
	Firstname   field.String
	Lastname    field.String
	Dateofbirth field.String
	Sex         field.Field
	Height      field.String
	IsDead      field.Bool
	Jail        field.Int32
	PhoneNumber field.String
	Accounts    field.Field
	Disabled    field.Bool
	Visum       field.Int32
	Playtime    field.Int32
	CreatedAt   field.Time
	LastSeen    field.Time

	fieldMap map[string]field.Expr
}

func (c citizen) Table(newTableName string) *citizen {
	c.citizenDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c citizen) As(alias string) *citizen {
	c.citizenDo.DO = *(c.citizenDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *citizen) updateTableName(table string) *citizen {
	c.ALL = field.NewAsterisk(table)
	c.Identifier = field.NewString(table, "identifier")
	c.Job = field.NewString(table, "job")
	c.JobGrade = field.NewInt(table, "job_grade")
	c.Firstname = field.NewString(table, "firstname")
	c.Lastname = field.NewString(table, "lastname")
	c.Dateofbirth = field.NewString(table, "dateofbirth")
	c.Sex = field.NewField(table, "sex")
	c.Height = field.NewString(table, "height")
	c.IsDead = field.NewBool(table, "is_dead")
	c.Jail = field.NewInt32(table, "jail")
	c.PhoneNumber = field.NewString(table, "phone_number")
	c.Accounts = field.NewField(table, "accounts")
	c.Disabled = field.NewBool(table, "disabled")
	c.Visum = field.NewInt32(table, "visum")
	c.Playtime = field.NewInt32(table, "playtime")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.LastSeen = field.NewTime(table, "last_seen")

	c.fillFieldMap()

	return c
}

func (c *citizen) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *citizen) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 17)
	c.fieldMap["identifier"] = c.Identifier
	c.fieldMap["job"] = c.Job
	c.fieldMap["job_grade"] = c.JobGrade
	c.fieldMap["firstname"] = c.Firstname
	c.fieldMap["lastname"] = c.Lastname
	c.fieldMap["dateofbirth"] = c.Dateofbirth
	c.fieldMap["sex"] = c.Sex
	c.fieldMap["height"] = c.Height
	c.fieldMap["is_dead"] = c.IsDead
	c.fieldMap["jail"] = c.Jail
	c.fieldMap["phone_number"] = c.PhoneNumber
	c.fieldMap["accounts"] = c.Accounts
	c.fieldMap["disabled"] = c.Disabled
	c.fieldMap["visum"] = c.Visum
	c.fieldMap["playtime"] = c.Playtime
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["last_seen"] = c.LastSeen
}

func (c citizen) clone(db *gorm.DB) citizen {
	c.citizenDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c citizen) replaceDB(db *gorm.DB) citizen {
	c.citizenDo.ReplaceDB(db)
	return c
}

type citizenDo struct{ gen.DO }

type ICitizenDo interface {
	gen.SubQuery
	Debug() ICitizenDo
	WithContext(ctx context.Context) ICitizenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICitizenDo
	WriteDB() ICitizenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICitizenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICitizenDo
	Not(conds ...gen.Condition) ICitizenDo
	Or(conds ...gen.Condition) ICitizenDo
	Select(conds ...field.Expr) ICitizenDo
	Where(conds ...gen.Condition) ICitizenDo
	Order(conds ...field.Expr) ICitizenDo
	Distinct(cols ...field.Expr) ICitizenDo
	Omit(cols ...field.Expr) ICitizenDo
	Join(table schema.Tabler, on ...field.Expr) ICitizenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICitizenDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICitizenDo
	Group(cols ...field.Expr) ICitizenDo
	Having(conds ...gen.Condition) ICitizenDo
	Limit(limit int) ICitizenDo
	Offset(offset int) ICitizenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICitizenDo
	Unscoped() ICitizenDo
	Create(values ...*model.Citizen) error
	CreateInBatches(values []*model.Citizen, batchSize int) error
	Save(values ...*model.Citizen) error
	First() (*model.Citizen, error)
	Take() (*model.Citizen, error)
	Last() (*model.Citizen, error)
	Find() ([]*model.Citizen, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Citizen, err error)
	FindInBatches(result *[]*model.Citizen, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Citizen) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICitizenDo
	Assign(attrs ...field.AssignExpr) ICitizenDo
	Joins(fields ...field.RelationField) ICitizenDo
	Preload(fields ...field.RelationField) ICitizenDo
	FirstOrInit() (*model.Citizen, error)
	FirstOrCreate() (*model.Citizen, error)
	FindByPage(offset int, limit int) (result []*model.Citizen, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICitizenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c citizenDo) Debug() ICitizenDo {
	return c.withDO(c.DO.Debug())
}

func (c citizenDo) WithContext(ctx context.Context) ICitizenDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c citizenDo) ReadDB() ICitizenDo {
	return c.Clauses(dbresolver.Read)
}

func (c citizenDo) WriteDB() ICitizenDo {
	return c.Clauses(dbresolver.Write)
}

func (c citizenDo) Session(config *gorm.Session) ICitizenDo {
	return c.withDO(c.DO.Session(config))
}

func (c citizenDo) Clauses(conds ...clause.Expression) ICitizenDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c citizenDo) Returning(value interface{}, columns ...string) ICitizenDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c citizenDo) Not(conds ...gen.Condition) ICitizenDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c citizenDo) Or(conds ...gen.Condition) ICitizenDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c citizenDo) Select(conds ...field.Expr) ICitizenDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c citizenDo) Where(conds ...gen.Condition) ICitizenDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c citizenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICitizenDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c citizenDo) Order(conds ...field.Expr) ICitizenDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c citizenDo) Distinct(cols ...field.Expr) ICitizenDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c citizenDo) Omit(cols ...field.Expr) ICitizenDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c citizenDo) Join(table schema.Tabler, on ...field.Expr) ICitizenDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c citizenDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICitizenDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c citizenDo) RightJoin(table schema.Tabler, on ...field.Expr) ICitizenDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c citizenDo) Group(cols ...field.Expr) ICitizenDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c citizenDo) Having(conds ...gen.Condition) ICitizenDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c citizenDo) Limit(limit int) ICitizenDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c citizenDo) Offset(offset int) ICitizenDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c citizenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICitizenDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c citizenDo) Unscoped() ICitizenDo {
	return c.withDO(c.DO.Unscoped())
}

func (c citizenDo) Create(values ...*model.Citizen) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c citizenDo) CreateInBatches(values []*model.Citizen, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c citizenDo) Save(values ...*model.Citizen) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c citizenDo) First() (*model.Citizen, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Citizen), nil
	}
}

func (c citizenDo) Take() (*model.Citizen, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Citizen), nil
	}
}

func (c citizenDo) Last() (*model.Citizen, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Citizen), nil
	}
}

func (c citizenDo) Find() ([]*model.Citizen, error) {
	result, err := c.DO.Find()
	return result.([]*model.Citizen), err
}

func (c citizenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Citizen, err error) {
	buf := make([]*model.Citizen, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c citizenDo) FindInBatches(result *[]*model.Citizen, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c citizenDo) Attrs(attrs ...field.AssignExpr) ICitizenDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c citizenDo) Assign(attrs ...field.AssignExpr) ICitizenDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c citizenDo) Joins(fields ...field.RelationField) ICitizenDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c citizenDo) Preload(fields ...field.RelationField) ICitizenDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c citizenDo) FirstOrInit() (*model.Citizen, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Citizen), nil
	}
}

func (c citizenDo) FirstOrCreate() (*model.Citizen, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Citizen), nil
	}
}

func (c citizenDo) FindByPage(offset int, limit int) (result []*model.Citizen, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c citizenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c citizenDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c citizenDo) Delete(models ...*model.Citizen) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *citizenDo) withDO(do gen.Dao) *citizenDo {
	c.DO = *do.(*gen.DO)
	return c
}
