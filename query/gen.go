// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q        = new(Query)
	Citizen  *citizen
	Document *document
	Job      *job
	JobGrade *jobGrade
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Citizen = &Q.Citizen
	Document = &Q.Document
	Job = &Q.Job
	JobGrade = &Q.JobGrade
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:       db,
		Citizen:  newCitizen(db, opts...),
		Document: newDocument(db, opts...),
		Job:      newJob(db, opts...),
		JobGrade: newJobGrade(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Citizen  citizen
	Document document
	Job      job
	JobGrade jobGrade
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Citizen:  q.Citizen.clone(db),
		Document: q.Document.clone(db),
		Job:      q.Job.clone(db),
		JobGrade: q.JobGrade.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Citizen:  q.Citizen.replaceDB(db),
		Document: q.Document.replaceDB(db),
		Job:      q.Job.replaceDB(db),
		JobGrade: q.JobGrade.replaceDB(db),
	}
}

type queryCtx struct {
	Citizen  ICitizenDo
	Document IDocumentDo
	Job      IJobDo
	JobGrade IJobGradeDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Citizen:  q.Citizen.WithContext(ctx),
		Document: q.Document.WithContext(ctx),
		Job:      q.Job.WithContext(ctx),
		JobGrade: q.JobGrade.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
