//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ArpanetRolePermissions = newArpanetRolePermissionsTable("arpanet", "arpanet_role_permissions", "")

type arpanetRolePermissionsTable struct {
	mysql.Table

	//Columns
	RoleID       mysql.ColumnInteger
	PermissionID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ArpanetRolePermissionsTable struct {
	arpanetRolePermissionsTable

	NEW arpanetRolePermissionsTable
}

// AS creates new ArpanetRolePermissionsTable with assigned alias
func (a ArpanetRolePermissionsTable) AS(alias string) *ArpanetRolePermissionsTable {
	return newArpanetRolePermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArpanetRolePermissionsTable with assigned schema name
func (a ArpanetRolePermissionsTable) FromSchema(schemaName string) *ArpanetRolePermissionsTable {
	return newArpanetRolePermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArpanetRolePermissionsTable with assigned table prefix
func (a ArpanetRolePermissionsTable) WithPrefix(prefix string) *ArpanetRolePermissionsTable {
	return newArpanetRolePermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArpanetRolePermissionsTable with assigned table suffix
func (a ArpanetRolePermissionsTable) WithSuffix(suffix string) *ArpanetRolePermissionsTable {
	return newArpanetRolePermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArpanetRolePermissionsTable(schemaName, tableName, alias string) *ArpanetRolePermissionsTable {
	return &ArpanetRolePermissionsTable{
		arpanetRolePermissionsTable: newArpanetRolePermissionsTableImpl(schemaName, tableName, alias),
		NEW:                         newArpanetRolePermissionsTableImpl("", "new", ""),
	}
}

func newArpanetRolePermissionsTableImpl(schemaName, tableName, alias string) arpanetRolePermissionsTable {
	var (
		RoleIDColumn       = mysql.IntegerColumn("role_id")
		PermissionIDColumn = mysql.IntegerColumn("permission_id")
		allColumns         = mysql.ColumnList{RoleIDColumn, PermissionIDColumn}
		mutableColumns     = mysql.ColumnList{}
	)

	return arpanetRolePermissionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		RoleID:       RoleIDColumn,
		PermissionID: PermissionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
