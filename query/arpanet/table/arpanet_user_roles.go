//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ArpanetUserRoles = newArpanetUserRolesTable("arpanet", "arpanet_user_roles", "")

type arpanetUserRolesTable struct {
	mysql.Table

	//Columns
	UserID mysql.ColumnInteger
	RoleID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ArpanetUserRolesTable struct {
	arpanetUserRolesTable

	NEW arpanetUserRolesTable
}

// AS creates new ArpanetUserRolesTable with assigned alias
func (a ArpanetUserRolesTable) AS(alias string) *ArpanetUserRolesTable {
	return newArpanetUserRolesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArpanetUserRolesTable with assigned schema name
func (a ArpanetUserRolesTable) FromSchema(schemaName string) *ArpanetUserRolesTable {
	return newArpanetUserRolesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArpanetUserRolesTable with assigned table prefix
func (a ArpanetUserRolesTable) WithPrefix(prefix string) *ArpanetUserRolesTable {
	return newArpanetUserRolesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArpanetUserRolesTable with assigned table suffix
func (a ArpanetUserRolesTable) WithSuffix(suffix string) *ArpanetUserRolesTable {
	return newArpanetUserRolesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArpanetUserRolesTable(schemaName, tableName, alias string) *ArpanetUserRolesTable {
	return &ArpanetUserRolesTable{
		arpanetUserRolesTable: newArpanetUserRolesTableImpl(schemaName, tableName, alias),
		NEW:                   newArpanetUserRolesTableImpl("", "new", ""),
	}
}

func newArpanetUserRolesTableImpl(schemaName, tableName, alias string) arpanetUserRolesTable {
	var (
		UserIDColumn   = mysql.IntegerColumn("user_id")
		RoleIDColumn   = mysql.IntegerColumn("role_id")
		allColumns     = mysql.ColumnList{UserIDColumn, RoleIDColumn}
		mutableColumns = mysql.ColumnList{}
	)

	return arpanetUserRolesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID: UserIDColumn,
		RoleID: RoleIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
