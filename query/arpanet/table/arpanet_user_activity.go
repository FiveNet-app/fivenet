//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ArpanetUserActivity = newArpanetUserActivityTable("arpanet", "arpanet_user_activity", "")

type arpanetUserActivityTable struct {
	mysql.Table

	//Columns
	ID           mysql.ColumnInteger
	CreatedAt    mysql.ColumnTimestamp
	UpdatedAt    mysql.ColumnTimestamp
	TargetUserID mysql.ColumnInteger
	CauseUserID  mysql.ColumnInteger
	Type         mysql.ColumnString
	Key          mysql.ColumnString
	OldValue     mysql.ColumnString
	NewValue     mysql.ColumnString
	Reason       mysql.ColumnString
	TargetUser   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ArpanetUserActivityTable struct {
	arpanetUserActivityTable

	NEW arpanetUserActivityTable
}

// AS creates new ArpanetUserActivityTable with assigned alias
func (a ArpanetUserActivityTable) AS(alias string) *ArpanetUserActivityTable {
	return newArpanetUserActivityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArpanetUserActivityTable with assigned schema name
func (a ArpanetUserActivityTable) FromSchema(schemaName string) *ArpanetUserActivityTable {
	return newArpanetUserActivityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArpanetUserActivityTable with assigned table prefix
func (a ArpanetUserActivityTable) WithPrefix(prefix string) *ArpanetUserActivityTable {
	return newArpanetUserActivityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArpanetUserActivityTable with assigned table suffix
func (a ArpanetUserActivityTable) WithSuffix(suffix string) *ArpanetUserActivityTable {
	return newArpanetUserActivityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArpanetUserActivityTable(schemaName, tableName, alias string) *ArpanetUserActivityTable {
	return &ArpanetUserActivityTable{
		arpanetUserActivityTable: newArpanetUserActivityTableImpl(schemaName, tableName, alias),
		NEW:                      newArpanetUserActivityTableImpl("", "new", ""),
	}
}

func newArpanetUserActivityTableImpl(schemaName, tableName, alias string) arpanetUserActivityTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		UpdatedAtColumn    = mysql.TimestampColumn("updated_at")
		TargetUserIDColumn = mysql.IntegerColumn("target_user_id")
		CauseUserIDColumn  = mysql.IntegerColumn("cause_user_id")
		TypeColumn         = mysql.StringColumn("type")
		KeyColumn          = mysql.StringColumn("key")
		OldValueColumn     = mysql.StringColumn("old_value")
		NewValueColumn     = mysql.StringColumn("new_value")
		ReasonColumn       = mysql.StringColumn("reason")
		TargetUserColumn   = mysql.IntegerColumn("target_user")
		allColumns         = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TargetUserIDColumn, CauseUserIDColumn, TypeColumn, KeyColumn, OldValueColumn, NewValueColumn, ReasonColumn, TargetUserColumn}
		mutableColumns     = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, TargetUserIDColumn, CauseUserIDColumn, TypeColumn, KeyColumn, OldValueColumn, NewValueColumn, ReasonColumn, TargetUserColumn}
	)

	return arpanetUserActivityTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		TargetUserID: TargetUserIDColumn,
		CauseUserID:  CauseUserIDColumn,
		Type:         TypeColumn,
		Key:          KeyColumn,
		OldValue:     OldValueColumn,
		NewValue:     NewValueColumn,
		Reason:       ReasonColumn,
		TargetUser:   TargetUserColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
