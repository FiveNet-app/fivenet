//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ArpanetZschemaMigrations = newArpanetZschemaMigrationsTable("arpanet", "arpanet_zschema_migrations", "")

type arpanetZschemaMigrationsTable struct {
	mysql.Table

	//Columns
	Version mysql.ColumnInteger
	Dirty   mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ArpanetZschemaMigrationsTable struct {
	arpanetZschemaMigrationsTable

	NEW arpanetZschemaMigrationsTable
}

// AS creates new ArpanetZschemaMigrationsTable with assigned alias
func (a ArpanetZschemaMigrationsTable) AS(alias string) *ArpanetZschemaMigrationsTable {
	return newArpanetZschemaMigrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArpanetZschemaMigrationsTable with assigned schema name
func (a ArpanetZschemaMigrationsTable) FromSchema(schemaName string) *ArpanetZschemaMigrationsTable {
	return newArpanetZschemaMigrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArpanetZschemaMigrationsTable with assigned table prefix
func (a ArpanetZschemaMigrationsTable) WithPrefix(prefix string) *ArpanetZschemaMigrationsTable {
	return newArpanetZschemaMigrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArpanetZschemaMigrationsTable with assigned table suffix
func (a ArpanetZschemaMigrationsTable) WithSuffix(suffix string) *ArpanetZschemaMigrationsTable {
	return newArpanetZschemaMigrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArpanetZschemaMigrationsTable(schemaName, tableName, alias string) *ArpanetZschemaMigrationsTable {
	return &ArpanetZschemaMigrationsTable{
		arpanetZschemaMigrationsTable: newArpanetZschemaMigrationsTableImpl(schemaName, tableName, alias),
		NEW:                           newArpanetZschemaMigrationsTableImpl("", "new", ""),
	}
}

func newArpanetZschemaMigrationsTableImpl(schemaName, tableName, alias string) arpanetZschemaMigrationsTable {
	var (
		VersionColumn  = mysql.IntegerColumn("version")
		DirtyColumn    = mysql.BoolColumn("dirty")
		allColumns     = mysql.ColumnList{VersionColumn, DirtyColumn}
		mutableColumns = mysql.ColumnList{DirtyColumn}
	)

	return arpanetZschemaMigrationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version: VersionColumn,
		Dirty:   DirtyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
