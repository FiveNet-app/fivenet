//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ArpanetDocuments = newArpanetDocumentsTable("arpanet", "arpanet_documents", "")

type arpanetDocumentsTable struct {
	mysql.Table

	//Columns
	ID          mysql.ColumnInteger
	CreatedAt   mysql.ColumnTimestamp
	UpdatedAt   mysql.ColumnTimestamp
	DeletedAt   mysql.ColumnTimestamp
	Title       mysql.ColumnString
	Content     mysql.ColumnString
	ContentType mysql.ColumnString
	Creator     mysql.ColumnInteger
	CreatorJob  mysql.ColumnString
	Public      mysql.ColumnBool
	ResponseID  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ArpanetDocumentsTable struct {
	arpanetDocumentsTable

	NEW arpanetDocumentsTable
}

// AS creates new ArpanetDocumentsTable with assigned alias
func (a ArpanetDocumentsTable) AS(alias string) *ArpanetDocumentsTable {
	return newArpanetDocumentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArpanetDocumentsTable with assigned schema name
func (a ArpanetDocumentsTable) FromSchema(schemaName string) *ArpanetDocumentsTable {
	return newArpanetDocumentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArpanetDocumentsTable with assigned table prefix
func (a ArpanetDocumentsTable) WithPrefix(prefix string) *ArpanetDocumentsTable {
	return newArpanetDocumentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArpanetDocumentsTable with assigned table suffix
func (a ArpanetDocumentsTable) WithSuffix(suffix string) *ArpanetDocumentsTable {
	return newArpanetDocumentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArpanetDocumentsTable(schemaName, tableName, alias string) *ArpanetDocumentsTable {
	return &ArpanetDocumentsTable{
		arpanetDocumentsTable: newArpanetDocumentsTableImpl(schemaName, tableName, alias),
		NEW:                   newArpanetDocumentsTableImpl("", "new", ""),
	}
}

func newArpanetDocumentsTableImpl(schemaName, tableName, alias string) arpanetDocumentsTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		UpdatedAtColumn   = mysql.TimestampColumn("updated_at")
		DeletedAtColumn   = mysql.TimestampColumn("deleted_at")
		TitleColumn       = mysql.StringColumn("title")
		ContentColumn     = mysql.StringColumn("content")
		ContentTypeColumn = mysql.StringColumn("content_type")
		CreatorColumn     = mysql.IntegerColumn("creator")
		CreatorJobColumn  = mysql.StringColumn("creator_job")
		PublicColumn      = mysql.BoolColumn("public")
		ResponseIDColumn  = mysql.IntegerColumn("response_id")
		allColumns        = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, ContentColumn, ContentTypeColumn, CreatorColumn, CreatorJobColumn, PublicColumn, ResponseIDColumn}
		mutableColumns    = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, ContentColumn, ContentTypeColumn, CreatorColumn, CreatorJobColumn, PublicColumn, ResponseIDColumn}
	)

	return arpanetDocumentsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeletedAt:   DeletedAtColumn,
		Title:       TitleColumn,
		Content:     ContentColumn,
		ContentType: ContentTypeColumn,
		Creator:     CreatorColumn,
		CreatorJob:  CreatorJobColumn,
		Public:      PublicColumn,
		ResponseID:  ResponseIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
