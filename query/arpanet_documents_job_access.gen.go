// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/galexrt/arpanet/model"
)

func newDocumentJobAccess(db *gorm.DB, opts ...gen.DOOption) documentJobAccess {
	_documentJobAccess := documentJobAccess{}

	_documentJobAccess.documentJobAccessDo.UseDB(db, opts...)
	_documentJobAccess.documentJobAccessDo.UseModel(&model.DocumentJobAccess{})

	tableName := _documentJobAccess.documentJobAccessDo.TableName()
	_documentJobAccess.ALL = field.NewAsterisk(tableName)
	_documentJobAccess.ID = field.NewUint(tableName, "id")
	_documentJobAccess.CreatedAt = field.NewTime(tableName, "created_at")
	_documentJobAccess.UpdatedAt = field.NewTime(tableName, "updated_at")
	_documentJobAccess.DocumentID = field.NewUint(tableName, "document_id")
	_documentJobAccess.Name = field.NewString(tableName, "name")
	_documentJobAccess.MinimumGrade = field.NewInt(tableName, "minimum_grade")

	_documentJobAccess.fillFieldMap()

	return _documentJobAccess
}

type documentJobAccess struct {
	documentJobAccessDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DocumentID   field.Uint
	Name         field.String
	MinimumGrade field.Int

	fieldMap map[string]field.Expr
}

func (d documentJobAccess) Table(newTableName string) *documentJobAccess {
	d.documentJobAccessDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d documentJobAccess) As(alias string) *documentJobAccess {
	d.documentJobAccessDo.DO = *(d.documentJobAccessDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *documentJobAccess) updateTableName(table string) *documentJobAccess {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DocumentID = field.NewUint(table, "document_id")
	d.Name = field.NewString(table, "name")
	d.MinimumGrade = field.NewInt(table, "minimum_grade")

	d.fillFieldMap()

	return d
}

func (d *documentJobAccess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *documentJobAccess) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["document_id"] = d.DocumentID
	d.fieldMap["name"] = d.Name
	d.fieldMap["minimum_grade"] = d.MinimumGrade
}

func (d documentJobAccess) clone(db *gorm.DB) documentJobAccess {
	d.documentJobAccessDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d documentJobAccess) replaceDB(db *gorm.DB) documentJobAccess {
	d.documentJobAccessDo.ReplaceDB(db)
	return d
}

type documentJobAccessDo struct{ gen.DO }

type IDocumentJobAccessDo interface {
	gen.SubQuery
	Debug() IDocumentJobAccessDo
	WithContext(ctx context.Context) IDocumentJobAccessDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocumentJobAccessDo
	WriteDB() IDocumentJobAccessDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocumentJobAccessDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocumentJobAccessDo
	Not(conds ...gen.Condition) IDocumentJobAccessDo
	Or(conds ...gen.Condition) IDocumentJobAccessDo
	Select(conds ...field.Expr) IDocumentJobAccessDo
	Where(conds ...gen.Condition) IDocumentJobAccessDo
	Order(conds ...field.Expr) IDocumentJobAccessDo
	Distinct(cols ...field.Expr) IDocumentJobAccessDo
	Omit(cols ...field.Expr) IDocumentJobAccessDo
	Join(table schema.Tabler, on ...field.Expr) IDocumentJobAccessDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentJobAccessDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocumentJobAccessDo
	Group(cols ...field.Expr) IDocumentJobAccessDo
	Having(conds ...gen.Condition) IDocumentJobAccessDo
	Limit(limit int) IDocumentJobAccessDo
	Offset(offset int) IDocumentJobAccessDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentJobAccessDo
	Unscoped() IDocumentJobAccessDo
	Create(values ...*model.DocumentJobAccess) error
	CreateInBatches(values []*model.DocumentJobAccess, batchSize int) error
	Save(values ...*model.DocumentJobAccess) error
	First() (*model.DocumentJobAccess, error)
	Take() (*model.DocumentJobAccess, error)
	Last() (*model.DocumentJobAccess, error)
	Find() ([]*model.DocumentJobAccess, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocumentJobAccess, err error)
	FindInBatches(result *[]*model.DocumentJobAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DocumentJobAccess) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocumentJobAccessDo
	Assign(attrs ...field.AssignExpr) IDocumentJobAccessDo
	Joins(fields ...field.RelationField) IDocumentJobAccessDo
	Preload(fields ...field.RelationField) IDocumentJobAccessDo
	FirstOrInit() (*model.DocumentJobAccess, error)
	FirstOrCreate() (*model.DocumentJobAccess, error)
	FindByPage(offset int, limit int) (result []*model.DocumentJobAccess, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocumentJobAccessDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d documentJobAccessDo) Debug() IDocumentJobAccessDo {
	return d.withDO(d.DO.Debug())
}

func (d documentJobAccessDo) WithContext(ctx context.Context) IDocumentJobAccessDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d documentJobAccessDo) ReadDB() IDocumentJobAccessDo {
	return d.Clauses(dbresolver.Read)
}

func (d documentJobAccessDo) WriteDB() IDocumentJobAccessDo {
	return d.Clauses(dbresolver.Write)
}

func (d documentJobAccessDo) Session(config *gorm.Session) IDocumentJobAccessDo {
	return d.withDO(d.DO.Session(config))
}

func (d documentJobAccessDo) Clauses(conds ...clause.Expression) IDocumentJobAccessDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d documentJobAccessDo) Returning(value interface{}, columns ...string) IDocumentJobAccessDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d documentJobAccessDo) Not(conds ...gen.Condition) IDocumentJobAccessDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d documentJobAccessDo) Or(conds ...gen.Condition) IDocumentJobAccessDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d documentJobAccessDo) Select(conds ...field.Expr) IDocumentJobAccessDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d documentJobAccessDo) Where(conds ...gen.Condition) IDocumentJobAccessDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d documentJobAccessDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDocumentJobAccessDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d documentJobAccessDo) Order(conds ...field.Expr) IDocumentJobAccessDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d documentJobAccessDo) Distinct(cols ...field.Expr) IDocumentJobAccessDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d documentJobAccessDo) Omit(cols ...field.Expr) IDocumentJobAccessDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d documentJobAccessDo) Join(table schema.Tabler, on ...field.Expr) IDocumentJobAccessDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d documentJobAccessDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentJobAccessDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d documentJobAccessDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocumentJobAccessDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d documentJobAccessDo) Group(cols ...field.Expr) IDocumentJobAccessDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d documentJobAccessDo) Having(conds ...gen.Condition) IDocumentJobAccessDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d documentJobAccessDo) Limit(limit int) IDocumentJobAccessDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d documentJobAccessDo) Offset(offset int) IDocumentJobAccessDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d documentJobAccessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentJobAccessDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d documentJobAccessDo) Unscoped() IDocumentJobAccessDo {
	return d.withDO(d.DO.Unscoped())
}

func (d documentJobAccessDo) Create(values ...*model.DocumentJobAccess) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d documentJobAccessDo) CreateInBatches(values []*model.DocumentJobAccess, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d documentJobAccessDo) Save(values ...*model.DocumentJobAccess) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d documentJobAccessDo) First() (*model.DocumentJobAccess, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentJobAccess), nil
	}
}

func (d documentJobAccessDo) Take() (*model.DocumentJobAccess, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentJobAccess), nil
	}
}

func (d documentJobAccessDo) Last() (*model.DocumentJobAccess, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentJobAccess), nil
	}
}

func (d documentJobAccessDo) Find() ([]*model.DocumentJobAccess, error) {
	result, err := d.DO.Find()
	return result.([]*model.DocumentJobAccess), err
}

func (d documentJobAccessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocumentJobAccess, err error) {
	buf := make([]*model.DocumentJobAccess, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d documentJobAccessDo) FindInBatches(result *[]*model.DocumentJobAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d documentJobAccessDo) Attrs(attrs ...field.AssignExpr) IDocumentJobAccessDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d documentJobAccessDo) Assign(attrs ...field.AssignExpr) IDocumentJobAccessDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d documentJobAccessDo) Joins(fields ...field.RelationField) IDocumentJobAccessDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d documentJobAccessDo) Preload(fields ...field.RelationField) IDocumentJobAccessDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d documentJobAccessDo) FirstOrInit() (*model.DocumentJobAccess, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentJobAccess), nil
	}
}

func (d documentJobAccessDo) FirstOrCreate() (*model.DocumentJobAccess, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentJobAccess), nil
	}
}

func (d documentJobAccessDo) FindByPage(offset int, limit int) (result []*model.DocumentJobAccess, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d documentJobAccessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d documentJobAccessDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d documentJobAccessDo) Delete(models ...*model.DocumentJobAccess) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *documentJobAccessDo) withDO(do gen.Dao) *documentJobAccessDo {
	d.DO = *do.(*gen.DO)
	return d
}
