// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/galexrt/arpanet/model"
)

func newAccounts(db *gorm.DB, opts ...gen.DOOption) accounts {
	_accounts := accounts{}

	_accounts.accountsDo.UseDB(db, opts...)
	_accounts.accountsDo.UseModel(&model.Account{})

	tableName := _accounts.accountsDo.TableName()
	_accounts.ALL = field.NewAsterisk(tableName)
	_accounts.ID = field.NewUint(tableName, "id")
	_accounts.CreatedAt = field.NewTime(tableName, "created_at")
	_accounts.UpdatedAt = field.NewTime(tableName, "updated_at")
	_accounts.Enabled = field.NewBool(tableName, "enabled")
	_accounts.Username = field.NewString(tableName, "username")
	_accounts.HashedPassword = field.NewBytes(tableName, "password")

	_accounts.fillFieldMap()

	return _accounts
}

type accounts struct {
	accountsDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Enabled        field.Bool
	Username       field.String
	HashedPassword field.Bytes

	fieldMap map[string]field.Expr
}

func (a accounts) Table(newTableName string) *accounts {
	a.accountsDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accounts) As(alias string) *accounts {
	a.accountsDo.DO = *(a.accountsDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accounts) updateTableName(table string) *accounts {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.Enabled = field.NewBool(table, "enabled")
	a.Username = field.NewString(table, "username")
	a.HashedPassword = field.NewBytes(table, "password")

	a.fillFieldMap()

	return a
}

func (a *accounts) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accounts) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["enabled"] = a.Enabled
	a.fieldMap["username"] = a.Username
	a.fieldMap["password"] = a.HashedPassword
}

func (a accounts) clone(db *gorm.DB) accounts {
	a.accountsDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accounts) replaceDB(db *gorm.DB) accounts {
	a.accountsDo.ReplaceDB(db)
	return a
}

type accountsDo struct{ gen.DO }

type IAccountsDo interface {
	gen.SubQuery
	Debug() IAccountsDo
	WithContext(ctx context.Context) IAccountsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccountsDo
	WriteDB() IAccountsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccountsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccountsDo
	Not(conds ...gen.Condition) IAccountsDo
	Or(conds ...gen.Condition) IAccountsDo
	Select(conds ...field.Expr) IAccountsDo
	Where(conds ...gen.Condition) IAccountsDo
	Order(conds ...field.Expr) IAccountsDo
	Distinct(cols ...field.Expr) IAccountsDo
	Omit(cols ...field.Expr) IAccountsDo
	Join(table schema.Tabler, on ...field.Expr) IAccountsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccountsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccountsDo
	Group(cols ...field.Expr) IAccountsDo
	Having(conds ...gen.Condition) IAccountsDo
	Limit(limit int) IAccountsDo
	Offset(offset int) IAccountsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountsDo
	Unscoped() IAccountsDo
	Create(values ...*model.Account) error
	CreateInBatches(values []*model.Account, batchSize int) error
	Save(values ...*model.Account) error
	First() (*model.Account, error)
	Take() (*model.Account, error)
	Last() (*model.Account, error)
	Find() ([]*model.Account, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Account, err error)
	FindInBatches(result *[]*model.Account, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Account) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccountsDo
	Assign(attrs ...field.AssignExpr) IAccountsDo
	Joins(fields ...field.RelationField) IAccountsDo
	Preload(fields ...field.RelationField) IAccountsDo
	FirstOrInit() (*model.Account, error)
	FirstOrCreate() (*model.Account, error)
	FindByPage(offset int, limit int) (result []*model.Account, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccountsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a accountsDo) Debug() IAccountsDo {
	return a.withDO(a.DO.Debug())
}

func (a accountsDo) WithContext(ctx context.Context) IAccountsDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountsDo) ReadDB() IAccountsDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountsDo) WriteDB() IAccountsDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountsDo) Session(config *gorm.Session) IAccountsDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountsDo) Clauses(conds ...clause.Expression) IAccountsDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountsDo) Returning(value interface{}, columns ...string) IAccountsDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountsDo) Not(conds ...gen.Condition) IAccountsDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountsDo) Or(conds ...gen.Condition) IAccountsDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountsDo) Select(conds ...field.Expr) IAccountsDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountsDo) Where(conds ...gen.Condition) IAccountsDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAccountsDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a accountsDo) Order(conds ...field.Expr) IAccountsDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountsDo) Distinct(cols ...field.Expr) IAccountsDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountsDo) Omit(cols ...field.Expr) IAccountsDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountsDo) Join(table schema.Tabler, on ...field.Expr) IAccountsDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccountsDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountsDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccountsDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountsDo) Group(cols ...field.Expr) IAccountsDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountsDo) Having(conds ...gen.Condition) IAccountsDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountsDo) Limit(limit int) IAccountsDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountsDo) Offset(offset int) IAccountsDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountsDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountsDo) Unscoped() IAccountsDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountsDo) Create(values ...*model.Account) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountsDo) CreateInBatches(values []*model.Account, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountsDo) Save(values ...*model.Account) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountsDo) First() (*model.Account, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Account), nil
	}
}

func (a accountsDo) Take() (*model.Account, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Account), nil
	}
}

func (a accountsDo) Last() (*model.Account, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Account), nil
	}
}

func (a accountsDo) Find() ([]*model.Account, error) {
	result, err := a.DO.Find()
	return result.([]*model.Account), err
}

func (a accountsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Account, err error) {
	buf := make([]*model.Account, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountsDo) FindInBatches(result *[]*model.Account, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountsDo) Attrs(attrs ...field.AssignExpr) IAccountsDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountsDo) Assign(attrs ...field.AssignExpr) IAccountsDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountsDo) Joins(fields ...field.RelationField) IAccountsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountsDo) Preload(fields ...field.RelationField) IAccountsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountsDo) FirstOrInit() (*model.Account, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Account), nil
	}
}

func (a accountsDo) FirstOrCreate() (*model.Account, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Account), nil
	}
}

func (a accountsDo) FindByPage(offset int, limit int) (result []*model.Account, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountsDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountsDo) Delete(models ...*model.Account) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountsDo) withDO(do gen.Dao) *accountsDo {
	a.DO = *do.(*gen.DO)
	return a
}
