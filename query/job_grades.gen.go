// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/galexrt/arpanet/model"
)

func newJobGrade(db *gorm.DB, opts ...gen.DOOption) jobGrade {
	_jobGrade := jobGrade{}

	_jobGrade.jobGradeDo.UseDB(db, opts...)
	_jobGrade.jobGradeDo.UseModel(&model.JobGrade{})

	tableName := _jobGrade.jobGradeDo.TableName()
	_jobGrade.ALL = field.NewAsterisk(tableName)
	_jobGrade.JobName = field.NewString(tableName, "job_name")
	_jobGrade.Grade = field.NewInt(tableName, "grade")
	_jobGrade.Label = field.NewString(tableName, "label")
	_jobGrade.SkinFemale = field.NewString(tableName, "skin_female")

	_jobGrade.fillFieldMap()

	return _jobGrade
}

type jobGrade struct {
	jobGradeDo

	ALL        field.Asterisk
	JobName    field.String
	Grade      field.Int
	Label      field.String
	SkinFemale field.String

	fieldMap map[string]field.Expr
}

func (j jobGrade) Table(newTableName string) *jobGrade {
	j.jobGradeDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobGrade) As(alias string) *jobGrade {
	j.jobGradeDo.DO = *(j.jobGradeDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobGrade) updateTableName(table string) *jobGrade {
	j.ALL = field.NewAsterisk(table)
	j.JobName = field.NewString(table, "job_name")
	j.Grade = field.NewInt(table, "grade")
	j.Label = field.NewString(table, "label")
	j.SkinFemale = field.NewString(table, "skin_female")

	j.fillFieldMap()

	return j
}

func (j *jobGrade) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobGrade) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 4)
	j.fieldMap["job_name"] = j.JobName
	j.fieldMap["grade"] = j.Grade
	j.fieldMap["label"] = j.Label
	j.fieldMap["skin_female"] = j.SkinFemale
}

func (j jobGrade) clone(db *gorm.DB) jobGrade {
	j.jobGradeDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobGrade) replaceDB(db *gorm.DB) jobGrade {
	j.jobGradeDo.ReplaceDB(db)
	return j
}

type jobGradeDo struct{ gen.DO }

type IJobGradeDo interface {
	gen.SubQuery
	Debug() IJobGradeDo
	WithContext(ctx context.Context) IJobGradeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJobGradeDo
	WriteDB() IJobGradeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJobGradeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJobGradeDo
	Not(conds ...gen.Condition) IJobGradeDo
	Or(conds ...gen.Condition) IJobGradeDo
	Select(conds ...field.Expr) IJobGradeDo
	Where(conds ...gen.Condition) IJobGradeDo
	Order(conds ...field.Expr) IJobGradeDo
	Distinct(cols ...field.Expr) IJobGradeDo
	Omit(cols ...field.Expr) IJobGradeDo
	Join(table schema.Tabler, on ...field.Expr) IJobGradeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJobGradeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJobGradeDo
	Group(cols ...field.Expr) IJobGradeDo
	Having(conds ...gen.Condition) IJobGradeDo
	Limit(limit int) IJobGradeDo
	Offset(offset int) IJobGradeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJobGradeDo
	Unscoped() IJobGradeDo
	Create(values ...*model.JobGrade) error
	CreateInBatches(values []*model.JobGrade, batchSize int) error
	Save(values ...*model.JobGrade) error
	First() (*model.JobGrade, error)
	Take() (*model.JobGrade, error)
	Last() (*model.JobGrade, error)
	Find() ([]*model.JobGrade, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobGrade, err error)
	FindInBatches(result *[]*model.JobGrade, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JobGrade) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJobGradeDo
	Assign(attrs ...field.AssignExpr) IJobGradeDo
	Joins(fields ...field.RelationField) IJobGradeDo
	Preload(fields ...field.RelationField) IJobGradeDo
	FirstOrInit() (*model.JobGrade, error)
	FirstOrCreate() (*model.JobGrade, error)
	FindByPage(offset int, limit int) (result []*model.JobGrade, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJobGradeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jobGradeDo) Debug() IJobGradeDo {
	return j.withDO(j.DO.Debug())
}

func (j jobGradeDo) WithContext(ctx context.Context) IJobGradeDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobGradeDo) ReadDB() IJobGradeDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobGradeDo) WriteDB() IJobGradeDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobGradeDo) Session(config *gorm.Session) IJobGradeDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobGradeDo) Clauses(conds ...clause.Expression) IJobGradeDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobGradeDo) Returning(value interface{}, columns ...string) IJobGradeDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobGradeDo) Not(conds ...gen.Condition) IJobGradeDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobGradeDo) Or(conds ...gen.Condition) IJobGradeDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobGradeDo) Select(conds ...field.Expr) IJobGradeDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobGradeDo) Where(conds ...gen.Condition) IJobGradeDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobGradeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IJobGradeDo {
	return j.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (j jobGradeDo) Order(conds ...field.Expr) IJobGradeDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobGradeDo) Distinct(cols ...field.Expr) IJobGradeDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobGradeDo) Omit(cols ...field.Expr) IJobGradeDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobGradeDo) Join(table schema.Tabler, on ...field.Expr) IJobGradeDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobGradeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJobGradeDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobGradeDo) RightJoin(table schema.Tabler, on ...field.Expr) IJobGradeDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobGradeDo) Group(cols ...field.Expr) IJobGradeDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobGradeDo) Having(conds ...gen.Condition) IJobGradeDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobGradeDo) Limit(limit int) IJobGradeDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobGradeDo) Offset(offset int) IJobGradeDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobGradeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJobGradeDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobGradeDo) Unscoped() IJobGradeDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobGradeDo) Create(values ...*model.JobGrade) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobGradeDo) CreateInBatches(values []*model.JobGrade, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobGradeDo) Save(values ...*model.JobGrade) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobGradeDo) First() (*model.JobGrade, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobGrade), nil
	}
}

func (j jobGradeDo) Take() (*model.JobGrade, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobGrade), nil
	}
}

func (j jobGradeDo) Last() (*model.JobGrade, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobGrade), nil
	}
}

func (j jobGradeDo) Find() ([]*model.JobGrade, error) {
	result, err := j.DO.Find()
	return result.([]*model.JobGrade), err
}

func (j jobGradeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobGrade, err error) {
	buf := make([]*model.JobGrade, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobGradeDo) FindInBatches(result *[]*model.JobGrade, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobGradeDo) Attrs(attrs ...field.AssignExpr) IJobGradeDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobGradeDo) Assign(attrs ...field.AssignExpr) IJobGradeDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobGradeDo) Joins(fields ...field.RelationField) IJobGradeDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobGradeDo) Preload(fields ...field.RelationField) IJobGradeDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobGradeDo) FirstOrInit() (*model.JobGrade, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobGrade), nil
	}
}

func (j jobGradeDo) FirstOrCreate() (*model.JobGrade, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobGrade), nil
	}
}

func (j jobGradeDo) FindByPage(offset int, limit int) (result []*model.JobGrade, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobGradeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobGradeDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobGradeDo) Delete(models ...*model.JobGrade) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobGradeDo) withDO(do gen.Dao) *jobGradeDo {
	j.DO = *do.(*gen.DO)
	return j
}
