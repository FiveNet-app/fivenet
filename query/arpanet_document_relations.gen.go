// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/galexrt/arpanet/model"
)

func newDocumentMentions(db *gorm.DB, opts ...gen.DOOption) documentMentions {
	_documentMentions := documentMentions{}

	_documentMentions.documentMentionsDo.UseDB(db, opts...)
	_documentMentions.documentMentionsDo.UseModel(&model.DocumentMentions{})

	tableName := _documentMentions.documentMentionsDo.TableName()
	_documentMentions.ALL = field.NewAsterisk(tableName)
	_documentMentions.ID = field.NewInt32(tableName, "id")
	_documentMentions.CreatedAt = field.NewTime(tableName, "created_at")
	_documentMentions.UpdatedAt = field.NewTime(tableName, "last_seen")
	_documentMentions.DocumentID = field.NewUint(tableName, "document_id")
	_documentMentions.Identifier = field.NewString(tableName, "identifier")
	_documentMentions.Job = field.NewString(tableName, "job")
	_documentMentions.JobGrade = field.NewInt(tableName, "job_grade")
	_documentMentions.Firstname = field.NewString(tableName, "firstname")
	_documentMentions.Lastname = field.NewString(tableName, "lastname")
	_documentMentions.Dateofbirth = field.NewString(tableName, "dateofbirth")
	_documentMentions.Sex = field.NewString(tableName, "sex")
	_documentMentions.Height = field.NewString(tableName, "height")
	_documentMentions.Jail = field.NewInt32(tableName, "jail")
	_documentMentions.PhoneNumber = field.NewString(tableName, "phone_number")
	_documentMentions.Accounts = field.NewField(tableName, "accounts")
	_documentMentions.Disabled = field.NewBool(tableName, "disabled")
	_documentMentions.Visum = field.NewInt32(tableName, "visum")
	_documentMentions.Playtime = field.NewInt32(tableName, "playtime")
	_documentMentions.UserProps = documentMentionsHasManyUserProps{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserProps", "model.UserProps"),
	}

	_documentMentions.UserLicenses = documentMentionsHasManyUserLicenses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserLicenses", "model.UserLicense"),
	}

	_documentMentions.Documents = documentMentionsHasManyDocuments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Documents", "model.Document"),
		Responses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Documents.Responses", "model.Document"),
		},
		Mentions: struct {
			field.RelationField
			UserProps struct {
				field.RelationField
			}
			UserLicenses struct {
				field.RelationField
			}
			Documents struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Documents.Mentions", "model.DocumentMentions"),
			UserProps: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Documents.Mentions.UserProps", "model.UserProps"),
			},
			UserLicenses: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Documents.Mentions.UserLicenses", "model.UserLicense"),
			},
			Documents: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Documents.Mentions.Documents", "model.Document"),
			},
		},
		JobAccess: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Documents.JobAccess", "model.DocumentJobAccess"),
		},
		UserAccess: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Documents.UserAccess", "model.DocumentUserAccess"),
		},
	}

	_documentMentions.fillFieldMap()

	return _documentMentions
}

type documentMentions struct {
	documentMentionsDo

	ALL         field.Asterisk
	ID          field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DocumentID  field.Uint
	Identifier  field.String
	Job         field.String
	JobGrade    field.Int
	Firstname   field.String
	Lastname    field.String
	Dateofbirth field.String
	Sex         field.String
	Height      field.String
	Jail        field.Int32
	PhoneNumber field.String
	Accounts    field.Field
	Disabled    field.Bool
	Visum       field.Int32
	Playtime    field.Int32
	UserProps   documentMentionsHasManyUserProps

	UserLicenses documentMentionsHasManyUserLicenses

	Documents documentMentionsHasManyDocuments

	fieldMap map[string]field.Expr
}

func (d documentMentions) Table(newTableName string) *documentMentions {
	d.documentMentionsDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d documentMentions) As(alias string) *documentMentions {
	d.documentMentionsDo.DO = *(d.documentMentionsDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *documentMentions) updateTableName(table string) *documentMentions {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "last_seen")
	d.DocumentID = field.NewUint(table, "document_id")
	d.Identifier = field.NewString(table, "identifier")
	d.Job = field.NewString(table, "job")
	d.JobGrade = field.NewInt(table, "job_grade")
	d.Firstname = field.NewString(table, "firstname")
	d.Lastname = field.NewString(table, "lastname")
	d.Dateofbirth = field.NewString(table, "dateofbirth")
	d.Sex = field.NewString(table, "sex")
	d.Height = field.NewString(table, "height")
	d.Jail = field.NewInt32(table, "jail")
	d.PhoneNumber = field.NewString(table, "phone_number")
	d.Accounts = field.NewField(table, "accounts")
	d.Disabled = field.NewBool(table, "disabled")
	d.Visum = field.NewInt32(table, "visum")
	d.Playtime = field.NewInt32(table, "playtime")

	d.fillFieldMap()

	return d
}

func (d *documentMentions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *documentMentions) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 21)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["last_seen"] = d.UpdatedAt
	d.fieldMap["document_id"] = d.DocumentID
	d.fieldMap["identifier"] = d.Identifier
	d.fieldMap["job"] = d.Job
	d.fieldMap["job_grade"] = d.JobGrade
	d.fieldMap["firstname"] = d.Firstname
	d.fieldMap["lastname"] = d.Lastname
	d.fieldMap["dateofbirth"] = d.Dateofbirth
	d.fieldMap["sex"] = d.Sex
	d.fieldMap["height"] = d.Height
	d.fieldMap["jail"] = d.Jail
	d.fieldMap["phone_number"] = d.PhoneNumber
	d.fieldMap["accounts"] = d.Accounts
	d.fieldMap["disabled"] = d.Disabled
	d.fieldMap["visum"] = d.Visum
	d.fieldMap["playtime"] = d.Playtime

}

func (d documentMentions) clone(db *gorm.DB) documentMentions {
	d.documentMentionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d documentMentions) replaceDB(db *gorm.DB) documentMentions {
	d.documentMentionsDo.ReplaceDB(db)
	return d
}

type documentMentionsHasManyUserProps struct {
	db *gorm.DB

	field.RelationField
}

func (a documentMentionsHasManyUserProps) Where(conds ...field.Expr) *documentMentionsHasManyUserProps {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentMentionsHasManyUserProps) WithContext(ctx context.Context) *documentMentionsHasManyUserProps {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentMentionsHasManyUserProps) Model(m *model.DocumentMentions) *documentMentionsHasManyUserPropsTx {
	return &documentMentionsHasManyUserPropsTx{a.db.Model(m).Association(a.Name())}
}

type documentMentionsHasManyUserPropsTx struct{ tx *gorm.Association }

func (a documentMentionsHasManyUserPropsTx) Find() (result []*model.UserProps, err error) {
	return result, a.tx.Find(&result)
}

func (a documentMentionsHasManyUserPropsTx) Append(values ...*model.UserProps) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentMentionsHasManyUserPropsTx) Replace(values ...*model.UserProps) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentMentionsHasManyUserPropsTx) Delete(values ...*model.UserProps) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentMentionsHasManyUserPropsTx) Clear() error {
	return a.tx.Clear()
}

func (a documentMentionsHasManyUserPropsTx) Count() int64 {
	return a.tx.Count()
}

type documentMentionsHasManyUserLicenses struct {
	db *gorm.DB

	field.RelationField
}

func (a documentMentionsHasManyUserLicenses) Where(conds ...field.Expr) *documentMentionsHasManyUserLicenses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentMentionsHasManyUserLicenses) WithContext(ctx context.Context) *documentMentionsHasManyUserLicenses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentMentionsHasManyUserLicenses) Model(m *model.DocumentMentions) *documentMentionsHasManyUserLicensesTx {
	return &documentMentionsHasManyUserLicensesTx{a.db.Model(m).Association(a.Name())}
}

type documentMentionsHasManyUserLicensesTx struct{ tx *gorm.Association }

func (a documentMentionsHasManyUserLicensesTx) Find() (result []*model.UserLicense, err error) {
	return result, a.tx.Find(&result)
}

func (a documentMentionsHasManyUserLicensesTx) Append(values ...*model.UserLicense) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentMentionsHasManyUserLicensesTx) Replace(values ...*model.UserLicense) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentMentionsHasManyUserLicensesTx) Delete(values ...*model.UserLicense) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentMentionsHasManyUserLicensesTx) Clear() error {
	return a.tx.Clear()
}

func (a documentMentionsHasManyUserLicensesTx) Count() int64 {
	return a.tx.Count()
}

type documentMentionsHasManyDocuments struct {
	db *gorm.DB

	field.RelationField

	Responses struct {
		field.RelationField
	}
	Mentions struct {
		field.RelationField
		UserProps struct {
			field.RelationField
		}
		UserLicenses struct {
			field.RelationField
		}
		Documents struct {
			field.RelationField
		}
	}
	JobAccess struct {
		field.RelationField
	}
	UserAccess struct {
		field.RelationField
	}
}

func (a documentMentionsHasManyDocuments) Where(conds ...field.Expr) *documentMentionsHasManyDocuments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentMentionsHasManyDocuments) WithContext(ctx context.Context) *documentMentionsHasManyDocuments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentMentionsHasManyDocuments) Model(m *model.DocumentMentions) *documentMentionsHasManyDocumentsTx {
	return &documentMentionsHasManyDocumentsTx{a.db.Model(m).Association(a.Name())}
}

type documentMentionsHasManyDocumentsTx struct{ tx *gorm.Association }

func (a documentMentionsHasManyDocumentsTx) Find() (result []*model.Document, err error) {
	return result, a.tx.Find(&result)
}

func (a documentMentionsHasManyDocumentsTx) Append(values ...*model.Document) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentMentionsHasManyDocumentsTx) Replace(values ...*model.Document) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentMentionsHasManyDocumentsTx) Delete(values ...*model.Document) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentMentionsHasManyDocumentsTx) Clear() error {
	return a.tx.Clear()
}

func (a documentMentionsHasManyDocumentsTx) Count() int64 {
	return a.tx.Count()
}

type documentMentionsDo struct{ gen.DO }

type IDocumentMentionsDo interface {
	gen.SubQuery
	Debug() IDocumentMentionsDo
	WithContext(ctx context.Context) IDocumentMentionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocumentMentionsDo
	WriteDB() IDocumentMentionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocumentMentionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocumentMentionsDo
	Not(conds ...gen.Condition) IDocumentMentionsDo
	Or(conds ...gen.Condition) IDocumentMentionsDo
	Select(conds ...field.Expr) IDocumentMentionsDo
	Where(conds ...gen.Condition) IDocumentMentionsDo
	Order(conds ...field.Expr) IDocumentMentionsDo
	Distinct(cols ...field.Expr) IDocumentMentionsDo
	Omit(cols ...field.Expr) IDocumentMentionsDo
	Join(table schema.Tabler, on ...field.Expr) IDocumentMentionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentMentionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocumentMentionsDo
	Group(cols ...field.Expr) IDocumentMentionsDo
	Having(conds ...gen.Condition) IDocumentMentionsDo
	Limit(limit int) IDocumentMentionsDo
	Offset(offset int) IDocumentMentionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentMentionsDo
	Unscoped() IDocumentMentionsDo
	Create(values ...*model.DocumentMentions) error
	CreateInBatches(values []*model.DocumentMentions, batchSize int) error
	Save(values ...*model.DocumentMentions) error
	First() (*model.DocumentMentions, error)
	Take() (*model.DocumentMentions, error)
	Last() (*model.DocumentMentions, error)
	Find() ([]*model.DocumentMentions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocumentMentions, err error)
	FindInBatches(result *[]*model.DocumentMentions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DocumentMentions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocumentMentionsDo
	Assign(attrs ...field.AssignExpr) IDocumentMentionsDo
	Joins(fields ...field.RelationField) IDocumentMentionsDo
	Preload(fields ...field.RelationField) IDocumentMentionsDo
	FirstOrInit() (*model.DocumentMentions, error)
	FirstOrCreate() (*model.DocumentMentions, error)
	FindByPage(offset int, limit int) (result []*model.DocumentMentions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocumentMentionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d documentMentionsDo) Debug() IDocumentMentionsDo {
	return d.withDO(d.DO.Debug())
}

func (d documentMentionsDo) WithContext(ctx context.Context) IDocumentMentionsDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d documentMentionsDo) ReadDB() IDocumentMentionsDo {
	return d.Clauses(dbresolver.Read)
}

func (d documentMentionsDo) WriteDB() IDocumentMentionsDo {
	return d.Clauses(dbresolver.Write)
}

func (d documentMentionsDo) Session(config *gorm.Session) IDocumentMentionsDo {
	return d.withDO(d.DO.Session(config))
}

func (d documentMentionsDo) Clauses(conds ...clause.Expression) IDocumentMentionsDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d documentMentionsDo) Returning(value interface{}, columns ...string) IDocumentMentionsDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d documentMentionsDo) Not(conds ...gen.Condition) IDocumentMentionsDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d documentMentionsDo) Or(conds ...gen.Condition) IDocumentMentionsDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d documentMentionsDo) Select(conds ...field.Expr) IDocumentMentionsDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d documentMentionsDo) Where(conds ...gen.Condition) IDocumentMentionsDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d documentMentionsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDocumentMentionsDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d documentMentionsDo) Order(conds ...field.Expr) IDocumentMentionsDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d documentMentionsDo) Distinct(cols ...field.Expr) IDocumentMentionsDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d documentMentionsDo) Omit(cols ...field.Expr) IDocumentMentionsDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d documentMentionsDo) Join(table schema.Tabler, on ...field.Expr) IDocumentMentionsDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d documentMentionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentMentionsDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d documentMentionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocumentMentionsDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d documentMentionsDo) Group(cols ...field.Expr) IDocumentMentionsDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d documentMentionsDo) Having(conds ...gen.Condition) IDocumentMentionsDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d documentMentionsDo) Limit(limit int) IDocumentMentionsDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d documentMentionsDo) Offset(offset int) IDocumentMentionsDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d documentMentionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentMentionsDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d documentMentionsDo) Unscoped() IDocumentMentionsDo {
	return d.withDO(d.DO.Unscoped())
}

func (d documentMentionsDo) Create(values ...*model.DocumentMentions) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d documentMentionsDo) CreateInBatches(values []*model.DocumentMentions, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d documentMentionsDo) Save(values ...*model.DocumentMentions) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d documentMentionsDo) First() (*model.DocumentMentions, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentMentions), nil
	}
}

func (d documentMentionsDo) Take() (*model.DocumentMentions, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentMentions), nil
	}
}

func (d documentMentionsDo) Last() (*model.DocumentMentions, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentMentions), nil
	}
}

func (d documentMentionsDo) Find() ([]*model.DocumentMentions, error) {
	result, err := d.DO.Find()
	return result.([]*model.DocumentMentions), err
}

func (d documentMentionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocumentMentions, err error) {
	buf := make([]*model.DocumentMentions, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d documentMentionsDo) FindInBatches(result *[]*model.DocumentMentions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d documentMentionsDo) Attrs(attrs ...field.AssignExpr) IDocumentMentionsDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d documentMentionsDo) Assign(attrs ...field.AssignExpr) IDocumentMentionsDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d documentMentionsDo) Joins(fields ...field.RelationField) IDocumentMentionsDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d documentMentionsDo) Preload(fields ...field.RelationField) IDocumentMentionsDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d documentMentionsDo) FirstOrInit() (*model.DocumentMentions, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentMentions), nil
	}
}

func (d documentMentionsDo) FirstOrCreate() (*model.DocumentMentions, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentMentions), nil
	}
}

func (d documentMentionsDo) FindByPage(offset int, limit int) (result []*model.DocumentMentions, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d documentMentionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d documentMentionsDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d documentMentionsDo) Delete(models ...*model.DocumentMentions) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *documentMentionsDo) withDO(do gen.Dao) *documentMentionsDo {
	d.DO = *do.(*gen.DO)
	return d
}
