// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/documents/documents.proto

package documents

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Document with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Document) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Document with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentMultiError, or nil
// if none found.
func (m *Document) ValidateAll() error {
	return m.validate(true)
}

func (m *Document) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for ContentType

	// no validation rules for Closed

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorJob

	// no validation rules for Public

	// no validation rules for TargetDocumentId

	if len(errors) > 0 {
		return DocumentMultiError(errors)
	}

	return nil
}

// DocumentMultiError is an error wrapping multiple validation errors returned
// by Document.ValidateAll() if the designated constraints aren't met.
type DocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentMultiError) AllErrors() []error { return m }

// DocumentValidationError is the validation error returned by
// Document.Validate if the designated constraints aren't met.
type DocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentValidationError) ErrorName() string { return "DocumentValidationError" }

// Error satisfies the builtin error interface
func (e DocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentValidationError{}

// Validate checks the field values on DocumentTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DocumentTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentTemplateMultiError, or nil if none found.
func (m *DocumentTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Job

	// no validation rules for JobGrade

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for ContentTitle

	// no validation rules for Content

	// no validation rules for AdditionalData

	// no validation rules for CreatorID

	if len(errors) > 0 {
		return DocumentTemplateMultiError(errors)
	}

	return nil
}

// DocumentTemplateMultiError is an error wrapping multiple validation errors
// returned by DocumentTemplate.ValidateAll() if the designated constraints
// aren't met.
type DocumentTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentTemplateMultiError) AllErrors() []error { return m }

// DocumentTemplateValidationError is the validation error returned by
// DocumentTemplate.Validate if the designated constraints aren't met.
type DocumentTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentTemplateValidationError) ErrorName() string { return "DocumentTemplateValidationError" }

// Error satisfies the builtin error interface
func (e DocumentTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentTemplateValidationError{}

// Validate checks the field values on DocumentTemplateShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DocumentTemplateShort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentTemplateShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentTemplateShortMultiError, or nil if none found.
func (m *DocumentTemplateShort) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentTemplateShort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Job

	// no validation rules for JobGrade

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for CreatorID

	if len(errors) > 0 {
		return DocumentTemplateShortMultiError(errors)
	}

	return nil
}

// DocumentTemplateShortMultiError is an error wrapping multiple validation
// errors returned by DocumentTemplateShort.ValidateAll() if the designated
// constraints aren't met.
type DocumentTemplateShortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentTemplateShortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentTemplateShortMultiError) AllErrors() []error { return m }

// DocumentTemplateShortValidationError is the validation error returned by
// DocumentTemplateShort.Validate if the designated constraints aren't met.
type DocumentTemplateShortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentTemplateShortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentTemplateShortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentTemplateShortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentTemplateShortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentTemplateShortValidationError) ErrorName() string {
	return "DocumentTemplateShortValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentTemplateShortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentTemplateShort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentTemplateShortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentTemplateShortValidationError{}

// Validate checks the field values on DocumentAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DocumentAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentAccessMultiError,
// or nil if none found.
func (m *DocumentAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentID

	for idx, item := range m.GetJobAccess() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentAccessValidationError{
						field:  fmt.Sprintf("JobAccess[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentAccessValidationError{
						field:  fmt.Sprintf("JobAccess[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentAccessValidationError{
					field:  fmt.Sprintf("JobAccess[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserAccess() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentAccessValidationError{
						field:  fmt.Sprintf("UserAccess[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentAccessValidationError{
						field:  fmt.Sprintf("UserAccess[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentAccessValidationError{
					field:  fmt.Sprintf("UserAccess[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DocumentAccessMultiError(errors)
	}

	return nil
}

// DocumentAccessMultiError is an error wrapping multiple validation errors
// returned by DocumentAccess.ValidateAll() if the designated constraints
// aren't met.
type DocumentAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentAccessMultiError) AllErrors() []error { return m }

// DocumentAccessValidationError is the validation error returned by
// DocumentAccess.Validate if the designated constraints aren't met.
type DocumentAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentAccessValidationError) ErrorName() string { return "DocumentAccessValidationError" }

// Error satisfies the builtin error interface
func (e DocumentAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentAccessValidationError{}

// Validate checks the field values on DocumentJobAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DocumentJobAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentJobAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentJobAccessMultiError, or nil if none found.
func (m *DocumentJobAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentJobAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentJobAccessValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentJobAccessValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentJobAccessValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentJobAccessValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentJobAccessValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentJobAccessValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentID

	// no validation rules for Name

	// no validation rules for MinimumGrade

	// no validation rules for Access

	if len(errors) > 0 {
		return DocumentJobAccessMultiError(errors)
	}

	return nil
}

// DocumentJobAccessMultiError is an error wrapping multiple validation errors
// returned by DocumentJobAccess.ValidateAll() if the designated constraints
// aren't met.
type DocumentJobAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentJobAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentJobAccessMultiError) AllErrors() []error { return m }

// DocumentJobAccessValidationError is the validation error returned by
// DocumentJobAccess.Validate if the designated constraints aren't met.
type DocumentJobAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentJobAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentJobAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentJobAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentJobAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentJobAccessValidationError) ErrorName() string {
	return "DocumentJobAccessValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentJobAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentJobAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentJobAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentJobAccessValidationError{}

// Validate checks the field values on DocumentUserAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DocumentUserAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentUserAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentUserAccessMultiError, or nil if none found.
func (m *DocumentUserAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentUserAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentUserAccessValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentUserAccessValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentUserAccessValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentUserAccessValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentUserAccessValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentUserAccessValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentID

	// no validation rules for UserID

	// no validation rules for Access

	if len(errors) > 0 {
		return DocumentUserAccessMultiError(errors)
	}

	return nil
}

// DocumentUserAccessMultiError is an error wrapping multiple validation errors
// returned by DocumentUserAccess.ValidateAll() if the designated constraints
// aren't met.
type DocumentUserAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentUserAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentUserAccessMultiError) AllErrors() []error { return m }

// DocumentUserAccessValidationError is the validation error returned by
// DocumentUserAccess.Validate if the designated constraints aren't met.
type DocumentUserAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentUserAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentUserAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentUserAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentUserAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentUserAccessValidationError) ErrorName() string {
	return "DocumentUserAccessValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentUserAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentUserAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentUserAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentUserAccessValidationError{}
