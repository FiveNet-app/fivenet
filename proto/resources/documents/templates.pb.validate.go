// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/documents/templates.proto

package documents

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DocumentTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DocumentTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentTemplateMultiError, or nil if none found.
func (m *DocumentTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetJob()) > 50 {
		err := DocumentTemplateValidationError{
			field:  "Job",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetJobGrade() < 0 {
		err := DocumentTemplateValidationError{
			field:  "JobGrade",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentTemplateValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentTemplateValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentTemplateValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) < 3 {
		err := DocumentTemplateValidationError{
			field:  "Title",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 255 {
		err := DocumentTemplateValidationError{
			field:  "Description",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContentTitle()) < 3 {
		err := DocumentTemplateValidationError{
			field:  "ContentTitle",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 12 {
		err := DocumentTemplateValidationError{
			field:  "Content",
			reason: "value length must be at least 12 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContent()) > 12288 {
		err := DocumentTemplateValidationError{
			field:  "Content",
			reason: "value length must be at most 12288 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentTemplateValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentTemplateValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentTemplateValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorId

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentTemplateValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentTemplateValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentTemplateValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentTemplateValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentTemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Creator != nil {

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentTemplateValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentTemplateValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentTemplateValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DocumentTemplateMultiError(errors)
	}

	return nil
}

// DocumentTemplateMultiError is an error wrapping multiple validation errors
// returned by DocumentTemplate.ValidateAll() if the designated constraints
// aren't met.
type DocumentTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentTemplateMultiError) AllErrors() []error { return m }

// DocumentTemplateValidationError is the validation error returned by
// DocumentTemplate.Validate if the designated constraints aren't met.
type DocumentTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentTemplateValidationError) ErrorName() string { return "DocumentTemplateValidationError" }

// Error satisfies the builtin error interface
func (e DocumentTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentTemplateValidationError{}

// Validate checks the field values on DocumentTemplateShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DocumentTemplateShort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentTemplateShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentTemplateShortMultiError, or nil if none found.
func (m *DocumentTemplateShort) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentTemplateShort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetJob()) > 50 {
		err := DocumentTemplateShortValidationError{
			field:  "Job",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CategoryId

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentTemplateShortValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentTemplateShortValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentTemplateShortValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) < 3 {
		err := DocumentTemplateShortValidationError{
			field:  "Title",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 255 {
		err := DocumentTemplateShortValidationError{
			field:  "Description",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentTemplateShortValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentTemplateShortValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentTemplateShortValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorId

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentTemplateShortValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentTemplateShortValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentTemplateShortValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentTemplateShortValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentTemplateShortValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentTemplateShortValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Creator != nil {

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentTemplateShortValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentTemplateShortValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentTemplateShortValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DocumentTemplateShortMultiError(errors)
	}

	return nil
}

// DocumentTemplateShortMultiError is an error wrapping multiple validation
// errors returned by DocumentTemplateShort.ValidateAll() if the designated
// constraints aren't met.
type DocumentTemplateShortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentTemplateShortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentTemplateShortMultiError) AllErrors() []error { return m }

// DocumentTemplateShortValidationError is the validation error returned by
// DocumentTemplateShort.Validate if the designated constraints aren't met.
type DocumentTemplateShortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentTemplateShortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentTemplateShortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentTemplateShortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentTemplateShortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentTemplateShortValidationError) ErrorName() string {
	return "DocumentTemplateShortValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentTemplateShortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentTemplateShort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentTemplateShortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentTemplateShortValidationError{}

// Validate checks the field values on TemplateSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TemplateSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateSchema with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateSchemaMultiError,
// or nil if none found.
func (m *TemplateSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequirements()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateSchemaValidationError{
					field:  "Requirements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateSchemaValidationError{
					field:  "Requirements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequirements()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateSchemaValidationError{
				field:  "Requirements",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TemplateSchemaMultiError(errors)
	}

	return nil
}

// TemplateSchemaMultiError is an error wrapping multiple validation errors
// returned by TemplateSchema.ValidateAll() if the designated constraints
// aren't met.
type TemplateSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateSchemaMultiError) AllErrors() []error { return m }

// TemplateSchemaValidationError is the validation error returned by
// TemplateSchema.Validate if the designated constraints aren't met.
type TemplateSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateSchemaValidationError) ErrorName() string { return "TemplateSchemaValidationError" }

// Error satisfies the builtin error interface
func (e TemplateSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateSchemaValidationError{}

// Validate checks the field values on TemplateRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TemplateRequirements) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateRequirementsMultiError, or nil if none found.
func (m *TemplateRequirements) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateRequirements) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Documents != nil {

		if all {
			switch v := interface{}(m.GetDocuments()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateRequirementsValidationError{
						field:  "Documents",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateRequirementsValidationError{
						field:  "Documents",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDocuments()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateRequirementsValidationError{
					field:  "Documents",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Users != nil {

		if all {
			switch v := interface{}(m.GetUsers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateRequirementsValidationError{
						field:  "Users",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateRequirementsValidationError{
						field:  "Users",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUsers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateRequirementsValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Vehicles != nil {

		if all {
			switch v := interface{}(m.GetVehicles()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateRequirementsValidationError{
						field:  "Vehicles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateRequirementsValidationError{
						field:  "Vehicles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVehicles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateRequirementsValidationError{
					field:  "Vehicles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TemplateRequirementsMultiError(errors)
	}

	return nil
}

// TemplateRequirementsMultiError is an error wrapping multiple validation
// errors returned by TemplateRequirements.ValidateAll() if the designated
// constraints aren't met.
type TemplateRequirementsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateRequirementsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateRequirementsMultiError) AllErrors() []error { return m }

// TemplateRequirementsValidationError is the validation error returned by
// TemplateRequirements.Validate if the designated constraints aren't met.
type TemplateRequirementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateRequirementsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateRequirementsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateRequirementsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateRequirementsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateRequirementsValidationError) ErrorName() string {
	return "TemplateRequirementsValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateRequirementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateRequirements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateRequirementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateRequirementsValidationError{}

// Validate checks the field values on ObjectSpecs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObjectSpecs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectSpecs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObjectSpecsMultiError, or
// nil if none found.
func (m *ObjectSpecs) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectSpecs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Required

	if m.Min != nil {
		// no validation rules for Min
	}

	if m.Max != nil {
		// no validation rules for Max
	}

	if len(errors) > 0 {
		return ObjectSpecsMultiError(errors)
	}

	return nil
}

// ObjectSpecsMultiError is an error wrapping multiple validation errors
// returned by ObjectSpecs.ValidateAll() if the designated constraints aren't met.
type ObjectSpecsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectSpecsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectSpecsMultiError) AllErrors() []error { return m }

// ObjectSpecsValidationError is the validation error returned by
// ObjectSpecs.Validate if the designated constraints aren't met.
type ObjectSpecsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectSpecsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectSpecsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectSpecsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectSpecsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectSpecsValidationError) ErrorName() string { return "ObjectSpecsValidationError" }

// Error satisfies the builtin error interface
func (e ObjectSpecsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectSpecs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectSpecsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectSpecsValidationError{}

// Validate checks the field values on TemplateData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TemplateData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateDataMultiError, or
// nil if none found.
func (m *TemplateData) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActiveChar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateDataValidationError{
					field:  "ActiveChar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateDataValidationError{
					field:  "ActiveChar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActiveChar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateDataValidationError{
				field:  "ActiveChar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetDocuments()) > 5 {
		err := TemplateDataValidationError{
			field:  "Documents",
			reason: "value must contain no more than 5 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateDataValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateDataValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateDataValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetUsers()) > 5 {
		err := TemplateDataValidationError{
			field:  "Users",
			reason: "value must contain no more than 5 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateDataValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateDataValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateDataValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetVehicles()) > 5 {
		err := TemplateDataValidationError{
			field:  "Vehicles",
			reason: "value must contain no more than 5 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetVehicles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateDataValidationError{
						field:  fmt.Sprintf("Vehicles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateDataValidationError{
						field:  fmt.Sprintf("Vehicles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateDataValidationError{
					field:  fmt.Sprintf("Vehicles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TemplateDataMultiError(errors)
	}

	return nil
}

// TemplateDataMultiError is an error wrapping multiple validation errors
// returned by TemplateData.ValidateAll() if the designated constraints aren't met.
type TemplateDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateDataMultiError) AllErrors() []error { return m }

// TemplateDataValidationError is the validation error returned by
// TemplateData.Validate if the designated constraints aren't met.
type TemplateDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateDataValidationError) ErrorName() string { return "TemplateDataValidationError" }

// Error satisfies the builtin error interface
func (e TemplateDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateDataValidationError{}
