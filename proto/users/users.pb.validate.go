// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: users/users.proto

package users

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FindUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUsersRequestMultiError, or nil if none found.
func (m *FindUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Current

	for idx, item := range m.GetOrderBy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindUsersRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindUsersRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindUsersRequestValidationError{
					field:  fmt.Sprintf("OrderBy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Firstname

	// no validation rules for Lastname

	if len(errors) > 0 {
		return FindUsersRequestMultiError(errors)
	}

	return nil
}

// FindUsersRequestMultiError is an error wrapping multiple validation errors
// returned by FindUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type FindUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUsersRequestMultiError) AllErrors() []error { return m }

// FindUsersRequestValidationError is the validation error returned by
// FindUsersRequest.Validate if the designated constraints aren't met.
type FindUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUsersRequestValidationError) ErrorName() string { return "FindUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUsersRequestValidationError{}

// Validate checks the field values on FindUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUsersResponseMultiError, or nil if none found.
func (m *FindUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for Current

	// no validation rules for End

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindUsersResponseMultiError(errors)
	}

	return nil
}

// FindUsersResponseMultiError is an error wrapping multiple validation errors
// returned by FindUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type FindUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUsersResponseMultiError) AllErrors() []error { return m }

// FindUsersResponseValidationError is the validation error returned by
// FindUsersResponse.Validate if the designated constraints aren't met.
type FindUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUsersResponseValidationError) ErrorName() string {
	return "FindUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUsersResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := GetUserRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on SetUserPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserPropsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserPropsRequestMultiError, or nil if none found.
func (m *SetUserPropsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserPropsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := SetUserPropsRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Wanted != nil {
		// no validation rules for Wanted
	}

	if len(errors) > 0 {
		return SetUserPropsRequestMultiError(errors)
	}

	return nil
}

// SetUserPropsRequestMultiError is an error wrapping multiple validation
// errors returned by SetUserPropsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetUserPropsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserPropsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserPropsRequestMultiError) AllErrors() []error { return m }

// SetUserPropsRequestValidationError is the validation error returned by
// SetUserPropsRequest.Validate if the designated constraints aren't met.
type SetUserPropsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserPropsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserPropsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserPropsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserPropsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserPropsRequestValidationError) ErrorName() string {
	return "SetUserPropsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserPropsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserPropsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserPropsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserPropsRequestValidationError{}

// Validate checks the field values on SetUserPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserPropsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserPropsResponseMultiError, or nil if none found.
func (m *SetUserPropsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserPropsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserPropsResponseMultiError(errors)
	}

	return nil
}

// SetUserPropsResponseMultiError is an error wrapping multiple validation
// errors returned by SetUserPropsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetUserPropsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserPropsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserPropsResponseMultiError) AllErrors() []error { return m }

// SetUserPropsResponseValidationError is the validation error returned by
// SetUserPropsResponse.Validate if the designated constraints aren't met.
type SetUserPropsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserPropsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserPropsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserPropsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserPropsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserPropsResponseValidationError) ErrorName() string {
	return "SetUserPropsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserPropsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserPropsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserPropsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserPropsResponseValidationError{}

// Validate checks the field values on GetUserActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserActivityRequestMultiError, or nil if none found.
func (m *GetUserActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := GetUserActivityRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserActivityRequestMultiError(errors)
	}

	return nil
}

// GetUserActivityRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserActivityRequestMultiError) AllErrors() []error { return m }

// GetUserActivityRequestValidationError is the validation error returned by
// GetUserActivityRequest.Validate if the designated constraints aren't met.
type GetUserActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserActivityRequestValidationError) ErrorName() string {
	return "GetUserActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserActivityRequestValidationError{}

// Validate checks the field values on GetUserActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserActivityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserActivityResponseMultiError, or nil if none found.
func (m *GetUserActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActivity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserActivityResponseValidationError{
					field:  fmt.Sprintf("Activity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserActivityResponseMultiError(errors)
	}

	return nil
}

// GetUserActivityResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserActivityResponseMultiError) AllErrors() []error { return m }

// GetUserActivityResponseValidationError is the validation error returned by
// GetUserActivityResponse.Validate if the designated constraints aren't met.
type GetUserActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserActivityResponseValidationError) ErrorName() string {
	return "GetUserActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserActivityResponseValidationError{}

// Validate checks the field values on UserActivity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserActivityMultiError, or
// nil if none found.
func (m *UserActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *UserActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UserActivityValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserActivityValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "TargetUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "TargetUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserActivityValidationError{
				field:  "TargetUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCauseUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "CauseUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "CauseUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCauseUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserActivityValidationError{
				field:  "CauseUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Key

	// no validation rules for OldValue

	// no validation rules for NewValue

	// no validation rules for Reason

	if len(errors) > 0 {
		return UserActivityMultiError(errors)
	}

	return nil
}

// UserActivityMultiError is an error wrapping multiple validation errors
// returned by UserActivity.ValidateAll() if the designated constraints aren't met.
type UserActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserActivityMultiError) AllErrors() []error { return m }

// UserActivityValidationError is the validation error returned by
// UserActivity.Validate if the designated constraints aren't met.
type UserActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserActivityValidationError) ErrorName() string { return "UserActivityValidationError" }

// Error satisfies the builtin error interface
func (e UserActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserActivityValidationError{}
