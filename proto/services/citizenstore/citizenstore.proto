syntax = "proto3";

package services.citizenstore;

import "resources/common/database/database.proto";
import "resources/users/users.proto";
import "validate/validate.proto";

option go_package = "github.com/galexrt/fivenet/gen/go/proto/services/citizenstore;citizenstore";

message ListCitizensRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  // Search params
  string search_name = 2 [(validate.rules).string.max_len = 50];
  optional bool wanted = 3;
  optional string phone_number = 4 [(validate.rules).string.max_len = 20];
  optional uint32 traffic_infraction_points = 5;
  optional string dateofbirth = 6 [(validate.rules).string.max_len = 10];
  optional uint64 open_fines = 7;
}

message ListCitizensResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.users.User users = 2;
}

message GetUserRequest {
  int32 user_id = 1 [(validate.rules).int32.gt = 0];
}

message GetUserResponse {
  resources.users.User user = 1;
}

message ListUserActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  int32 user_id = 2 [(validate.rules).int32.gt = 0];
}

message ListUserActivityResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.users.UserActivity activity = 2;
}

message SetUserPropsRequest {
  resources.users.UserProps props = 1 [(validate.rules).message.required = true];
  // @sanitize
  string reason = 2 [(validate.rules).string = {
    ignore_empty: true,
    min_len: 3,
    max_len: 255
  }];
}

message SetUserPropsResponse {
  resources.users.UserProps props = 1;
}

service CitizenStoreService {
  // @perm: Attrs=Fields/StringList:[]string{"PhoneNumber", "Licenses", "UserProps.Wanted", "UserProps.Job", "UserProps.TrafficInfractionPoints", "UserProps.OpenFines", "UserProps.BloodType", "UserProps.MugShot"}
  rpc ListCitizens(ListCitizensRequest) returns (ListCitizensResponse);
  // @perm: Attrs=Jobs/JobGradeList
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // @perm: Attrs=Fields/StringList:[]string{"SourceUser", "Own"}
  rpc ListUserActivity(ListUserActivityRequest) returns (ListUserActivityResponse);
  // @perm: Attrs=Fields/StringList:[]string{"Wanted", "Job", "TrafficInfractionPoints", "MugShot"}
  rpc SetUserProps(SetUserPropsRequest) returns (SetUserPropsResponse);
}
