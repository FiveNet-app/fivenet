// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services/livemap/livemap.proto

package livemap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LivemapServiceClient is the client API for LivemapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LivemapServiceClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (LivemapService_StreamClient, error)
}

type livemapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLivemapServiceClient(cc grpc.ClientConnInterface) LivemapServiceClient {
	return &livemapServiceClient{cc}
}

func (c *livemapServiceClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (LivemapService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &LivemapService_ServiceDesc.Streams[0], "/services.livemap.LivemapService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &livemapServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LivemapService_StreamClient interface {
	Recv() (*ServerStreamResponse, error)
	grpc.ClientStream
}

type livemapServiceStreamClient struct {
	grpc.ClientStream
}

func (x *livemapServiceStreamClient) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LivemapServiceServer is the server API for LivemapService service.
// All implementations must embed UnimplementedLivemapServiceServer
// for forward compatibility
type LivemapServiceServer interface {
	Stream(*StreamRequest, LivemapService_StreamServer) error
	mustEmbedUnimplementedLivemapServiceServer()
}

// UnimplementedLivemapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLivemapServiceServer struct {
}

func (UnimplementedLivemapServiceServer) Stream(*StreamRequest, LivemapService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedLivemapServiceServer) mustEmbedUnimplementedLivemapServiceServer() {}

// UnsafeLivemapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LivemapServiceServer will
// result in compilation errors.
type UnsafeLivemapServiceServer interface {
	mustEmbedUnimplementedLivemapServiceServer()
}

func RegisterLivemapServiceServer(s grpc.ServiceRegistrar, srv LivemapServiceServer) {
	s.RegisterService(&LivemapService_ServiceDesc, srv)
}

func _LivemapService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LivemapServiceServer).Stream(m, &livemapServiceStreamServer{stream})
}

type LivemapService_StreamServer interface {
	Send(*ServerStreamResponse) error
	grpc.ServerStream
}

type livemapServiceStreamServer struct {
	grpc.ServerStream
}

func (x *livemapServiceStreamServer) Send(m *ServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LivemapService_ServiceDesc is the grpc.ServiceDesc for LivemapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LivemapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.livemap.LivemapService",
	HandlerType: (*LivemapServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _LivemapService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/livemap/livemap.proto",
}
