// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services/docstore/docstore.proto

package docstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocStoreServiceClient is the client API for DocStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocStoreServiceClient interface {
	// @permission
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	// @permission: name=ListTemplates
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// @permission
	FindDocuments(ctx context.Context, in *FindDocumentsRequest, opts ...grpc.CallOption) (*FindDocumentsResponse, error)
	// @permission
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// @permission
	CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*CreateDocumentResponse, error)
	// @permission: name=UpdateDocument
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	// @permission: name=GetDocument
	GetDocumentReferences(ctx context.Context, in *GetDocumentReferencesRequest, opts ...grpc.CallOption) (*GetDocumentReferencesResponse, error)
	// @permission: name=GetDocument
	GetDocumentRelations(ctx context.Context, in *GetDocumentRelationsRequest, opts ...grpc.CallOption) (*GetDocumentRelationsResponse, error)
	// @permission
	AddDocumentReference(ctx context.Context, in *AddDocumentReferenceRequest, opts ...grpc.CallOption) (*AddDocumentReferenceResponse, error)
	// @permission: name=AddDocumentReference
	RemoveDocumentReference(ctx context.Context, in *RemoveDocumentReferenceRequest, opts ...grpc.CallOption) (*RemoveDocumentReferenceResponse, error)
	// @permission
	AddDocumentRelation(ctx context.Context, in *AddDocumentRelationRequest, opts ...grpc.CallOption) (*AddDocumentRelationResponse, error)
	// @permission: name=AddDocumentRelation
	RemoveDocumentRelation(ctx context.Context, in *RemoveDocumentRelationRequest, opts ...grpc.CallOption) (*RemoveDocumentRelationResponse, error)
	// @permission
	GetDocumentComments(ctx context.Context, in *GetDocumentCommentsRequest, opts ...grpc.CallOption) (*GetDocumentCommentsResponse, error)
	// @permission
	PostDocumentComment(ctx context.Context, in *PostDocumentCommentRequest, opts ...grpc.CallOption) (*PostDocumentCommentResponse, error)
	// @permission: name=PostDocumentComment
	EditDocumentComment(ctx context.Context, in *EditDocumentCommentRequest, opts ...grpc.CallOption) (*EditDocumentCommentResponse, error)
	// @permission
	DeleteDocumentComment(ctx context.Context, in *DeleteDocumentCommentRequest, opts ...grpc.CallOption) (*DeleteDocumentCommentResponse, error)
	// @permission
	GetDocumentAccess(ctx context.Context, in *GetDocumentAccessRequest, opts ...grpc.CallOption) (*GetDocumentAccessResponse, error)
	// @permission
	SetDocumentAccess(ctx context.Context, in *SetDocumentAccessRequest, opts ...grpc.CallOption) (*SetDocumentAccessResponse, error)
	// @permission
	GetUserDocuments(ctx context.Context, in *GetUserDocumentsRequest, opts ...grpc.CallOption) (*GetUserDocumentsResponse, error)
}

type docStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocStoreServiceClient(cc grpc.ClientConnInterface) DocStoreServiceClient {
	return &docStoreServiceClient{cc}
}

func (c *docStoreServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) FindDocuments(ctx context.Context, in *FindDocumentsRequest, opts ...grpc.CallOption) (*FindDocumentsResponse, error) {
	out := new(FindDocumentsResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/FindDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*CreateDocumentResponse, error) {
	out := new(CreateDocumentResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) GetDocumentReferences(ctx context.Context, in *GetDocumentReferencesRequest, opts ...grpc.CallOption) (*GetDocumentReferencesResponse, error) {
	out := new(GetDocumentReferencesResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/GetDocumentReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) GetDocumentRelations(ctx context.Context, in *GetDocumentRelationsRequest, opts ...grpc.CallOption) (*GetDocumentRelationsResponse, error) {
	out := new(GetDocumentRelationsResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/GetDocumentRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) AddDocumentReference(ctx context.Context, in *AddDocumentReferenceRequest, opts ...grpc.CallOption) (*AddDocumentReferenceResponse, error) {
	out := new(AddDocumentReferenceResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/AddDocumentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) RemoveDocumentReference(ctx context.Context, in *RemoveDocumentReferenceRequest, opts ...grpc.CallOption) (*RemoveDocumentReferenceResponse, error) {
	out := new(RemoveDocumentReferenceResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/RemoveDocumentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) AddDocumentRelation(ctx context.Context, in *AddDocumentRelationRequest, opts ...grpc.CallOption) (*AddDocumentRelationResponse, error) {
	out := new(AddDocumentRelationResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/AddDocumentRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) RemoveDocumentRelation(ctx context.Context, in *RemoveDocumentRelationRequest, opts ...grpc.CallOption) (*RemoveDocumentRelationResponse, error) {
	out := new(RemoveDocumentRelationResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/RemoveDocumentRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) GetDocumentComments(ctx context.Context, in *GetDocumentCommentsRequest, opts ...grpc.CallOption) (*GetDocumentCommentsResponse, error) {
	out := new(GetDocumentCommentsResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/GetDocumentComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) PostDocumentComment(ctx context.Context, in *PostDocumentCommentRequest, opts ...grpc.CallOption) (*PostDocumentCommentResponse, error) {
	out := new(PostDocumentCommentResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/PostDocumentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) EditDocumentComment(ctx context.Context, in *EditDocumentCommentRequest, opts ...grpc.CallOption) (*EditDocumentCommentResponse, error) {
	out := new(EditDocumentCommentResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/EditDocumentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) DeleteDocumentComment(ctx context.Context, in *DeleteDocumentCommentRequest, opts ...grpc.CallOption) (*DeleteDocumentCommentResponse, error) {
	out := new(DeleteDocumentCommentResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/DeleteDocumentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) GetDocumentAccess(ctx context.Context, in *GetDocumentAccessRequest, opts ...grpc.CallOption) (*GetDocumentAccessResponse, error) {
	out := new(GetDocumentAccessResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/GetDocumentAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) SetDocumentAccess(ctx context.Context, in *SetDocumentAccessRequest, opts ...grpc.CallOption) (*SetDocumentAccessResponse, error) {
	out := new(SetDocumentAccessResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/SetDocumentAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreServiceClient) GetUserDocuments(ctx context.Context, in *GetUserDocumentsRequest, opts ...grpc.CallOption) (*GetUserDocumentsResponse, error) {
	out := new(GetUserDocumentsResponse)
	err := c.cc.Invoke(ctx, "/services.docstore.DocStoreService/GetUserDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocStoreServiceServer is the server API for DocStoreService service.
// All implementations must embed UnimplementedDocStoreServiceServer
// for forward compatibility
type DocStoreServiceServer interface {
	// @permission
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	// @permission: name=ListTemplates
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	// @permission
	FindDocuments(context.Context, *FindDocumentsRequest) (*FindDocumentsResponse, error)
	// @permission
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// @permission
	CreateDocument(context.Context, *CreateDocumentRequest) (*CreateDocumentResponse, error)
	// @permission: name=UpdateDocument
	UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error)
	// @permission: name=GetDocument
	GetDocumentReferences(context.Context, *GetDocumentReferencesRequest) (*GetDocumentReferencesResponse, error)
	// @permission: name=GetDocument
	GetDocumentRelations(context.Context, *GetDocumentRelationsRequest) (*GetDocumentRelationsResponse, error)
	// @permission
	AddDocumentReference(context.Context, *AddDocumentReferenceRequest) (*AddDocumentReferenceResponse, error)
	// @permission: name=AddDocumentReference
	RemoveDocumentReference(context.Context, *RemoveDocumentReferenceRequest) (*RemoveDocumentReferenceResponse, error)
	// @permission
	AddDocumentRelation(context.Context, *AddDocumentRelationRequest) (*AddDocumentRelationResponse, error)
	// @permission: name=AddDocumentRelation
	RemoveDocumentRelation(context.Context, *RemoveDocumentRelationRequest) (*RemoveDocumentRelationResponse, error)
	// @permission
	GetDocumentComments(context.Context, *GetDocumentCommentsRequest) (*GetDocumentCommentsResponse, error)
	// @permission
	PostDocumentComment(context.Context, *PostDocumentCommentRequest) (*PostDocumentCommentResponse, error)
	// @permission: name=PostDocumentComment
	EditDocumentComment(context.Context, *EditDocumentCommentRequest) (*EditDocumentCommentResponse, error)
	// @permission
	DeleteDocumentComment(context.Context, *DeleteDocumentCommentRequest) (*DeleteDocumentCommentResponse, error)
	// @permission
	GetDocumentAccess(context.Context, *GetDocumentAccessRequest) (*GetDocumentAccessResponse, error)
	// @permission
	SetDocumentAccess(context.Context, *SetDocumentAccessRequest) (*SetDocumentAccessResponse, error)
	// @permission
	GetUserDocuments(context.Context, *GetUserDocumentsRequest) (*GetUserDocumentsResponse, error)
	mustEmbedUnimplementedDocStoreServiceServer()
}

// UnimplementedDocStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocStoreServiceServer struct {
}

func (UnimplementedDocStoreServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedDocStoreServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedDocStoreServiceServer) FindDocuments(context.Context, *FindDocumentsRequest) (*FindDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDocuments not implemented")
}
func (UnimplementedDocStoreServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocStoreServiceServer) CreateDocument(context.Context, *CreateDocumentRequest) (*CreateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (UnimplementedDocStoreServiceServer) UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedDocStoreServiceServer) GetDocumentReferences(context.Context, *GetDocumentReferencesRequest) (*GetDocumentReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentReferences not implemented")
}
func (UnimplementedDocStoreServiceServer) GetDocumentRelations(context.Context, *GetDocumentRelationsRequest) (*GetDocumentRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentRelations not implemented")
}
func (UnimplementedDocStoreServiceServer) AddDocumentReference(context.Context, *AddDocumentReferenceRequest) (*AddDocumentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocumentReference not implemented")
}
func (UnimplementedDocStoreServiceServer) RemoveDocumentReference(context.Context, *RemoveDocumentReferenceRequest) (*RemoveDocumentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDocumentReference not implemented")
}
func (UnimplementedDocStoreServiceServer) AddDocumentRelation(context.Context, *AddDocumentRelationRequest) (*AddDocumentRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocumentRelation not implemented")
}
func (UnimplementedDocStoreServiceServer) RemoveDocumentRelation(context.Context, *RemoveDocumentRelationRequest) (*RemoveDocumentRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDocumentRelation not implemented")
}
func (UnimplementedDocStoreServiceServer) GetDocumentComments(context.Context, *GetDocumentCommentsRequest) (*GetDocumentCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentComments not implemented")
}
func (UnimplementedDocStoreServiceServer) PostDocumentComment(context.Context, *PostDocumentCommentRequest) (*PostDocumentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDocumentComment not implemented")
}
func (UnimplementedDocStoreServiceServer) EditDocumentComment(context.Context, *EditDocumentCommentRequest) (*EditDocumentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDocumentComment not implemented")
}
func (UnimplementedDocStoreServiceServer) DeleteDocumentComment(context.Context, *DeleteDocumentCommentRequest) (*DeleteDocumentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocumentComment not implemented")
}
func (UnimplementedDocStoreServiceServer) GetDocumentAccess(context.Context, *GetDocumentAccessRequest) (*GetDocumentAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentAccess not implemented")
}
func (UnimplementedDocStoreServiceServer) SetDocumentAccess(context.Context, *SetDocumentAccessRequest) (*SetDocumentAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDocumentAccess not implemented")
}
func (UnimplementedDocStoreServiceServer) GetUserDocuments(context.Context, *GetUserDocumentsRequest) (*GetUserDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDocuments not implemented")
}
func (UnimplementedDocStoreServiceServer) mustEmbedUnimplementedDocStoreServiceServer() {}

// UnsafeDocStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocStoreServiceServer will
// result in compilation errors.
type UnsafeDocStoreServiceServer interface {
	mustEmbedUnimplementedDocStoreServiceServer()
}

func RegisterDocStoreServiceServer(s grpc.ServiceRegistrar, srv DocStoreServiceServer) {
	s.RegisterService(&DocStoreService_ServiceDesc, srv)
}

func _DocStoreService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_FindDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).FindDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/FindDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).FindDocuments(ctx, req.(*FindDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).CreateDocument(ctx, req.(*CreateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).UpdateDocument(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_GetDocumentReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).GetDocumentReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/GetDocumentReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).GetDocumentReferences(ctx, req.(*GetDocumentReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_GetDocumentRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).GetDocumentRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/GetDocumentRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).GetDocumentRelations(ctx, req.(*GetDocumentRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_AddDocumentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).AddDocumentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/AddDocumentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).AddDocumentReference(ctx, req.(*AddDocumentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_RemoveDocumentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDocumentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).RemoveDocumentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/RemoveDocumentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).RemoveDocumentReference(ctx, req.(*RemoveDocumentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_AddDocumentRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).AddDocumentRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/AddDocumentRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).AddDocumentRelation(ctx, req.(*AddDocumentRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_RemoveDocumentRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDocumentRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).RemoveDocumentRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/RemoveDocumentRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).RemoveDocumentRelation(ctx, req.(*RemoveDocumentRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_GetDocumentComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).GetDocumentComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/GetDocumentComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).GetDocumentComments(ctx, req.(*GetDocumentCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_PostDocumentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDocumentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).PostDocumentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/PostDocumentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).PostDocumentComment(ctx, req.(*PostDocumentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_EditDocumentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDocumentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).EditDocumentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/EditDocumentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).EditDocumentComment(ctx, req.(*EditDocumentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_DeleteDocumentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).DeleteDocumentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/DeleteDocumentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).DeleteDocumentComment(ctx, req.(*DeleteDocumentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_GetDocumentAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).GetDocumentAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/GetDocumentAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).GetDocumentAccess(ctx, req.(*GetDocumentAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_SetDocumentAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDocumentAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).SetDocumentAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/SetDocumentAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).SetDocumentAccess(ctx, req.(*SetDocumentAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStoreService_GetUserDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServiceServer).GetUserDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.docstore.DocStoreService/GetUserDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServiceServer).GetUserDocuments(ctx, req.(*GetUserDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocStoreService_ServiceDesc is the grpc.ServiceDesc for DocStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.docstore.DocStoreService",
	HandlerType: (*DocStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplates",
			Handler:    _DocStoreService_ListTemplates_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _DocStoreService_GetTemplate_Handler,
		},
		{
			MethodName: "FindDocuments",
			Handler:    _DocStoreService_FindDocuments_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocStoreService_GetDocument_Handler,
		},
		{
			MethodName: "CreateDocument",
			Handler:    _DocStoreService_CreateDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _DocStoreService_UpdateDocument_Handler,
		},
		{
			MethodName: "GetDocumentReferences",
			Handler:    _DocStoreService_GetDocumentReferences_Handler,
		},
		{
			MethodName: "GetDocumentRelations",
			Handler:    _DocStoreService_GetDocumentRelations_Handler,
		},
		{
			MethodName: "AddDocumentReference",
			Handler:    _DocStoreService_AddDocumentReference_Handler,
		},
		{
			MethodName: "RemoveDocumentReference",
			Handler:    _DocStoreService_RemoveDocumentReference_Handler,
		},
		{
			MethodName: "AddDocumentRelation",
			Handler:    _DocStoreService_AddDocumentRelation_Handler,
		},
		{
			MethodName: "RemoveDocumentRelation",
			Handler:    _DocStoreService_RemoveDocumentRelation_Handler,
		},
		{
			MethodName: "GetDocumentComments",
			Handler:    _DocStoreService_GetDocumentComments_Handler,
		},
		{
			MethodName: "PostDocumentComment",
			Handler:    _DocStoreService_PostDocumentComment_Handler,
		},
		{
			MethodName: "EditDocumentComment",
			Handler:    _DocStoreService_EditDocumentComment_Handler,
		},
		{
			MethodName: "DeleteDocumentComment",
			Handler:    _DocStoreService_DeleteDocumentComment_Handler,
		},
		{
			MethodName: "GetDocumentAccess",
			Handler:    _DocStoreService_GetDocumentAccess_Handler,
		},
		{
			MethodName: "SetDocumentAccess",
			Handler:    _DocStoreService_SetDocumentAccess_Handler,
		},
		{
			MethodName: "GetUserDocuments",
			Handler:    _DocStoreService_GetUserDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/docstore/docstore.proto",
}
