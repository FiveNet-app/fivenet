// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/docstore/docstore.proto

package docstore

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	documents "github.com/galexrt/fivenet/proto/resources/documents"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = documents.DOC_RELATION(0)
)

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesRequestMultiError, or nil if none found.
func (m *ListTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesRequestMultiError) AllErrors() []error { return m }

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesResponseMultiError, or nil if none found.
func (m *ListTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesResponseMultiError) AllErrors() []error { return m }

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if len(m.GetData()) > 1024 {
		err := GetTemplateRequestValidationError{
			field:  "Data",
			reason: "value length must be at most 1024 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Render != nil {
		// no validation rules for Render
	}

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

// Validate checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateResponseMultiError, or nil if none found.
func (m *GetTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Rendered

	if len(errors) > 0 {
		return GetTemplateResponseMultiError(errors)
	}

	return nil
}

// GetTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateResponseMultiError) AllErrors() []error { return m }

// GetTemplateResponseValidationError is the validation error returned by
// GetTemplateResponse.Validate if the designated constraints aren't met.
type GetTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateResponseValidationError) ErrorName() string {
	return "GetTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateResponseValidationError{}

// Validate checks the field values on FindDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindDocumentsRequestMultiError, or nil if none found.
func (m *FindDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := FindDocumentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindDocumentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetOrderBy()) > 3 {
		err := FindDocumentsRequestValidationError{
			field:  "OrderBy",
			reason: "value must contain no more than 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOrderBy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindDocumentsRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindDocumentsRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindDocumentsRequestValidationError{
					field:  fmt.Sprintf("OrderBy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Search

	if len(errors) > 0 {
		return FindDocumentsRequestMultiError(errors)
	}

	return nil
}

// FindDocumentsRequestMultiError is an error wrapping multiple validation
// errors returned by FindDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type FindDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindDocumentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindDocumentsRequestMultiError) AllErrors() []error { return m }

// FindDocumentsRequestValidationError is the validation error returned by
// FindDocumentsRequest.Validate if the designated constraints aren't met.
type FindDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindDocumentsRequestValidationError) ErrorName() string {
	return "FindDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindDocumentsRequestValidationError{}

// Validate checks the field values on FindDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindDocumentsResponseMultiError, or nil if none found.
func (m *FindDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindDocumentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindDocumentsResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindDocumentsResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindDocumentsResponseValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindDocumentsResponseMultiError(errors)
	}

	return nil
}

// FindDocumentsResponseMultiError is an error wrapping multiple validation
// errors returned by FindDocumentsResponse.ValidateAll() if the designated
// constraints aren't met.
type FindDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindDocumentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindDocumentsResponseMultiError) AllErrors() []error { return m }

// FindDocumentsResponseValidationError is the validation error returned by
// FindDocumentsResponse.Validate if the designated constraints aren't met.
type FindDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindDocumentsResponseValidationError) ErrorName() string {
	return "FindDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindDocumentsResponseValidationError{}

// Validate checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRequestMultiError, or nil if none found.
func (m *GetDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentRequestMultiError(errors)
	}

	return nil
}

// GetDocumentRequestMultiError is an error wrapping multiple validation errors
// returned by GetDocumentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRequestMultiError) AllErrors() []error { return m }

// GetDocumentRequestValidationError is the validation error returned by
// GetDocumentRequest.Validate if the designated constraints aren't met.
type GetDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRequestValidationError) ErrorName() string {
	return "GetDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRequestValidationError{}

// Validate checks the field values on GetDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentResponseMultiError, or nil if none found.
func (m *GetDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentResponseValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentResponseValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentResponseMultiError(errors)
	}

	return nil
}

// GetDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentResponseMultiError) AllErrors() []error { return m }

// GetDocumentResponseValidationError is the validation error returned by
// GetDocumentResponse.Validate if the designated constraints aren't met.
type GetDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentResponseValidationError) ErrorName() string {
	return "GetDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentResponseValidationError{}

// Validate checks the field values on GetDocumentReferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentReferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentReferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentReferencesRequestMultiError, or nil if none found.
func (m *GetDocumentReferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentReferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentReferencesRequestMultiError(errors)
	}

	return nil
}

// GetDocumentReferencesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDocumentReferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentReferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentReferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentReferencesRequestMultiError) AllErrors() []error { return m }

// GetDocumentReferencesRequestValidationError is the validation error returned
// by GetDocumentReferencesRequest.Validate if the designated constraints
// aren't met.
type GetDocumentReferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentReferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentReferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentReferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentReferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentReferencesRequestValidationError) ErrorName() string {
	return "GetDocumentReferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentReferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentReferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentReferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentReferencesRequestValidationError{}

// Validate checks the field values on GetDocumentReferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentReferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentReferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDocumentReferencesResponseMultiError, or nil if none found.
func (m *GetDocumentReferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentReferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentReferencesResponseValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentReferencesResponseValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentReferencesResponseValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentReferencesResponseMultiError(errors)
	}

	return nil
}

// GetDocumentReferencesResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentReferencesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDocumentReferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentReferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentReferencesResponseMultiError) AllErrors() []error { return m }

// GetDocumentReferencesResponseValidationError is the validation error
// returned by GetDocumentReferencesResponse.Validate if the designated
// constraints aren't met.
type GetDocumentReferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentReferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentReferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentReferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentReferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentReferencesResponseValidationError) ErrorName() string {
	return "GetDocumentReferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentReferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentReferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentReferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentReferencesResponseValidationError{}

// Validate checks the field values on GetDocumentRelationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRelationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRelationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRelationsRequestMultiError, or nil if none found.
func (m *GetDocumentRelationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRelationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentRelationsRequestMultiError(errors)
	}

	return nil
}

// GetDocumentRelationsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDocumentRelationsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentRelationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRelationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRelationsRequestMultiError) AllErrors() []error { return m }

// GetDocumentRelationsRequestValidationError is the validation error returned
// by GetDocumentRelationsRequest.Validate if the designated constraints
// aren't met.
type GetDocumentRelationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRelationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRelationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRelationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRelationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRelationsRequestValidationError) ErrorName() string {
	return "GetDocumentRelationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRelationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRelationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRelationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRelationsRequestValidationError{}

// Validate checks the field values on GetDocumentRelationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRelationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRelationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRelationsResponseMultiError, or nil if none found.
func (m *GetDocumentRelationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRelationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentRelationsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentRelationsResponseMultiError(errors)
	}

	return nil
}

// GetDocumentRelationsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentRelationsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentRelationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRelationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRelationsResponseMultiError) AllErrors() []error { return m }

// GetDocumentRelationsResponseValidationError is the validation error returned
// by GetDocumentRelationsResponse.Validate if the designated constraints
// aren't met.
type GetDocumentRelationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRelationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRelationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRelationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRelationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRelationsResponseValidationError) ErrorName() string {
	return "GetDocumentRelationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRelationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRelationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRelationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRelationsResponseValidationError{}

// Validate checks the field values on AddDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentReferenceRequestMultiError, or nil if none found.
func (m *AddDocumentReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDocumentReferenceRequestValidationError{
					field:  "Reference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDocumentReferenceRequestValidationError{
					field:  "Reference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDocumentReferenceRequestValidationError{
				field:  "Reference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDocumentReferenceRequestMultiError(errors)
	}

	return nil
}

// AddDocumentReferenceRequestMultiError is an error wrapping multiple
// validation errors returned by AddDocumentReferenceRequest.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentReferenceRequestMultiError) AllErrors() []error { return m }

// AddDocumentReferenceRequestValidationError is the validation error returned
// by AddDocumentReferenceRequest.Validate if the designated constraints
// aren't met.
type AddDocumentReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentReferenceRequestValidationError) ErrorName() string {
	return "AddDocumentReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentReferenceRequestValidationError{}

// Validate checks the field values on AddDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentReferenceResponseMultiError, or nil if none found.
func (m *AddDocumentReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddDocumentReferenceResponseMultiError(errors)
	}

	return nil
}

// AddDocumentReferenceResponseMultiError is an error wrapping multiple
// validation errors returned by AddDocumentReferenceResponse.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentReferenceResponseMultiError) AllErrors() []error { return m }

// AddDocumentReferenceResponseValidationError is the validation error returned
// by AddDocumentReferenceResponse.Validate if the designated constraints
// aren't met.
type AddDocumentReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentReferenceResponseValidationError) ErrorName() string {
	return "AddDocumentReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentReferenceResponseValidationError{}

// Validate checks the field values on RemoveDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentReferenceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentReferenceRequestMultiError, or nil if none found.
func (m *RemoveDocumentReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveDocumentReferenceRequestMultiError(errors)
	}

	return nil
}

// RemoveDocumentReferenceRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentReferenceRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentReferenceRequestMultiError) AllErrors() []error { return m }

// RemoveDocumentReferenceRequestValidationError is the validation error
// returned by RemoveDocumentReferenceRequest.Validate if the designated
// constraints aren't met.
type RemoveDocumentReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentReferenceRequestValidationError) ErrorName() string {
	return "RemoveDocumentReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentReferenceRequestValidationError{}

// Validate checks the field values on RemoveDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentReferenceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentReferenceResponseMultiError, or nil if none found.
func (m *RemoveDocumentReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveDocumentReferenceResponseMultiError(errors)
	}

	return nil
}

// RemoveDocumentReferenceResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentReferenceResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentReferenceResponseMultiError) AllErrors() []error { return m }

// RemoveDocumentReferenceResponseValidationError is the validation error
// returned by RemoveDocumentReferenceResponse.Validate if the designated
// constraints aren't met.
type RemoveDocumentReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentReferenceResponseValidationError) ErrorName() string {
	return "RemoveDocumentReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentReferenceResponseValidationError{}

// Validate checks the field values on AddDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentRelationRequestMultiError, or nil if none found.
func (m *AddDocumentRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDocumentRelationRequestValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDocumentRelationRequestValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDocumentRelationRequestValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDocumentRelationRequestMultiError(errors)
	}

	return nil
}

// AddDocumentRelationRequestMultiError is an error wrapping multiple
// validation errors returned by AddDocumentRelationRequest.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentRelationRequestMultiError) AllErrors() []error { return m }

// AddDocumentRelationRequestValidationError is the validation error returned
// by AddDocumentRelationRequest.Validate if the designated constraints aren't met.
type AddDocumentRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentRelationRequestValidationError) ErrorName() string {
	return "AddDocumentRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentRelationRequestValidationError{}

// Validate checks the field values on AddDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentRelationResponseMultiError, or nil if none found.
func (m *AddDocumentRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddDocumentRelationResponseMultiError(errors)
	}

	return nil
}

// AddDocumentRelationResponseMultiError is an error wrapping multiple
// validation errors returned by AddDocumentRelationResponse.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentRelationResponseMultiError) AllErrors() []error { return m }

// AddDocumentRelationResponseValidationError is the validation error returned
// by AddDocumentRelationResponse.Validate if the designated constraints
// aren't met.
type AddDocumentRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentRelationResponseValidationError) ErrorName() string {
	return "AddDocumentRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentRelationResponseValidationError{}

// Validate checks the field values on RemoveDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentRelationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentRelationRequestMultiError, or nil if none found.
func (m *RemoveDocumentRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveDocumentRelationRequestMultiError(errors)
	}

	return nil
}

// RemoveDocumentRelationRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentRelationRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentRelationRequestMultiError) AllErrors() []error { return m }

// RemoveDocumentRelationRequestValidationError is the validation error
// returned by RemoveDocumentRelationRequest.Validate if the designated
// constraints aren't met.
type RemoveDocumentRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentRelationRequestValidationError) ErrorName() string {
	return "RemoveDocumentRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentRelationRequestValidationError{}

// Validate checks the field values on RemoveDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentRelationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentRelationResponseMultiError, or nil if none found.
func (m *RemoveDocumentRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveDocumentRelationResponseMultiError(errors)
	}

	return nil
}

// RemoveDocumentRelationResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentRelationResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentRelationResponseMultiError) AllErrors() []error { return m }

// RemoveDocumentRelationResponseValidationError is the validation error
// returned by RemoveDocumentRelationResponse.Validate if the designated
// constraints aren't met.
type RemoveDocumentRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentRelationResponseValidationError) ErrorName() string {
	return "RemoveDocumentRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentRelationResponseValidationError{}

// Validate checks the field values on GetDocumentCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentCommentsRequestMultiError, or nil if none found.
func (m *GetDocumentCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentCommentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentCommentsRequestMultiError(errors)
	}

	return nil
}

// GetDocumentCommentsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDocumentCommentsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentCommentsRequestMultiError) AllErrors() []error { return m }

// GetDocumentCommentsRequestValidationError is the validation error returned
// by GetDocumentCommentsRequest.Validate if the designated constraints aren't met.
type GetDocumentCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentCommentsRequestValidationError) ErrorName() string {
	return "GetDocumentCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentCommentsRequestValidationError{}

// Validate checks the field values on GetDocumentCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentCommentsResponseMultiError, or nil if none found.
func (m *GetDocumentCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentCommentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentCommentsResponseMultiError(errors)
	}

	return nil
}

// GetDocumentCommentsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentCommentsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentCommentsResponseMultiError) AllErrors() []error { return m }

// GetDocumentCommentsResponseValidationError is the validation error returned
// by GetDocumentCommentsResponse.Validate if the designated constraints
// aren't met.
type GetDocumentCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentCommentsResponseValidationError) ErrorName() string {
	return "GetDocumentCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentCommentsResponseValidationError{}

// Validate checks the field values on PostDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostDocumentCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostDocumentCommentRequestMultiError, or nil if none found.
func (m *PostDocumentCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostDocumentCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostDocumentCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostDocumentCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostDocumentCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostDocumentCommentRequestMultiError(errors)
	}

	return nil
}

// PostDocumentCommentRequestMultiError is an error wrapping multiple
// validation errors returned by PostDocumentCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type PostDocumentCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostDocumentCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostDocumentCommentRequestMultiError) AllErrors() []error { return m }

// PostDocumentCommentRequestValidationError is the validation error returned
// by PostDocumentCommentRequest.Validate if the designated constraints aren't met.
type PostDocumentCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDocumentCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDocumentCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDocumentCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDocumentCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDocumentCommentRequestValidationError) ErrorName() string {
	return "PostDocumentCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostDocumentCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostDocumentCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDocumentCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDocumentCommentRequestValidationError{}

// Validate checks the field values on PostDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostDocumentCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostDocumentCommentResponseMultiError, or nil if none found.
func (m *PostDocumentCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostDocumentCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PostDocumentCommentResponseMultiError(errors)
	}

	return nil
}

// PostDocumentCommentResponseMultiError is an error wrapping multiple
// validation errors returned by PostDocumentCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type PostDocumentCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostDocumentCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostDocumentCommentResponseMultiError) AllErrors() []error { return m }

// PostDocumentCommentResponseValidationError is the validation error returned
// by PostDocumentCommentResponse.Validate if the designated constraints
// aren't met.
type PostDocumentCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDocumentCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDocumentCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDocumentCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDocumentCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDocumentCommentResponseValidationError) ErrorName() string {
	return "PostDocumentCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostDocumentCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostDocumentCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDocumentCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDocumentCommentResponseValidationError{}

// Validate checks the field values on EditDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditDocumentCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditDocumentCommentRequestMultiError, or nil if none found.
func (m *EditDocumentCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditDocumentCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditDocumentCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditDocumentCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditDocumentCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditDocumentCommentRequestMultiError(errors)
	}

	return nil
}

// EditDocumentCommentRequestMultiError is an error wrapping multiple
// validation errors returned by EditDocumentCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type EditDocumentCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditDocumentCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditDocumentCommentRequestMultiError) AllErrors() []error { return m }

// EditDocumentCommentRequestValidationError is the validation error returned
// by EditDocumentCommentRequest.Validate if the designated constraints aren't met.
type EditDocumentCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditDocumentCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditDocumentCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditDocumentCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditDocumentCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditDocumentCommentRequestValidationError) ErrorName() string {
	return "EditDocumentCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditDocumentCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditDocumentCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditDocumentCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditDocumentCommentRequestValidationError{}

// Validate checks the field values on EditDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditDocumentCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditDocumentCommentResponseMultiError, or nil if none found.
func (m *EditDocumentCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditDocumentCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditDocumentCommentResponseMultiError(errors)
	}

	return nil
}

// EditDocumentCommentResponseMultiError is an error wrapping multiple
// validation errors returned by EditDocumentCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type EditDocumentCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditDocumentCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditDocumentCommentResponseMultiError) AllErrors() []error { return m }

// EditDocumentCommentResponseValidationError is the validation error returned
// by EditDocumentCommentResponse.Validate if the designated constraints
// aren't met.
type EditDocumentCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditDocumentCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditDocumentCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditDocumentCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditDocumentCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditDocumentCommentResponseValidationError) ErrorName() string {
	return "EditDocumentCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditDocumentCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditDocumentCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditDocumentCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditDocumentCommentResponseValidationError{}

// Validate checks the field values on DeleteDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentCommentRequestMultiError, or nil if none found.
func (m *DeleteDocumentCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return DeleteDocumentCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteDocumentCommentRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDocumentCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteDocumentCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentCommentRequestMultiError) AllErrors() []error { return m }

// DeleteDocumentCommentRequestValidationError is the validation error returned
// by DeleteDocumentCommentRequest.Validate if the designated constraints
// aren't met.
type DeleteDocumentCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentCommentRequestValidationError) ErrorName() string {
	return "DeleteDocumentCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentCommentRequestValidationError{}

// Validate checks the field values on DeleteDocumentCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentCommentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteDocumentCommentResponseMultiError, or nil if none found.
func (m *DeleteDocumentCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDocumentCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteDocumentCommentResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteDocumentCommentResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteDocumentCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentCommentResponseMultiError) AllErrors() []error { return m }

// DeleteDocumentCommentResponseValidationError is the validation error
// returned by DeleteDocumentCommentResponse.Validate if the designated
// constraints aren't met.
type DeleteDocumentCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentCommentResponseValidationError) ErrorName() string {
	return "DeleteDocumentCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentCommentResponseValidationError{}

// Validate checks the field values on CreateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentRequestMultiError, or nil if none found.
func (m *CreateDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 3 {
		err := CreateDocumentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 30 {
		err := CreateDocumentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 30 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := documents.DOC_CONTENT_TYPE_name[int32(m.GetContentType())]; !ok {
		err := CreateDocumentRequestValidationError{
			field:  "ContentType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) > 24 {
		err := CreateDocumentRequestValidationError{
			field:  "State",
			reason: "value length must be at most 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Closed

	// no validation rules for Public

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.Data != nil {
		// no validation rules for Data
	}

	if m.Access != nil {

		if all {
			switch v := interface{}(m.GetAccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDocumentRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDocumentRequestMultiError(errors)
	}

	return nil
}

// CreateDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentRequestMultiError) AllErrors() []error { return m }

// CreateDocumentRequestValidationError is the validation error returned by
// CreateDocumentRequest.Validate if the designated constraints aren't met.
type CreateDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentRequestValidationError) ErrorName() string {
	return "CreateDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentRequestValidationError{}

// Validate checks the field values on CreateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentResponseMultiError, or nil if none found.
func (m *CreateDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return CreateDocumentResponseMultiError(errors)
	}

	return nil
}

// CreateDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentResponseMultiError) AllErrors() []error { return m }

// CreateDocumentResponseValidationError is the validation error returned by
// CreateDocumentResponse.Validate if the designated constraints aren't met.
type CreateDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentResponseValidationError) ErrorName() string {
	return "CreateDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentResponseValidationError{}

// Validate checks the field values on UpdateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentRequestMultiError, or nil if none found.
func (m *UpdateDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.Title != nil {

		if utf8.RuneCountInString(m.GetTitle()) < 3 {
			err := UpdateDocumentRequestValidationError{
				field:  "Title",
				reason: "value length must be at least 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Content != nil {

		if utf8.RuneCountInString(m.GetContent()) < 30 {
			err := UpdateDocumentRequestValidationError{
				field:  "Content",
				reason: "value length must be at least 30 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ContentType != nil {

		if _, ok := documents.DOC_CONTENT_TYPE_name[int32(m.GetContentType())]; !ok {
			err := UpdateDocumentRequestValidationError{
				field:  "ContentType",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Data != nil {
		// no validation rules for Data
	}

	if m.State != nil {

		if utf8.RuneCountInString(m.GetState()) > 24 {
			err := UpdateDocumentRequestValidationError{
				field:  "State",
				reason: "value length must be at most 24 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Closed != nil {
		// no validation rules for Closed
	}

	if m.Public != nil {
		// no validation rules for Public
	}

	if m.Access != nil {

		if all {
			switch v := interface{}(m.GetAccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDocumentRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDocumentRequestMultiError(errors)
	}

	return nil
}

// UpdateDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentRequestMultiError) AllErrors() []error { return m }

// UpdateDocumentRequestValidationError is the validation error returned by
// UpdateDocumentRequest.Validate if the designated constraints aren't met.
type UpdateDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentRequestValidationError) ErrorName() string {
	return "UpdateDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentRequestValidationError{}

// Validate checks the field values on UpdateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentResponseMultiError, or nil if none found.
func (m *UpdateDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return UpdateDocumentResponseMultiError(errors)
	}

	return nil
}

// UpdateDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentResponseMultiError) AllErrors() []error { return m }

// UpdateDocumentResponseValidationError is the validation error returned by
// UpdateDocumentResponse.Validate if the designated constraints aren't met.
type UpdateDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentResponseValidationError) ErrorName() string {
	return "UpdateDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentResponseValidationError{}

// Validate checks the field values on GetDocumentAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentAccessRequestMultiError, or nil if none found.
func (m *GetDocumentAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentAccessRequestMultiError(errors)
	}

	return nil
}

// GetDocumentAccessRequestMultiError is an error wrapping multiple validation
// errors returned by GetDocumentAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDocumentAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentAccessRequestMultiError) AllErrors() []error { return m }

// GetDocumentAccessRequestValidationError is the validation error returned by
// GetDocumentAccessRequest.Validate if the designated constraints aren't met.
type GetDocumentAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentAccessRequestValidationError) ErrorName() string {
	return "GetDocumentAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentAccessRequestValidationError{}

// Validate checks the field values on GetDocumentAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentAccessResponseMultiError, or nil if none found.
func (m *GetDocumentAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentAccessResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentAccessResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentAccessResponseValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentAccessResponseMultiError(errors)
	}

	return nil
}

// GetDocumentAccessResponseMultiError is an error wrapping multiple validation
// errors returned by GetDocumentAccessResponse.ValidateAll() if the
// designated constraints aren't met.
type GetDocumentAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentAccessResponseMultiError) AllErrors() []error { return m }

// GetDocumentAccessResponseValidationError is the validation error returned by
// GetDocumentAccessResponse.Validate if the designated constraints aren't met.
type GetDocumentAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentAccessResponseValidationError) ErrorName() string {
	return "GetDocumentAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentAccessResponseValidationError{}

// Validate checks the field values on SetDocumentAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentAccessRequestMultiError, or nil if none found.
func (m *SetDocumentAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if _, ok := DOC_ACCESS_UPDATE_MODE_name[int32(m.GetMode())]; !ok {
		err := SetDocumentAccessRequestValidationError{
			field:  "Mode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDocumentAccessRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDocumentAccessRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDocumentAccessRequestValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetDocumentAccessRequestMultiError(errors)
	}

	return nil
}

// SetDocumentAccessRequestMultiError is an error wrapping multiple validation
// errors returned by SetDocumentAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDocumentAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentAccessRequestMultiError) AllErrors() []error { return m }

// SetDocumentAccessRequestValidationError is the validation error returned by
// SetDocumentAccessRequest.Validate if the designated constraints aren't met.
type SetDocumentAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentAccessRequestValidationError) ErrorName() string {
	return "SetDocumentAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentAccessRequestValidationError{}

// Validate checks the field values on SetDocumentAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentAccessResponseMultiError, or nil if none found.
func (m *SetDocumentAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDocumentAccessResponseMultiError(errors)
	}

	return nil
}

// SetDocumentAccessResponseMultiError is an error wrapping multiple validation
// errors returned by SetDocumentAccessResponse.ValidateAll() if the
// designated constraints aren't met.
type SetDocumentAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentAccessResponseMultiError) AllErrors() []error { return m }

// SetDocumentAccessResponseValidationError is the validation error returned by
// SetDocumentAccessResponse.Validate if the designated constraints aren't met.
type SetDocumentAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentAccessResponseValidationError) ErrorName() string {
	return "SetDocumentAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentAccessResponseValidationError{}

// Validate checks the field values on GetUserDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDocumentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDocumentsRequestMultiError, or nil if none found.
func (m *GetUserDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := GetUserDocumentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserDocumentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := GetUserDocumentsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRelations()) > 3 {
		err := GetUserDocumentsRequestValidationError{
			field:  "Relations",
			reason: "value must contain no more than 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserDocumentsRequestMultiError(errors)
	}

	return nil
}

// GetUserDocumentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDocumentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDocumentsRequestMultiError) AllErrors() []error { return m }

// GetUserDocumentsRequestValidationError is the validation error returned by
// GetUserDocumentsRequest.Validate if the designated constraints aren't met.
type GetUserDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDocumentsRequestValidationError) ErrorName() string {
	return "GetUserDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDocumentsRequestValidationError{}

// Validate checks the field values on GetUserDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDocumentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDocumentsResponseMultiError, or nil if none found.
func (m *GetUserDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserDocumentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserDocumentsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserDocumentsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserDocumentsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserDocumentsResponseMultiError(errors)
	}

	return nil
}

// GetUserDocumentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserDocumentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDocumentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDocumentsResponseMultiError) AllErrors() []error { return m }

// GetUserDocumentsResponseValidationError is the validation error returned by
// GetUserDocumentsResponse.Validate if the designated constraints aren't met.
type GetUserDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDocumentsResponseValidationError) ErrorName() string {
	return "GetUserDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDocumentsResponseValidationError{}
