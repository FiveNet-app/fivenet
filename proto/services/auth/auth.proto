syntax = "proto3";

package services.auth;
option go_package = "github.com/galexrt/fivenet/gen/go/proto/services/auth;auth";

import "resources/accounts/accounts.proto";
import "resources/accounts/oauth2.proto";
import "resources/users/jobs.proto";
import "resources/users/users.proto";
import "resources/timestamp/timestamp.proto";
import "validate/validate.proto";

message CreateAccountRequest {
  string reg_token = 1 [(validate.rules).string = {
    len: 6,
    pattern: "^[0-9]{6}$",
  }];
  string username = 2 [(validate.rules).string = {
    min_len: 3,
    max_len: 24,
    pattern: "^[a-zA-Z0-9-_]+$",
  }];
  string password = 3 [(validate.rules).string = {min_len: 6, max_bytes: 70}];
}

message CreateAccountResponse {
  uint64 account_id = 1;
}

message LoginRequest {
  string username = 1 [(validate.rules).string = {
    min_len: 3,
    max_len: 24,
    pattern: "^[a-zA-Z0-9-_]+$",
  }];
  string password = 2 [(validate.rules).string = {min_len: 6, max_bytes: 70}];
}

message LoginResponse {
  string token = 1;
  resources.timestamp.Timestamp expires = 2;
  uint64 account_id = 3;
}

message ChangePasswordRequest {
  string current = 1 [(validate.rules).string = {min_len: 6, max_bytes: 70}];
  string new = 2 [(validate.rules).string = {min_len: 6, max_bytes: 70}];
}

message ChangePasswordResponse {
  string token = 1;
  resources.timestamp.Timestamp expires = 2;
}

message ForgotPasswordRequest {
  string reg_token = 1 [(validate.rules).string = {
    len: 6,
    pattern: "^[0-9]{6}$",
  }];
  string new = 2 [(validate.rules).string = {min_len: 6, max_bytes: 70}];
}

message ForgotPasswordResponse {}

message GetAccountInfoRequest {}

message GetAccountInfoResponse {
  resources.accounts.Account account = 1;
  repeated resources.accounts.OAuth2Provider oauth2_providers = 2;
  repeated resources.accounts.OAuth2Account oauth2_connections = 3;
}

message GetCharactersRequest {}

message GetCharactersResponse {
  repeated resources.users.User chars = 1;
}

message ChooseCharacterRequest {
  int32 char_id = 1 [(validate.rules).int32.gt = 0];
}

message ChooseCharacterResponse {
  string token = 1;
  resources.timestamp.Timestamp expires = 2;
  repeated string permissions = 3;
  resources.users.JobProps job_props = 4;
  resources.users.User char = 5;
}

message LogoutRequest {}

message LogoutResponse {
  bool success = 1;
}

message DeleteOAuth2ConnectionRequest {
  string provider = 1 [(validate.rules).string.max_len = 50];
}

message DeleteOAuth2ConnectionResponse {
  bool success = 1;
}

message SetJobRequest {
  int32 char_id = 1 [(validate.rules).int32.gt = 0];
  string job = 2 [(validate.rules).string.max_len = 50];
  int32 job_grade = 3 [(validate.rules).int32.gt = 0];
}

message SetJobResponse {
  string token = 1;
  resources.timestamp.Timestamp expires = 2;
  resources.users.JobProps job_props = 3;
  resources.users.User char = 4;
}

service AuthService {
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);

  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse);

  rpc GetCharacters(GetCharactersRequest) returns (GetCharactersResponse);
  // @perm
  rpc ChooseCharacter(ChooseCharacterRequest) returns (ChooseCharacterResponse);

  rpc GetAccountInfo(GetAccountInfoRequest) returns (GetAccountInfoResponse);

  rpc DeleteOAuth2Connection(DeleteOAuth2ConnectionRequest) returns (DeleteOAuth2ConnectionResponse);

  rpc SetJob(SetJobRequest) returns (SetJobResponse);
}
