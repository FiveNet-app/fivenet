syntax = "proto3";

package services.qualifications;

import "google/protobuf/duration.proto";
import "resources/common/database/database.proto";
import "resources/qualifications/access.proto";
import "resources/qualifications/exam.proto";
import "resources/qualifications/qualifications.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/gen/go/proto/services/qualifications;qualifications";

message ListQualificationsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  // Search params
  optional string search = 2;
}

message ListQualificationsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.qualifications.Qualification qualifications = 2;
}

message GetQualificationRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
  optional bool with_exam = 2;
}

message GetQualificationResponse {
  resources.qualifications.Qualification qualification = 1;
}

message CreateQualificationRequest {
  resources.qualifications.Qualification qualification = 1 [(validate.rules).message.required = true];
}

message CreateQualificationResponse {
  uint64 qualification_id = 1 [jstype = JS_STRING];
}

message UpdateQualificationRequest {
  resources.qualifications.Qualification qualification = 1 [(validate.rules).message.required = true];
}

message UpdateQualificationResponse {
  uint64 qualification_id = 1 [jstype = JS_STRING];
}

message DeleteQualificationRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
}

message DeleteQualificationResponse {}

// Access =====================================================================

message GetQualificationAccessRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
}

message GetQualificationAccessResponse {
  resources.qualifications.QualificationAccess access = 1 [(validate.rules).message.required = true];
}

message SetQualificationAccessRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
  resources.qualifications.AccessLevelUpdateMode mode = 2 [(validate.rules).enum.defined_only = true];
  resources.qualifications.QualificationAccess access = 3 [(validate.rules).message.required = true];
}

message SetQualificationAccessResponse {}

// Requests ===================================================================

message ListQualificationRequestsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  // Search params
  optional uint64 qualification_id = 2 [jstype = JS_STRING];
  repeated resources.qualifications.RequestStatus status = 3;
  optional int32 user_id = 4;
}

message ListQualificationRequestsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.qualifications.QualificationRequest requests = 2;
}

message CreateOrUpdateQualificationRequestRequest {
  resources.qualifications.QualificationRequest request = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateQualificationRequestResponse {
  resources.qualifications.QualificationRequest request = 1;
}

message DeleteQualificationReqRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
  int32 user_id = 2;
}

message DeleteQualificationReqResponse {}

// Results ====================================================================

message ListQualificationsResultsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  // Search params
  optional uint64 qualification_id = 2 [jstype = JS_STRING];
  repeated resources.qualifications.ResultStatus status = 3;
  optional int32 user_id = 4;
}

message ListQualificationsResultsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.qualifications.QualificationResult results = 2;
}

message CreateOrUpdateQualificationResultRequest {
  resources.qualifications.QualificationResult result = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateQualificationResultResponse {
  resources.qualifications.QualificationResult result = 1;
}

message DeleteQualificationResultRequest {
  uint64 result_id = 1 [jstype = JS_STRING];
}

message DeleteQualificationResultResponse {}

// Exam =======================================================================

message GetExamInfoRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
}

message GetExamInfoResponse {
  resources.qualifications.QualificationShort qualification = 1;
  int32 question_count = 2;
  optional resources.qualifications.ExamUser user = 3;
}

message TakeExamRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
  optional bool cancel = 2;
}

message TakeExamResponse {
  resources.qualifications.ExamQuestions exam = 1;
  resources.qualifications.ExamUser exam_user = 2;
}

message SubmitExamRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
  resources.qualifications.ExamResponses responses = 2;
}

message SubmitExamResponse {
  google.protobuf.Duration duration = 1;
}

message GetUserExamRequest {
  uint64 qualification_id = 1 [jstype = JS_STRING];
  int32 user_id = 2;
}

message GetUserExamResponse {
  resources.qualifications.ExamQuestions exam = 1;
  resources.qualifications.ExamUser exam_user = 2;
  resources.qualifications.ExamResponses responses = 3;
}

service QualificationsService {
  // @perm
  rpc ListQualifications(ListQualificationsRequest) returns (ListQualificationsResponse);
  // @perm
  rpc GetQualification(GetQualificationRequest) returns (GetQualificationResponse);
  // @perm
  rpc CreateQualification(CreateQualificationRequest) returns (CreateQualificationResponse);
  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc UpdateQualification(UpdateQualificationRequest) returns (UpdateQualificationResponse);
  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc DeleteQualification(DeleteQualificationRequest) returns (DeleteQualificationResponse);

  // @perm: Name=GetQualification
  rpc ListQualificationRequests(ListQualificationRequestsRequest) returns (ListQualificationRequestsResponse);
  // @perm: Name=GetQualification
  rpc CreateOrUpdateQualificationRequest(CreateOrUpdateQualificationRequestRequest) returns (CreateOrUpdateQualificationRequestResponse);
  // @perm
  rpc DeleteQualificationReq(DeleteQualificationReqRequest) returns (DeleteQualificationReqResponse);

  // @perm: Name=GetQualification
  rpc ListQualificationsResults(ListQualificationsResultsRequest) returns (ListQualificationsResultsResponse);
  // @perm
  rpc CreateOrUpdateQualificationResult(CreateOrUpdateQualificationResultRequest) returns (CreateOrUpdateQualificationResultResponse);
  // @perm
  rpc DeleteQualificationResult(DeleteQualificationResultRequest) returns (DeleteQualificationResultResponse);

  // @perm: Name=GetQualification
  rpc GetExamInfo(GetExamInfoRequest) returns (GetExamInfoResponse);
  // @perm: Name=GetQualification
  rpc TakeExam(TakeExamRequest) returns (TakeExamResponse);
  // @perm: Name=GetQualification
  rpc SubmitExam(SubmitExamRequest) returns (SubmitExamResponse);
  // @perm: Name=CreateOrUpdateQualificationResult
  rpc GetUserExam(GetUserExamRequest) returns (GetUserExamResponse);
}
