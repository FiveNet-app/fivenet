syntax = "proto3";

package services.notificator;

import "resources/common/database/database.proto";
import "resources/notifications/notifications.proto";
import "resources/timestamp/timestamp.proto";
import "resources/users/jobs.proto";
import "resources/users/users.proto";
import "validate/validate.proto";

option go_package = "github.com/galexrt/fivenet/gen/go/proto/services/notificator;notificator";

message GetNotificationsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  optional bool include_read = 2;
}

message GetNotificationsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.notifications.Notification notifications = 2;
}

message ReadNotificationsRequest {
  repeated uint64 ids = 1 [(validate.rules).repeated = {
    ignore_empty: true,
    min_items: 1,
    max_items: 20
  }];
  optional bool all = 2;
}

message ReadNotificationsResponse {
  uint64 updated = 1;
}

message StreamRequest {
  uint64 last_id = 1;
}

message StreamResponse {
  uint64 last_id = 1;
  bool restart_stream = 2;
  repeated resources.notifications.Notification notifications = 3;
  optional TokenUpdate token = 4;
}

message TokenUpdate {
  optional string new_token = 1;
  resources.timestamp.Timestamp expires = 2;
  repeated string permissions = 3;
  optional resources.users.User user_info = 4;
  optional resources.users.JobProps job_props = 5;
}

service NotificatorService {
  // @perm: Name=Any
  rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse);
  // @perm: Name=Any
  rpc ReadNotifications(ReadNotificationsRequest) returns (ReadNotificationsResponse);

  // @perm: Name=Any
  rpc Stream(StreamRequest) returns (stream StreamResponse);
}
