syntax = "proto3";

package services.completor;
option go_package = "github.com/galexrt/fivenet/gen/go/proto/services/completor;completor";

import "resources/documents/category.proto";
import "resources/jobs/jobs.proto";
import "resources/laws/laws.proto";
import "resources/users/users.proto";
import "validate/validate.proto";

message CompleteCitizensRequest {
  string search = 1 [(validate.rules).string.max_len = 50];
}

message CompleteCitizensRespoonse {
  repeated resources.users.UserShort users = 1; // @gotags: alias:"user"
}

message CompleteJobsRequest {
  optional string search = 1 [(validate.rules).string.max_len = 50];
  optional bool exact_match = 2;
  optional bool current_job = 3;
}

message CompleteJobsResponse {
  repeated resources.jobs.Job jobs = 1;
}

message CompleteDocumentCategoriesRequest {
  string search = 1 [(validate.rules).string.max_len = 128];
}

message CompleteDocumentCategoriesResponse {
  repeated resources.documents.Category categories = 1;
}

message ListLawBooksRequest {}

message ListLawBooksResponse {
  repeated resources.laws.LawBook books = 1;
}

service CompletorService {
  // @perm
  rpc CompleteCitizens(CompleteCitizensRequest) returns (CompleteCitizensRespoonse);
  // @perm
  rpc CompleteJobs(CompleteJobsRequest) returns (CompleteJobsResponse);
  // @perm: Attrs=Jobs/JobList
  rpc CompleteDocumentCategories(CompleteDocumentCategoriesRequest) returns (CompleteDocumentCategoriesResponse);
  // @perm: Name=Any
  rpc ListLawBooks(ListLawBooksRequest) returns (ListLawBooksResponse);
}
