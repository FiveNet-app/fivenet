syntax = "proto3";

package services.centrum;
option go_package = "github.com/galexrt/fivenet/gen/go/proto/services/centrum;centrum";

import "resources/common/database/database.proto";
import "resources/dispatch/dispatches.proto";
import "resources/dispatch/settings.proto";
import "resources/dispatch/units.proto";
import "resources/users/users.proto";
import "validate/validate.proto";

// Common

message ListDispatchActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  uint64 id = 2;
}

message ListUnitActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  uint64 id = 2;
}

message GetSettingsRequest {}

// Unit Management

message ListUnitsRequest {
  repeated resources.dispatch.UNIT_STATUS status = 1 [(validate.rules).repeated.items.enum.defined_only = true];
}

message ListUnitsResponse {
  repeated resources.dispatch.Unit units = 1;
}

message CreateOrUpdateUnitRequest {
  resources.dispatch.Unit unit = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateUnitResponse {
  resources.dispatch.Unit unit = 1;
}

message DeleteUnitRequest {
  uint64 unit_id = 1;
}

message DeleteUnitResponse {}

message UpdateUnitStatusRequest {
  uint64 unit_id = 1;
  resources.dispatch.UNIT_STATUS status = 2 [(validate.rules).enum.defined_only = true];
  optional string reason = 3;
  optional string code = 4;
}

message UpdateUnitStatusResponse {}

message AssignUnitRequest {
  uint64 unit_id = 1;
  repeated int32 to_add = 2;
  repeated int32 to_remove = 3;
}

message AssignUnitResponse {}

message ListUnitActivityResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.dispatch.UnitStatus activity = 2;
}

// Dispatch Management

message TakeControlRequest {
  bool signon = 1;
}

message TakeControlResponse {}

message DisponentsChange {
  repeated resources.users.UserShort disponents = 1;
  bool active = 2;
}

message ListDispatchesRequest {
  repeated resources.dispatch.DISPATCH_STATUS status = 1 [(validate.rules).repeated.items.enum.defined_only = true];
}

message ListDispatchesResponse {
  repeated resources.dispatch.Dispatch dispatches = 1;
}

message CreateDispatchRequest {
  resources.dispatch.Dispatch dispatch = 1 [(validate.rules).message.required = true];
}

message CreateDispatchResponse {
  resources.dispatch.Dispatch dispatch = 1;
}

message UpdateDispatchRequest {
  resources.dispatch.Dispatch dispatch = 1 [(validate.rules).message.required = true];
}

message UpdateDispatchResponse {}

message UpdateDispatchStatusRequest {
  uint64 dispatch_id = 1;
  resources.dispatch.DISPATCH_STATUS status = 2 [(validate.rules).enum.defined_only = true];
  optional string reason = 3;
  optional string code = 4;
}

message UpdateDispatchStatusResponse {}

message AssignDispatchRequest {
  uint64 dispatch_id = 1;
  repeated uint64 to_add = 2;
  repeated uint64 to_remove = 3;
}

message AssignDispatchResponse {}

message ListDispatchActivityResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.dispatch.DispatchStatus activity = 2;
}

enum TAKE_DISPATCH_RESP {
  TIMEOUT = 0;
  ACCEPTED = 1;
  DECLINED = 2;
}

message TakeDispatchRequest {
  uint64 dispatch_id = 1;
  TAKE_DISPATCH_RESP resp = 2 [(validate.rules).enum.defined_only = true];
  optional string reason = 3 [(validate.rules).string.max_len = 255];
}

message TakeDispatchResponse {}

message JoinUnitRequest {
  uint64 unit_id = 1;
  optional bool leave = 2;
}

message JoinUnitResponse {
  resources.dispatch.Unit unit = 1;
}

message Initial {
  bool is_disponent = 1;
  resources.dispatch.Settings settings = 2;
  resources.dispatch.Unit unit = 3;
  // Send the current units and dispatches
  repeated resources.dispatch.Unit units = 4;
  repeated resources.dispatch.Dispatch dispatches = 5;
}

message StreamRequest {}

message StreamResponse {
  oneof change {
    Initial initial = 1;
    resources.dispatch.Settings settings = 2;
    DisponentsChange disponents = 3;

    resources.dispatch.DispatchStatus dispatch_status = 4;
    resources.dispatch.Dispatch dispatch_update = 5;
    resources.dispatch.Dispatch dispatch_assigned = 6;
    resources.dispatch.Dispatch dispatch_unassigned = 7;

    resources.dispatch.UnitStatus unit_status = 8;
    resources.dispatch.Unit unit_update = 9;
    resources.dispatch.Unit unit_assigned = 10;
    uint64 unit_deleted = 11;
  }
}

service CentrumService {
  // @perm: Name=Stream
  rpc GetSettings(GetSettingsRequest) returns (resources.dispatch.Settings);
  // @perm
  rpc UpdateSettings(resources.dispatch.Settings) returns (resources.dispatch.Settings);
  // @perm
  rpc TakeControl(TakeControlRequest) returns (TakeControlResponse);

  // @perm: Name=Stream
  rpc ListUnits(ListUnitsRequest) returns (ListUnitsResponse);
  // @perm
  rpc CreateOrUpdateUnit(CreateOrUpdateUnitRequest) returns (CreateOrUpdateUnitResponse);
  // @perm
  rpc DeleteUnit(DeleteUnitRequest) returns (DeleteUnitResponse);
  // @perm: Name=TakeDispatch
  rpc UpdateUnitStatus(UpdateUnitStatusRequest) returns (UpdateUnitStatusResponse);
  // @perm: Name=TakeControl
  rpc AssignUnit(AssignUnitRequest) returns (AssignUnitResponse);
  // @perm: Name=Stream
  rpc ListUnitActivity(ListUnitActivityRequest) returns (ListUnitActivityResponse);

  // @perm: Name=Stream
  rpc ListDispatches(ListDispatchesRequest) returns (ListDispatchesResponse);
  // @perm
  rpc CreateDispatch(CreateDispatchRequest) returns (CreateDispatchResponse);
  // @perm
  rpc UpdateDispatch(UpdateDispatchRequest) returns (UpdateDispatchResponse);
  // @perm: Name=TakeDispatch
  rpc UpdateDispatchStatus(UpdateDispatchStatusRequest) returns (UpdateDispatchStatusResponse);
  // @perm: Name=Stream
  rpc ListDispatchActivity(ListDispatchActivityRequest) returns (ListDispatchActivityResponse);
  // @perm: Name=TakeControl
  rpc AssignDispatch(AssignDispatchRequest) returns (AssignDispatchResponse);
  // @perm: Name=Stream
  rpc JoinUnit(JoinUnitRequest) returns (JoinUnitResponse);
  // @perm
  rpc TakeDispatch(TakeDispatchRequest) returns (TakeDispatchResponse);

  // @perm
  rpc Stream(StreamRequest) returns (stream StreamResponse);
}
