syntax = "proto3";

package services.rector;
option go_package = "github.com/galexrt/fivenet/proto/services/rector;rector";

import "resources/permissions/permissions.proto";
import "validate/validate.proto";

message GetRolesRequest {
  int32 rank = 1 [(validate.rules).int32.gt = 0];
}

message GetRolesResponse {
  repeated resources.permissions.Role roles = 1;
}

message GetRoleRequest {
  uint64 id = 1;
}

message GetRoleResponse {
  resources.permissions.Role role = 1;
}

message AddPermToRoleRequest {
  uint64 id = 1;
  repeated uint64 permissions = 2 [(validate.rules).repeated.min_items = 1];
}

message AddPermToRoleResponse {}

message RemovePermFromRoleRequest {
  uint64 id = 1;
  repeated uint64 permissions = 2 [(validate.rules).repeated.min_items = 1];
}

message RemovePermFromRoleResponse {}

message DeleteRoleRequest {
  uint64 id = 1;
}

message DeleteRoleResponse {}

message GetPermissionsRequest {
  string search = 1 [(validate.rules).string.max_len = 32];
}

message GetPermissionsResponse {
  repeated resources.permissions.Permission permissions = 1;
}

service RectorService {
  // @permission
  rpc GetRoles(GetRolesRequest) returns (GetRolesResponse);
  // @permission: name=GetRoles
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse);
  // @permission
  rpc AddPermToRole(AddPermToRoleRequest) returns (AddPermToRoleResponse);
  // @permission: name=AddPermToRole
  rpc RemovePermFromRole(RemovePermFromRoleRequest) returns (RemovePermFromRoleResponse);
  // @permission
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse);

  // @permission: PerJob=true
  rpc GetPermissions(GetPermissionsRequest) returns (GetPermissionsResponse);
}
