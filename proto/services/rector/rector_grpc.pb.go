// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services/rector/rector.proto

package rector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RectorServiceClient is the client API for RectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RectorServiceClient interface {
	// @perm: description="Get/List FiveNet job roles"
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	// @perm: name=GetRoles
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	// @perm: description="Create rank-specific FiveNet job roles"
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// @perm: description="Delete FiveNet job roles"
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// @perm: description="Add/ Delete permissions to FiveNet job roles"
	AddPermToRole(ctx context.Context, in *AddPermToRoleRequest, opts ...grpc.CallOption) (*AddPermToRoleResponse, error)
	// @perm: name=AddPermToRole
	RemovePermFromRole(ctx context.Context, in *RemovePermFromRoleRequest, opts ...grpc.CallOption) (*RemovePermFromRoleResponse, error)
	// @perm: PerJob=true;description="Get list of available FiveNet job roles permissions"
	GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
}

type rectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRectorServiceClient(cc grpc.ClientConnInterface) RectorServiceClient {
	return &rectorServiceClient{cc}
}

func (c *rectorServiceClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/services.rector.RectorService/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/services.rector.RectorService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/services.rector.RectorService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/services.rector.RectorService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorServiceClient) AddPermToRole(ctx context.Context, in *AddPermToRoleRequest, opts ...grpc.CallOption) (*AddPermToRoleResponse, error) {
	out := new(AddPermToRoleResponse)
	err := c.cc.Invoke(ctx, "/services.rector.RectorService/AddPermToRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorServiceClient) RemovePermFromRole(ctx context.Context, in *RemovePermFromRoleRequest, opts ...grpc.CallOption) (*RemovePermFromRoleResponse, error) {
	out := new(RemovePermFromRoleResponse)
	err := c.cc.Invoke(ctx, "/services.rector.RectorService/RemovePermFromRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorServiceClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/services.rector.RectorService/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RectorServiceServer is the server API for RectorService service.
// All implementations must embed UnimplementedRectorServiceServer
// for forward compatibility
type RectorServiceServer interface {
	// @perm: description="Get/List FiveNet job roles"
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	// @perm: name=GetRoles
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	// @perm: description="Create rank-specific FiveNet job roles"
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// @perm: description="Delete FiveNet job roles"
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// @perm: description="Add/ Delete permissions to FiveNet job roles"
	AddPermToRole(context.Context, *AddPermToRoleRequest) (*AddPermToRoleResponse, error)
	// @perm: name=AddPermToRole
	RemovePermFromRole(context.Context, *RemovePermFromRoleRequest) (*RemovePermFromRoleResponse, error)
	// @perm: PerJob=true;description="Get list of available FiveNet job roles permissions"
	GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error)
	mustEmbedUnimplementedRectorServiceServer()
}

// UnimplementedRectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRectorServiceServer struct {
}

func (UnimplementedRectorServiceServer) GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedRectorServiceServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRectorServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRectorServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRectorServiceServer) AddPermToRole(context.Context, *AddPermToRoleRequest) (*AddPermToRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermToRole not implemented")
}
func (UnimplementedRectorServiceServer) RemovePermFromRole(context.Context, *RemovePermFromRoleRequest) (*RemovePermFromRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermFromRole not implemented")
}
func (UnimplementedRectorServiceServer) GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedRectorServiceServer) mustEmbedUnimplementedRectorServiceServer() {}

// UnsafeRectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RectorServiceServer will
// result in compilation errors.
type UnsafeRectorServiceServer interface {
	mustEmbedUnimplementedRectorServiceServer()
}

func RegisterRectorServiceServer(s grpc.ServiceRegistrar, srv RectorServiceServer) {
	s.RegisterService(&RectorService_ServiceDesc, srv)
}

func _RectorService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.rector.RectorService/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorServiceServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.rector.RectorService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.rector.RectorService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.rector.RectorService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorService_AddPermToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorServiceServer).AddPermToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.rector.RectorService/AddPermToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorServiceServer).AddPermToRole(ctx, req.(*AddPermToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorService_RemovePermFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorServiceServer).RemovePermFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.rector.RectorService/RemovePermFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorServiceServer).RemovePermFromRole(ctx, req.(*RemovePermFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.rector.RectorService/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorServiceServer).GetPermissions(ctx, req.(*GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RectorService_ServiceDesc is the grpc.ServiceDesc for RectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.rector.RectorService",
	HandlerType: (*RectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoles",
			Handler:    _RectorService_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RectorService_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RectorService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RectorService_DeleteRole_Handler,
		},
		{
			MethodName: "AddPermToRole",
			Handler:    _RectorService_AddPermToRole_Handler,
		},
		{
			MethodName: "RemovePermFromRole",
			Handler:    _RectorService_RemovePermFromRole_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _RectorService_GetPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/rector/rector.proto",
}
