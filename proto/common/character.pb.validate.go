// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/character.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Character with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Character) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Character with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CharacterMultiError, or nil
// if none found.
func (m *Character) ValidateAll() error {
	return m.validate(true)
}

func (m *Character) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CharacterValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Identifier

	// no validation rules for Job

	// no validation rules for JobGrade

	// no validation rules for Firstname

	// no validation rules for Lastname

	// no validation rules for Dateofbirth

	// no validation rules for Sex

	// no validation rules for Height

	// no validation rules for Visum

	// no validation rules for Playtime

	if all {
		switch v := interface{}(m.GetProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CharacterValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CharacterValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CharacterValidationError{
				field:  "Props",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLicenses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterValidationError{
						field:  fmt.Sprintf("Licenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterValidationError{
						field:  fmt.Sprintf("Licenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterValidationError{
					field:  fmt.Sprintf("Licenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CharacterMultiError(errors)
	}

	return nil
}

// CharacterMultiError is an error wrapping multiple validation errors returned
// by Character.ValidateAll() if the designated constraints aren't met.
type CharacterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterMultiError) AllErrors() []error { return m }

// CharacterValidationError is the validation error returned by
// Character.Validate if the designated constraints aren't met.
type CharacterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterValidationError) ErrorName() string { return "CharacterValidationError" }

// Error satisfies the builtin error interface
func (e CharacterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterValidationError{}

// Validate checks the field values on License with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *License) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on License with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LicenseMultiError, or nil if none found.
func (m *License) ValidateAll() error {
	return m.validate(true)
}

func (m *License) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return LicenseMultiError(errors)
	}

	return nil
}

// LicenseMultiError is an error wrapping multiple validation errors returned
// by License.ValidateAll() if the designated constraints aren't met.
type LicenseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseMultiError) AllErrors() []error { return m }

// LicenseValidationError is the validation error returned by License.Validate
// if the designated constraints aren't met.
type LicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseValidationError) ErrorName() string { return "LicenseValidationError" }

// Error satisfies the builtin error interface
func (e LicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseValidationError{}

// Validate checks the field values on Props with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Props) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Props with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PropsMultiError, or nil if none found.
func (m *Props) ValidateAll() error {
	return m.validate(true)
}

func (m *Props) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Wanted

	if len(errors) > 0 {
		return PropsMultiError(errors)
	}

	return nil
}

// PropsMultiError is an error wrapping multiple validation errors returned by
// Props.ValidateAll() if the designated constraints aren't met.
type PropsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropsMultiError) AllErrors() []error { return m }

// PropsValidationError is the validation error returned by Props.Validate if
// the designated constraints aren't met.
type PropsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropsValidationError) ErrorName() string { return "PropsValidationError" }

// Error satisfies the builtin error interface
func (e PropsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropsValidationError{}

// Validate checks the field values on ShortCharacter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShortCharacter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortCharacter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShortCharacterMultiError,
// or nil if none found.
func (m *ShortCharacter) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortCharacter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := ShortCharacterValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Identifier

	// no validation rules for Job

	// no validation rules for JobGrade

	// no validation rules for Firstname

	// no validation rules for Lastname

	if len(errors) > 0 {
		return ShortCharacterMultiError(errors)
	}

	return nil
}

// ShortCharacterMultiError is an error wrapping multiple validation errors
// returned by ShortCharacter.ValidateAll() if the designated constraints
// aren't met.
type ShortCharacterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortCharacterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortCharacterMultiError) AllErrors() []error { return m }

// ShortCharacterValidationError is the validation error returned by
// ShortCharacter.Validate if the designated constraints aren't met.
type ShortCharacterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortCharacterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortCharacterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortCharacterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortCharacterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortCharacterValidationError) ErrorName() string { return "ShortCharacterValidationError" }

// Error satisfies the builtin error interface
func (e ShortCharacterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortCharacter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortCharacterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortCharacterValidationError{}
