package main

import (
	"path"
	"strings"
	"text/template"

	pgsgo "github.com/lyft/protoc-gen-star/v2/lang/go"

	pgs "github.com/lyft/protoc-gen-star/v2"
)

// JSEnumHelperPlugin
type JSEnumHelperModule struct {
	*pgs.ModuleBase
	ctx pgsgo.Context
	tpl *template.Template
}

// JSEnumHelper returns an initialized JSEnumHelperPlugin
func JSEnumHelper() *JSEnumHelperModule { return &JSEnumHelperModule{ModuleBase: &pgs.ModuleBase{}} }

func (p *JSEnumHelperModule) InitContext(c pgs.BuildContext) {
	p.ModuleBase.InitContext(c)
	p.ctx = pgsgo.InitContext(c.Parameters())

	tpl := template.New("jsEnumHelper").Funcs(map[string]interface{}{
		"package": p.ctx.PackageName,
		"name":    p.ctx.Name,
		"filename": func(in string) string {
			return strings.ReplaceAll(path.Base(in), ".proto", "")
		},
	})

	p.tpl = template.Must(tpl.Parse(jsEnumHelperTpl))
}

// Name satisfies the generator.Plugin interface.
func (p *JSEnumHelperModule) Name() string { return "jsEnumHelper" }

func (p *JSEnumHelperModule) Execute(targets map[string]pgs.File, pkgs map[string]pgs.Package) []pgs.Artifact {
	for _, t := range targets {
		p.generate(t)
	}

	return p.Artifacts()
}

func (p *JSEnumHelperModule) generate(f pgs.File) {
	if len(f.Enums()) == 0 {
		return
	}

	p.Debugf("File Import Name: %q\n", f.Descriptor().GetName())

	name := p.ctx.OutputPath(f).SetExt("_enums.ts")
	p.AddGeneratorTemplateFile(name.String(), p.tpl, f)
}

const jsEnumHelperTpl = `// Code generated by protoc-gen-customizerweb. DO NOT EDIT.
// source: {{ .File.InputPath }}

{{ range .Enums }}
{{- $enum := . -}}
import { {{ $enum.Descriptor.Name }} } from './{{ filename $.Descriptor.Name }}_pb';
{{ end }}
{{ range .Enums }}
{{- $enum := . -}}
// {{ .Descriptor.Name }}
export class {{ .Descriptor.Name }}_Util {
    public static toEnumKey(input: {{ .Descriptor.Name }}): string | undefined {
        const index = Object.values({{ .Descriptor.Name }}).indexOf(input);
        if (index <= -1) {
            return "N/A";
        }
        return Object.keys({{ .Descriptor.Name }})[index];
    }

    public static fromInt(input: Number): {{ .Descriptor.Name }} {
        switch (input) {
            {{- range $k, $val := .Values }}
            case {{ $val.Value }}:
                return {{ $enum.Descriptor.Name }}.{{ $val.Descriptor.Name }};
            {{ end -}}
        }
        {{- range $k, $val := .Values }}
        return {{ $enum.Descriptor.Name }}.{{ $val.Descriptor.Name }};
        {{- break }}
        {{- end }}
    }

    public static fromString(input: String): {{ .Descriptor.Name }} {
        switch (input) {
            {{- range $k, $val := .Values }}
            case '{{ $val.Descriptor.Name }}':
                return {{ $enum.Descriptor.Name }}.{{ $val.Descriptor.Name }};
            {{ end -}}
        }
        {{- range $k, $val := .Values }}
        return {{ $enum.Descriptor.Name }}.{{ $val.Descriptor.Name }};
        {{- break }}
        {{- end }}
    }
}
{{- end }}
`
