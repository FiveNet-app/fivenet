package main

import (
	"text/template"

	pgs "github.com/lyft/protoc-gen-star/v2"
	pgsgo "github.com/lyft/protoc-gen-star/v2/lang/go"
)

// TesterPlugin
type RegisterModule struct {
	*pgs.ModuleBase
	ctx pgsgo.Context
	tpl *template.Template
}

// Tester returns an initialized TesterPlugin
func Register() *RegisterModule { return &RegisterModule{ModuleBase: &pgs.ModuleBase{}} }

func (p *RegisterModule) InitContext(c pgs.BuildContext) {
	p.ModuleBase.InitContext(c)
	p.ctx = pgsgo.InitContext(c.Parameters())

	tpl := template.New("register").Funcs(map[string]interface{}{
		"package": p.ctx.PackageName,
		"name":    p.ctx.Name,
	})

	p.tpl = template.Must(tpl.Parse(registerTpl))
}

// Name satisfies the generator.Plugin interface.
func (p *RegisterModule) Name() string { return "register" }

func (p *RegisterModule) Execute(targets map[string]pgs.File, pkgs map[string]pgs.Package) []pgs.Artifact {
	for _, t := range targets {
		p.generate(t)
	}

	return p.Artifacts()
}

func (p *RegisterModule) generate(f pgs.File) {
	if len(f.Services()) == 0 {
		return
	}

	name := p.ctx.OutputPath(f).SetExt(".register.go")
	p.AddGeneratorTemplateFile(name.String(), p.tpl, f)
}

const registerTpl = `// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: {{ .File.InputPath }}

package {{ package . }}

import (
	grpc "google.golang.org/grpc"
)

func (s *Server) RegisterServer(srv *grpc.Server) {
{{- range $service := .Services }}
    Register{{ $service.Name }}Server(srv, s)
{{- end }}
}
`
